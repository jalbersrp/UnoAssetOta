
/Users/alberto/Documents/Particle_Workbench/AssetOTA/UnoAssetOta/target/5.5.0-rc.1/p2/UnoAssetOta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fb000  085fb000  0000b000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fb018  085fb018  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fb650  085fb0a8  0000b650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00004998  023fb658  085fb0b0  0000b658  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007ad68  085ffa48  0001ad68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000208  1007ade0  1007ade0  0002ade0  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffac0  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 000004f4  085ffac4  085ffac4  0001fac4  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001fac4  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00150fe1  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00014d79  00000000  00000000  00170fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00043db1  00000000  00000000  00185d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003140  00000000  00000000  001c9b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000c710  00000000  00000000  001ccc4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000240d1  00000000  00000000  001d935b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000423ed  00000000  00000000  001fd42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d68fd  00000000  00000000  0023f819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008f50  00000000  00000000  00316118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fb018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb018:	4813      	ldr	r0, [pc, #76]	; (85fb068 <module_user_pre_init+0x50>)
 85fb01a:	4914      	ldr	r1, [pc, #80]	; (85fb06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fb01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb01e:	4288      	cmp	r0, r1
 85fb020:	d005      	beq.n	85fb02e <module_user_pre_init+0x16>
 85fb022:	4a13      	ldr	r2, [pc, #76]	; (85fb070 <module_user_pre_init+0x58>)
 85fb024:	4282      	cmp	r2, r0
 85fb026:	d002      	beq.n	85fb02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fb028:	4b12      	ldr	r3, [pc, #72]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb02a:	1a12      	subs	r2, r2, r0
 85fb02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fb02e:	4812      	ldr	r0, [pc, #72]	; (85fb078 <module_user_pre_init+0x60>)
 85fb030:	4a12      	ldr	r2, [pc, #72]	; (85fb07c <module_user_pre_init+0x64>)
 85fb032:	2100      	movs	r1, #0
 85fb034:	4b12      	ldr	r3, [pc, #72]	; (85fb080 <module_user_pre_init+0x68>)
 85fb036:	1a12      	subs	r2, r2, r0
 85fb038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fb03a:	4812      	ldr	r0, [pc, #72]	; (85fb084 <module_user_pre_init+0x6c>)
 85fb03c:	4912      	ldr	r1, [pc, #72]	; (85fb088 <module_user_pre_init+0x70>)
 85fb03e:	4288      	cmp	r0, r1
 85fb040:	d005      	beq.n	85fb04e <module_user_pre_init+0x36>
 85fb042:	4a12      	ldr	r2, [pc, #72]	; (85fb08c <module_user_pre_init+0x74>)
 85fb044:	4282      	cmp	r2, r0
 85fb046:	d002      	beq.n	85fb04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fb048:	4b0a      	ldr	r3, [pc, #40]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb04a:	1a12      	subs	r2, r2, r0
 85fb04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fb04e:	4810      	ldr	r0, [pc, #64]	; (85fb090 <module_user_pre_init+0x78>)
 85fb050:	4910      	ldr	r1, [pc, #64]	; (85fb094 <module_user_pre_init+0x7c>)
 85fb052:	4288      	cmp	r0, r1
 85fb054:	d005      	beq.n	85fb062 <module_user_pre_init+0x4a>
 85fb056:	4a10      	ldr	r2, [pc, #64]	; (85fb098 <module_user_pre_init+0x80>)
 85fb058:	4282      	cmp	r2, r0
 85fb05a:	d002      	beq.n	85fb062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fb05c:	4b05      	ldr	r3, [pc, #20]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb05e:	1a12      	subs	r2, r2, r0
 85fb060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fb062:	4801      	ldr	r0, [pc, #4]	; (85fb068 <module_user_pre_init+0x50>)
 85fb064:	bd08      	pop	{r3, pc}
 85fb066:	bf00      	nop
 85fb068:	1007ad68 	.word	0x1007ad68
 85fb06c:	085ffa48 	.word	0x085ffa48
 85fb070:	1007ade0 	.word	0x1007ade0
 85fb074:	10110d2d 	.word	0x10110d2d
 85fb078:	1007ade0 	.word	0x1007ade0
 85fb07c:	1007afe8 	.word	0x1007afe8
 85fb080:	10110ea1 	.word	0x10110ea1
 85fb084:	023fb650 	.word	0x023fb650
 85fb088:	085fb0a8 	.word	0x085fb0a8
 85fb08c:	023fb658 	.word	0x023fb658
 85fb090:	023fb658 	.word	0x023fb658
 85fb094:	085fb0b0 	.word	0x085fb0b0
 85fb098:	023ffff0 	.word	0x023ffff0

085fb09c <dynalib_preinit>:
 85fb09c:	085fb019 00000000                       .._.....

Disassembly of section .psram_text:

023fb658 <strcmp>:
 23fb658:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fb65c:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fb660:	2a01      	cmp	r2, #1
 23fb662:	bf28      	it	cs
 23fb664:	429a      	cmpcs	r2, r3
 23fb666:	d0f7      	beq.n	23fb658 <strcmp>
 23fb668:	1ad0      	subs	r0, r2, r3
 23fb66a:	4770      	bx	lr

023fb66c <strlen>:
 23fb66c:	4603      	mov	r3, r0
 23fb66e:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fb672:	2a00      	cmp	r2, #0
 23fb674:	d1fb      	bne.n	23fb66e <strlen+0x2>
 23fb676:	1a18      	subs	r0, r3, r0
 23fb678:	3801      	subs	r0, #1
 23fb67a:	4770      	bx	lr

023fb67c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fb67c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fb67e:	f003 fbf7 	bl	23fee70 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb682:	2500      	movs	r5, #0
 23fb684:	4e05      	ldr	r6, [pc, #20]	; (23fb69c <module_user_init+0x20>)
 23fb686:	4c06      	ldr	r4, [pc, #24]	; (23fb6a0 <module_user_init+0x24>)
 23fb688:	1ba4      	subs	r4, r4, r6
 23fb68a:	08a4      	lsrs	r4, r4, #2
 23fb68c:	42ac      	cmp	r4, r5
 23fb68e:	d100      	bne.n	23fb692 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fb690:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fb692:	f856 3b04 	ldr.w	r3, [r6], #4
 23fb696:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb698:	3501      	adds	r5, #1
 23fb69a:	e7f7      	b.n	23fb68c <module_user_init+0x10>
 23fb69c:	023fffcc 	.word	0x023fffcc
 23fb6a0:	023ffff0 	.word	0x023ffff0

023fb6a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fb6a4:	f000 bbe2 	b.w	23fbe6c <setup>

023fb6a8 <module_user_loop>:
}

void module_user_loop() {
 23fb6a8:	b508      	push	{r3, lr}
    loop();
 23fb6aa:	f000 fc5f 	bl	23fbf6c <loop>
    _post_loop();
}
 23fb6ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fb6b2:	f003 bb95 	b.w	23fede0 <_post_loop>

023fb6b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fb6b6:	f001 b95d 	b.w	23fc974 <malloc>

023fb6ba <_Znaj>:
 23fb6ba:	f001 b95b 	b.w	23fc974 <malloc>

023fb6be <_ZdaPv>:
 23fb6be:	f001 b967 	b.w	23fc990 <free>

023fb6c2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fb6c2:	f001 b965 	b.w	23fc990 <free>
	...

023fb6c8 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb6c8:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fb6ca:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb6cc:	4a02      	ldr	r2, [pc, #8]	; (23fb6d8 <__cxa_pure_virtual+0x10>)
 23fb6ce:	4903      	ldr	r1, [pc, #12]	; (23fb6dc <__cxa_pure_virtual+0x14>)
 23fb6d0:	f000 ff9e 	bl	23fc610 <panic_>
  while (1);
 23fb6d4:	e7fe      	b.n	23fb6d4 <__cxa_pure_virtual+0xc>
 23fb6d6:	bf00      	nop
 23fb6d8:	023fc1e9 	.word	0x023fc1e9
 23fb6dc:	023ff730 	.word	0x023ff730

023fb6e0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fb6e0:	7800      	ldrb	r0, [r0, #0]
 23fb6e2:	fab0 f080 	clz	r0, r0
 23fb6e6:	0940      	lsrs	r0, r0, #5
 23fb6e8:	4770      	bx	lr

023fb6ea <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fb6ea:	2301      	movs	r3, #1
 23fb6ec:	7003      	strb	r3, [r0, #0]
 23fb6ee:	4770      	bx	lr

023fb6f0 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fb6f0:	4770      	bx	lr
	...

023fb6f4 <_Z12raiseTrigger6String>:
}

int raiseTrigger(String extra)
{
  //This function raises the flag to update the arduino board asset
  updateTrigger = 1;
 23fb6f4:	2201      	movs	r2, #1
 23fb6f6:	4b02      	ldr	r3, [pc, #8]	; (23fb700 <_Z12raiseTrigger6String+0xc>)
  return 0;
}
 23fb6f8:	2000      	movs	r0, #0
  updateTrigger = 1;
 23fb6fa:	701a      	strb	r2, [r3, #0]
}
 23fb6fc:	4770      	bx	lr
 23fb6fe:	bf00      	nop
 23fb700:	1007ae48 	.word	0x1007ae48

023fb704 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fb704:	b510      	push	{r4, lr}
 23fb706:	4604      	mov	r4, r0
 23fb708:	4b09      	ldr	r3, [pc, #36]	; (23fb730 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fb70a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fb70c:	f002 f894 	bl	23fd838 <_ZN5spark10LogManager8instanceEv>
 23fb710:	4621      	mov	r1, r4
 23fb712:	f002 facb 	bl	23fdcac <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fb716:	f003 fa97 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fb71a:	f003 fa87 	bl	23fec2c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fb71e:	4620      	mov	r0, r4
 23fb720:	4b04      	ldr	r3, [pc, #16]	; (23fb734 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fb722:	f840 3b04 	str.w	r3, [r0], #4
 23fb726:	f002 f95d 	bl	23fd9e4 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fb72a:	4620      	mov	r0, r4
 23fb72c:	bd10      	pop	{r4, pc}
 23fb72e:	bf00      	nop
 23fb730:	023ffa9c 	.word	0x023ffa9c
 23fb734:	023ffa84 	.word	0x023ffa84

023fb738 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fb738:	b510      	push	{r4, lr}
 23fb73a:	4604      	mov	r4, r0
    }
 23fb73c:	f7ff ffe2 	bl	23fb704 <_ZN5spark16SerialLogHandlerD1Ev>
 23fb740:	4620      	mov	r0, r4
 23fb742:	2124      	movs	r1, #36	; 0x24
 23fb744:	f7ff ffbd 	bl	23fb6c2 <_ZdlPvj>
 23fb748:	4620      	mov	r0, r4
 23fb74a:	bd10      	pop	{r4, pc}

023fb74c <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23fb74c:	b510      	push	{r4, lr}
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fb74e:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23fb752:	4604      	mov	r4, r0
 23fb754:	4608      	mov	r0, r1
    attr.flags = 0;
 23fb756:	2100      	movs	r1, #0
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23fb758:	b08a      	sub	sp, #40	; 0x28
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fb75a:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
 23fb75e:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fb762:	460b      	mov	r3, r1
 23fb764:	aa02      	add	r2, sp, #8
 23fb766:	6821      	ldr	r1, [r4, #0]
 23fb768:	f000 ff60 	bl	23fc62c <log_message_v>
}
 23fb76c:	b00a      	add	sp, #40	; 0x28
 23fb76e:	bd10      	pop	{r4, pc}

023fb770 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
 23fb770:	b40e      	push	{r1, r2, r3}
 23fb772:	b503      	push	{r0, r1, lr}
 23fb774:	ab03      	add	r3, sp, #12
 23fb776:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_ERROR, fmt, args);
 23fb77a:	2132      	movs	r1, #50	; 0x32
    va_start(args, fmt);
 23fb77c:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
 23fb77e:	f7ff ffe5 	bl	23fb74c <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23fb782:	b002      	add	sp, #8
 23fb784:	f85d eb04 	ldr.w	lr, [sp], #4
 23fb788:	b003      	add	sp, #12
 23fb78a:	4770      	bx	lr

023fb78c <_ZNK5spark6Logger4infoEPKcz>:
inline void spark::Logger::info(const char *fmt, ...) const {
 23fb78c:	b40e      	push	{r1, r2, r3}
 23fb78e:	b503      	push	{r0, r1, lr}
 23fb790:	ab03      	add	r3, sp, #12
 23fb792:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_INFO, fmt, args);
 23fb796:	211e      	movs	r1, #30
    va_start(args, fmt);
 23fb798:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_INFO, fmt, args);
 23fb79a:	f7ff ffd7 	bl	23fb74c <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23fb79e:	b002      	add	sp, #8
 23fb7a0:	f85d eb04 	ldr.w	lr, [sp], #4
 23fb7a4:	b003      	add	sp, #12
 23fb7a6:	4770      	bx	lr

023fb7a8 <_ZNK5spark6Logger4warnEPKcz>:
inline void spark::Logger::warn(const char *fmt, ...) const {
 23fb7a8:	b40e      	push	{r1, r2, r3}
 23fb7aa:	b503      	push	{r0, r1, lr}
 23fb7ac:	ab03      	add	r3, sp, #12
 23fb7ae:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_WARN, fmt, args);
 23fb7b2:	2128      	movs	r1, #40	; 0x28
    va_start(args, fmt);
 23fb7b4:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_WARN, fmt, args);
 23fb7b6:	f7ff ffc9 	bl	23fb74c <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23fb7ba:	b002      	add	sp, #8
 23fb7bc:	f85d eb04 	ldr.w	lr, [sp], #4
 23fb7c0:	b003      	add	sp, #12
 23fb7c2:	4770      	bx	lr

023fb7c4 <_Z14readAssetBytesv>:
{
 23fb7c4:	b538      	push	{r3, r4, r5, lr}
  readBuffLength = 0;                   //The read buffer will start to fill at the first positon
 23fb7c6:	2300      	movs	r3, #0
 23fb7c8:	4c0c      	ldr	r4, [pc, #48]	; (23fb7fc <_Z14readAssetBytesv+0x38>)
    readBuff[readBuffLength] = preBuff; //Fill the buffer with the processed incoming byte on it's position
 23fb7ca:	4d0d      	ldr	r5, [pc, #52]	; (23fb800 <_Z14readAssetBytesv+0x3c>)
  readBuffLength = 0;                   //The read buffer will start to fill at the first positon
 23fb7cc:	6023      	str	r3, [r4, #0]
  while (Serial1.available() > 0)       //While there is data on the serial RX,
 23fb7ce:	f003 fc59 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fb7d2:	6803      	ldr	r3, [r0, #0]
 23fb7d4:	691b      	ldr	r3, [r3, #16]
 23fb7d6:	4798      	blx	r3
 23fb7d8:	2800      	cmp	r0, #0
 23fb7da:	dd0d      	ble.n	23fb7f8 <_Z14readAssetBytesv+0x34>
    preBuff = Serial1.read();           //Write the next byte on the prebuffer
 23fb7dc:	f003 fc52 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fb7e0:	6803      	ldr	r3, [r0, #0]
 23fb7e2:	695b      	ldr	r3, [r3, #20]
 23fb7e4:	4798      	blx	r3
      preBuff = 0x10;
 23fb7e6:	28fc      	cmp	r0, #252	; 0xfc
 23fb7e8:	bf08      	it	eq
 23fb7ea:	2010      	moveq	r0, #16
    readBuff[readBuffLength] = preBuff; //Fill the buffer with the processed incoming byte on it's position
 23fb7ec:	6823      	ldr	r3, [r4, #0]
 23fb7ee:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
    readBuffLength++;                   //Increment the buffer position for next round
 23fb7f2:	3301      	adds	r3, #1
 23fb7f4:	6023      	str	r3, [r4, #0]
  while (Serial1.available() > 0)       //While there is data on the serial RX,
 23fb7f6:	e7ea      	b.n	23fb7ce <_Z14readAssetBytesv+0xa>
}
 23fb7f8:	bd38      	pop	{r3, r4, r5, pc}
 23fb7fa:	bf00      	nop
 23fb7fc:	1007ae44 	.word	0x1007ae44
 23fb800:	1007ae04 	.word	0x1007ae04

023fb804 <_Z17releaseAssetPortsv>:
{
 23fb804:	b508      	push	{r3, lr}
  Serial1.end();                  //Serial1.end() does not revert the IOs used as INPUT,
 23fb806:	f003 fc3d 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fb80a:	f003 f9b0 	bl	23feb6e <_ZN11USARTSerial3endEv>
  pinMode(serial1RxPin,INPUT);
 23fb80e:	2100      	movs	r1, #0
 23fb810:	2009      	movs	r0, #9
 23fb812:	f003 fb9d 	bl	23fef50 <pinMode>
  pinMode(serial1TxPin,INPUT);
 23fb816:	2100      	movs	r1, #0
 23fb818:	2008      	movs	r0, #8
 23fb81a:	f003 fb99 	bl	23fef50 <pinMode>
}
 23fb81e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(resetPin, INPUT);
 23fb822:	2100      	movs	r1, #0
 23fb824:	2013      	movs	r0, #19
 23fb826:	f003 bb93 	b.w	23fef50 <pinMode>
	...

023fb82c <_Z16updateArduinoUnoRN8particle16ApplicationAssetE>:
{
 23fb82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Log.info("Configuring serial port to the target");
 23fb830:	496b      	ldr	r1, [pc, #428]	; (23fb9e0 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1b4>)
{
 23fb832:	b0a6      	sub	sp, #152	; 0x98
 23fb834:	4607      	mov	r7, r0
  Log.info("Configuring serial port to the target");
 23fb836:	486b      	ldr	r0, [pc, #428]	; (23fb9e4 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1b8>)
 23fb838:	f7ff ffa8 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
  Serial1.begin(115200);          //115200 for arduino UNO, 56700 for ProMini
 23fb83c:	f003 fc22 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fb840:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 23fb844:	f003 f990 	bl	23feb68 <_ZN11USARTSerial5beginEm>
  Serial1.flush();                //Wait for any outcoming data to exit the serial
 23fb848:	f003 fc1c 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fb84c:	6803      	ldr	r3, [r0, #0]
  Log.info("Get in sync with target AVR");
 23fb84e:	2506      	movs	r5, #6
  Serial1.flush();                //Wait for any outcoming data to exit the serial
 23fb850:	69db      	ldr	r3, [r3, #28]
 23fb852:	4798      	blx	r3
  pinMode(resetPin, OUTPUT);      //Configure pin to target reset as output and high
 23fb854:	2101      	movs	r1, #1
 23fb856:	2013      	movs	r0, #19
 23fb858:	f003 fb7a 	bl	23fef50 <pinMode>
  digitalWrite(resetPin, HIGH); 
 23fb85c:	2101      	movs	r1, #1
 23fb85e:	2013      	movs	r0, #19
 23fb860:	f003 fb87 	bl	23fef72 <digitalWrite>
  delay(5000);                    //Waits to te user to enable serial monitor
 23fb864:	f241 3088 	movw	r0, #5000	; 0x1388
 23fb868:	f001 f8e6 	bl	23fca38 <delay>
  Log.info("Resetting the target");
 23fb86c:	495e      	ldr	r1, [pc, #376]	; (23fb9e8 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1bc>)
 23fb86e:	485d      	ldr	r0, [pc, #372]	; (23fb9e4 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1b8>)
 23fb870:	f7ff ff8c 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
  digitalWrite(resetPin, LOW);    //Asset reset on target
 23fb874:	2100      	movs	r1, #0
 23fb876:	2013      	movs	r0, #19
 23fb878:	f003 fb7b 	bl	23fef72 <digitalWrite>
  delay(50);
 23fb87c:	2032      	movs	r0, #50	; 0x32
 23fb87e:	f001 f8db 	bl	23fca38 <delay>
  digitalWrite(resetPin, HIGH);   //Release reset on target
 23fb882:	2101      	movs	r1, #1
 23fb884:	2013      	movs	r0, #19
 23fb886:	f003 fb74 	bl	23fef72 <digitalWrite>
  delay(50);
 23fb88a:	2032      	movs	r0, #50	; 0x32
 23fb88c:	f001 f8d4 	bl	23fca38 <delay>
  Log.info("Get in sync with target AVR");
 23fb890:	4956      	ldr	r1, [pc, #344]	; (23fb9ec <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1c0>)
 23fb892:	4854      	ldr	r0, [pc, #336]	; (23fb9e4 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1b8>)
 23fb894:	f7ff ff7a 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
    if (readBuffLength < 2 || readBuff[readBuffLength - 2] != (byte)0x14 || readBuff[readBuffLength - 1] != (byte)0x10)
 23fb898:	4e55      	ldr	r6, [pc, #340]	; (23fb9f0 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1c4>)
 23fb89a:	4c56      	ldr	r4, [pc, #344]	; (23fb9f4 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1c8>)
  Log.info("Get in sync with target AVR");
 23fb89c:	f04f 0808 	mov.w	r8, #8
      Serial1.write((byte)0x30);  // STK_GET_SYNC - Regain synchronization
 23fb8a0:	f003 fbf0 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fb8a4:	6803      	ldr	r3, [r0, #0]
 23fb8a6:	2130      	movs	r1, #48	; 0x30
 23fb8a8:	689b      	ldr	r3, [r3, #8]
 23fb8aa:	4798      	blx	r3
      Serial1.write((byte)0x20);  // STK_CRC_EOP  - End of frame
 23fb8ac:	f003 fbea 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fb8b0:	6803      	ldr	r3, [r0, #0]
 23fb8b2:	2120      	movs	r1, #32
 23fb8b4:	689b      	ldr	r3, [r3, #8]
 23fb8b6:	4798      	blx	r3
      delay(200);
 23fb8b8:	20c8      	movs	r0, #200	; 0xc8
 23fb8ba:	f001 f8bd 	bl	23fca38 <delay>
    for (i = 0; i < 8; i++)       //Repeat 8 times the sync frame
 23fb8be:	f1b8 0801 	subs.w	r8, r8, #1
 23fb8c2:	d1ed      	bne.n	23fb8a0 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x74>
    Serial1.flush();
 23fb8c4:	f003 fbde 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fb8c8:	6803      	ldr	r3, [r0, #0]
 23fb8ca:	69db      	ldr	r3, [r3, #28]
 23fb8cc:	4798      	blx	r3
    readAssetBytes();
 23fb8ce:	f7ff ff79 	bl	23fb7c4 <_Z14readAssetBytesv>
    if (readBuffLength < 2 || readBuff[readBuffLength - 2] != (byte)0x14 || readBuff[readBuffLength - 1] != (byte)0x10)
 23fb8d2:	6833      	ldr	r3, [r6, #0]
 23fb8d4:	2b01      	cmp	r3, #1
 23fb8d6:	dd09      	ble.n	23fb8ec <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0xc0>
 23fb8d8:	1e9a      	subs	r2, r3, #2
 23fb8da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 23fb8de:	2a14      	cmp	r2, #20
 23fb8e0:	d104      	bne.n	23fb8ec <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0xc0>
 23fb8e2:	3b01      	subs	r3, #1
 23fb8e4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 23fb8e8:	2b10      	cmp	r3, #16
 23fb8ea:	d00c      	beq.n	23fb906 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0xda>
      if(syncTries>=maxSyncTries)
 23fb8ec:	3d01      	subs	r5, #1
 23fb8ee:	d1d5      	bne.n	23fb89c <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x70>
        releaseAssetPorts();
 23fb8f0:	f7ff ff88 	bl	23fb804 <_Z17releaseAssetPortsv>
        Log.error("Error code 2: Out of sync!");
 23fb8f4:	4940      	ldr	r1, [pc, #256]	; (23fb9f8 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1cc>)
 23fb8f6:	483b      	ldr	r0, [pc, #236]	; (23fb9e4 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1b8>)
 23fb8f8:	f7ff ff3a 	bl	23fb770 <_ZNK5spark6Logger5errorEPKcz>
        return 2;
 23fb8fc:	2502      	movs	r5, #2
}
 23fb8fe:	4628      	mov	r0, r5
 23fb900:	b026      	add	sp, #152	; 0x98
 23fb902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  Serial1.flush();
 23fb906:	f003 fbbd 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fb90a:	6803      	ldr	r3, [r0, #0]
 23fb90c:	69db      	ldr	r3, [r3, #28]
 23fb90e:	4798      	blx	r3
  Log.info("Checking device signature");
 23fb910:	493a      	ldr	r1, [pc, #232]	; (23fb9fc <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1d0>)
 23fb912:	4834      	ldr	r0, [pc, #208]	; (23fb9e4 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1b8>)
 23fb914:	f7ff ff3a 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
  Serial1.write((byte)0x75);  // READ_SIGN - Read device signature
 23fb918:	f003 fbb4 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fb91c:	6803      	ldr	r3, [r0, #0]
 23fb91e:	2175      	movs	r1, #117	; 0x75
 23fb920:	689b      	ldr	r3, [r3, #8]
 23fb922:	4798      	blx	r3
  Serial1.write((byte)0x20);  // STK_CRC_EOP - End of frame
 23fb924:	f003 fbae 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fb928:	6803      	ldr	r3, [r0, #0]
 23fb92a:	2120      	movs	r1, #32
 23fb92c:	689b      	ldr	r3, [r3, #8]
 23fb92e:	4798      	blx	r3
  delay(200);
 23fb930:	20c8      	movs	r0, #200	; 0xc8
 23fb932:	f001 f881 	bl	23fca38 <delay>
  Serial1.flush();
 23fb936:	f003 fba5 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fb93a:	6803      	ldr	r3, [r0, #0]
 23fb93c:	69db      	ldr	r3, [r3, #28]
 23fb93e:	4798      	blx	r3
  readAssetBytes();
 23fb940:	f7ff ff40 	bl	23fb7c4 <_Z14readAssetBytesv>
  if (readBuffLength < 4 || readBuff[readBuffLength - 4] != (byte)0x1E || readBuff[readBuffLength - 3] != (byte)0x95 || readBuff[readBuffLength - 2] != (byte)0x0F)
 23fb944:	6833      	ldr	r3, [r6, #0]
 23fb946:	2b03      	cmp	r3, #3
 23fb948:	dd0e      	ble.n	23fb968 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x13c>
 23fb94a:	1f1a      	subs	r2, r3, #4
 23fb94c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 23fb950:	2a1e      	cmp	r2, #30
 23fb952:	d109      	bne.n	23fb968 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x13c>
 23fb954:	1eda      	subs	r2, r3, #3
 23fb956:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 23fb95a:	2a95      	cmp	r2, #149	; 0x95
 23fb95c:	d104      	bne.n	23fb968 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x13c>
 23fb95e:	3b02      	subs	r3, #2
 23fb960:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 23fb964:	2b0f      	cmp	r3, #15
 23fb966:	d007      	beq.n	23fb978 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x14c>
    releaseAssetPorts();
 23fb968:	f7ff ff4c 	bl	23fb804 <_Z17releaseAssetPortsv>
    Log.error("Error code 3: Wrong device signature!");
 23fb96c:	4924      	ldr	r1, [pc, #144]	; (23fba00 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1d4>)
 23fb96e:	481d      	ldr	r0, [pc, #116]	; (23fb9e4 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1b8>)
 23fb970:	f7ff fefe 	bl	23fb770 <_ZNK5spark6Logger5errorEPKcz>
    return 3;
 23fb974:	2503      	movs	r5, #3
 23fb976:	e7c2      	b.n	23fb8fe <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0xd2>
  Serial1.flush();
 23fb978:	f003 fb84 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fb97c:	6803      	ldr	r3, [r0, #0]
 23fb97e:	69db      	ldr	r3, [r3, #28]
 23fb980:	4798      	blx	r3
  Log.info("Erasing device");
 23fb982:	4920      	ldr	r1, [pc, #128]	; (23fba04 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1d8>)
 23fb984:	4817      	ldr	r0, [pc, #92]	; (23fb9e4 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1b8>)
 23fb986:	f7ff ff01 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
  Serial1.write((byte)0x52);  // CHIP_ERASE  - Read device signature
 23fb98a:	f003 fb7b 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fb98e:	6803      	ldr	r3, [r0, #0]
 23fb990:	2152      	movs	r1, #82	; 0x52
 23fb992:	689b      	ldr	r3, [r3, #8]
 23fb994:	4798      	blx	r3
  Serial1.write((byte)0x20);  // STK_CRC_EOP - End of frame
 23fb996:	f003 fb75 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fb99a:	6803      	ldr	r3, [r0, #0]
 23fb99c:	2120      	movs	r1, #32
 23fb99e:	689b      	ldr	r3, [r3, #8]
 23fb9a0:	4798      	blx	r3
  delay(200);
 23fb9a2:	20c8      	movs	r0, #200	; 0xc8
 23fb9a4:	f001 f848 	bl	23fca38 <delay>
  Serial1.flush();
 23fb9a8:	f003 fb6c 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fb9ac:	6803      	ldr	r3, [r0, #0]
 23fb9ae:	69db      	ldr	r3, [r3, #28]
 23fb9b0:	4798      	blx	r3
  readAssetBytes();
 23fb9b2:	f7ff ff07 	bl	23fb7c4 <_Z14readAssetBytesv>
  if (readBuffLength < 2 || readBuff[readBuffLength - 2] != (byte)0x14 || readBuff[readBuffLength - 1] != (byte)0x10)
 23fb9b6:	6833      	ldr	r3, [r6, #0]
 23fb9b8:	2b01      	cmp	r3, #1
 23fb9ba:	dd09      	ble.n	23fb9d0 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1a4>
 23fb9bc:	1e9a      	subs	r2, r3, #2
 23fb9be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 23fb9c2:	2a14      	cmp	r2, #20
 23fb9c4:	d104      	bne.n	23fb9d0 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1a4>
 23fb9c6:	3b01      	subs	r3, #1
 23fb9c8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 23fb9cc:	2b10      	cmp	r3, #16
 23fb9ce:	d01d      	beq.n	23fba0c <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1e0>
    releaseAssetPorts();
 23fb9d0:	f7ff ff18 	bl	23fb804 <_Z17releaseAssetPortsv>
    Log.error("Error code 4: Chip erase failure!");
 23fb9d4:	490c      	ldr	r1, [pc, #48]	; (23fba08 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1dc>)
 23fb9d6:	4803      	ldr	r0, [pc, #12]	; (23fb9e4 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x1b8>)
 23fb9d8:	f7ff feca 	bl	23fb770 <_ZNK5spark6Logger5errorEPKcz>
    return 4;
 23fb9dc:	2504      	movs	r5, #4
 23fb9de:	e78e      	b.n	23fb8fe <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0xd2>
 23fb9e0:	023ff745 	.word	0x023ff745
 23fb9e4:	1007ae64 	.word	0x1007ae64
 23fb9e8:	023ff76b 	.word	0x023ff76b
 23fb9ec:	023ff780 	.word	0x023ff780
 23fb9f0:	1007ae44 	.word	0x1007ae44
 23fb9f4:	1007ae04 	.word	0x1007ae04
 23fb9f8:	023ff79c 	.word	0x023ff79c
 23fb9fc:	023ff7b7 	.word	0x023ff7b7
 23fba00:	023ff7d1 	.word	0x023ff7d1
 23fba04:	023ff7f7 	.word	0x023ff7f7
 23fba08:	023ff806 	.word	0x023ff806
  Serial1.flush();
 23fba0c:	f003 fb3a 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fba10:	6803      	ldr	r3, [r0, #0]
 23fba12:	69db      	ldr	r3, [r3, #28]
 23fba14:	4798      	blx	r3
  Log.info("Setting programming parameters");
 23fba16:	4985      	ldr	r1, [pc, #532]	; (23fbc2c <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x400>)
 23fba18:	4885      	ldr	r0, [pc, #532]	; (23fbc30 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x404>)
 23fba1a:	f7ff feb7 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
  Serial1.write((byte)0x42);  //Cmnd_STK_SET_DEVICE
 23fba1e:	f003 fb31 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fba22:	6803      	ldr	r3, [r0, #0]
 23fba24:	2142      	movs	r1, #66	; 0x42
 23fba26:	689b      	ldr	r3, [r3, #8]
 23fba28:	4798      	blx	r3
  Serial1.write((byte)0x86);  //devicecode      ->  Target device identifier. 0x86 for ATMega328P
 23fba2a:	f003 fb2b 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fba2e:	6803      	ldr	r3, [r0, #0]
 23fba30:	2186      	movs	r1, #134	; 0x86
 23fba32:	689b      	ldr	r3, [r3, #8]
 23fba34:	4798      	blx	r3
  Serial1.write((byte)0x00);  //revision        ->  Unused
 23fba36:	f003 fb25 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fba3a:	6803      	ldr	r3, [r0, #0]
 23fba3c:	2100      	movs	r1, #0
 23fba3e:	689b      	ldr	r3, [r3, #8]
 23fba40:	4798      	blx	r3
  Serial1.write((byte)0x00);  //progtype        ->  Programming modes. 0x00 for HV/PP AND Serial, 0x01 for only HV/PP
 23fba42:	f003 fb1f 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fba46:	6803      	ldr	r3, [r0, #0]
 23fba48:	2100      	movs	r1, #0
 23fba4a:	689b      	ldr	r3, [r3, #8]
 23fba4c:	4798      	blx	r3
  Serial1.write((byte)0x01);  //parmode         ->  Parallel mode. 0x00 for pseudo-parallel and 0x01 for full-parallel
 23fba4e:	f003 fb19 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fba52:	6803      	ldr	r3, [r0, #0]
 23fba54:	2101      	movs	r1, #1
 23fba56:	689b      	ldr	r3, [r3, #8]
 23fba58:	4798      	blx	r3
  Serial1.write((byte)0x01);  //polling         ->  Use of polling in SPI access. 0x00 for no polling, 0x01 for polling
 23fba5a:	f003 fb13 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fba5e:	6803      	ldr	r3, [r0, #0]
 23fba60:	2101      	movs	r1, #1
 23fba62:	689b      	ldr	r3, [r3, #8]
 23fba64:	4798      	blx	r3
  Serial1.write((byte)0x01);  //selftimed       ->  Programming instructions are self timed. 0x00 for No, 0x01 for Yes
 23fba66:	f003 fb0d 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fba6a:	6803      	ldr	r3, [r0, #0]
 23fba6c:	2101      	movs	r1, #1
 23fba6e:	689b      	ldr	r3, [r3, #8]
 23fba70:	4798      	blx	r3
  Serial1.write((byte)0x01);  //lockbytes       ->  Number of lockbytes in the device
 23fba72:	f003 fb07 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fba76:	6803      	ldr	r3, [r0, #0]
 23fba78:	2101      	movs	r1, #1
 23fba7a:	689b      	ldr	r3, [r3, #8]
 23fba7c:	4798      	blx	r3
  Serial1.write((byte)0x03);  //fusebytes       ->  Number of fusebytes in the device
 23fba7e:	f003 fb01 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fba82:	6803      	ldr	r3, [r0, #0]
 23fba84:	2103      	movs	r1, #3
 23fba86:	689b      	ldr	r3, [r3, #8]
 23fba88:	4798      	blx	r3
  Serial1.write((byte)0xff);  //flashpollval1   ->  Flash polling value, as the device datasheet indicates
 23fba8a:	f003 fafb 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fba8e:	6803      	ldr	r3, [r0, #0]
 23fba90:	21ff      	movs	r1, #255	; 0xff
 23fba92:	689b      	ldr	r3, [r3, #8]
 23fba94:	4798      	blx	r3
  Serial1.write((byte)0xff);  //flashpollval2   ->  Flash polling value, as the device datasheet indicates
 23fba96:	f003 faf5 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fba9a:	6803      	ldr	r3, [r0, #0]
 23fba9c:	21ff      	movs	r1, #255	; 0xff
 23fba9e:	689b      	ldr	r3, [r3, #8]
 23fbaa0:	4798      	blx	r3
  Serial1.write((byte)0xff);  //eeprompollval1  ->  EEprom polling value 1, as the device datasheet indicates
 23fbaa2:	f003 faef 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbaa6:	6803      	ldr	r3, [r0, #0]
 23fbaa8:	21ff      	movs	r1, #255	; 0xff
 23fbaaa:	689b      	ldr	r3, [r3, #8]
 23fbaac:	4798      	blx	r3
  Serial1.write((byte)0xff);  //eeprompollval2  ->  EEprom polling value 2, as the device datasheet indicates
 23fbaae:	f003 fae9 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbab2:	6803      	ldr	r3, [r0, #0]
 23fbab4:	21ff      	movs	r1, #255	; 0xff
 23fbab6:	689b      	ldr	r3, [r3, #8]
 23fbab8:	4798      	blx	r3
  Serial1.write((byte)0x00);  //pagesizehigh    ->  Page size in bytes for pagemode parts, high part of the 16 bits value
 23fbaba:	f003 fae3 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbabe:	6803      	ldr	r3, [r0, #0]
 23fbac0:	2100      	movs	r1, #0
 23fbac2:	689b      	ldr	r3, [r3, #8]
 23fbac4:	4798      	blx	r3
  Serial1.write((byte)0x80);  //pagesizelow     ->  Page size in bytes for pagemode parts, low part of the 16 bits value
 23fbac6:	f003 fadd 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbaca:	6803      	ldr	r3, [r0, #0]
 23fbacc:	2180      	movs	r1, #128	; 0x80
 23fbace:	689b      	ldr	r3, [r3, #8]
 23fbad0:	4798      	blx	r3
  Serial1.write((byte)0x04);  //eepromsizehigh  ->  EEPROM size in bytes, high part of the 16 bit value
 23fbad2:	f003 fad7 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbad6:	6803      	ldr	r3, [r0, #0]
 23fbad8:	2104      	movs	r1, #4
 23fbada:	689b      	ldr	r3, [r3, #8]
 23fbadc:	4798      	blx	r3
  Serial1.write((byte)0x00);  //eepromsizelow   ->  EEPROM size in bytes, low part of the 16 bit value
 23fbade:	f003 fad1 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbae2:	6803      	ldr	r3, [r0, #0]
 23fbae4:	2100      	movs	r1, #0
 23fbae6:	689b      	ldr	r3, [r3, #8]
 23fbae8:	4798      	blx	r3
  Serial1.write((byte)0x00);  //flashsize4      ->  FLASH size in bytes, byte 4 of the 32 bit value
 23fbaea:	f003 facb 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbaee:	6803      	ldr	r3, [r0, #0]
 23fbaf0:	2100      	movs	r1, #0
 23fbaf2:	689b      	ldr	r3, [r3, #8]
 23fbaf4:	4798      	blx	r3
  Serial1.write((byte)0x00);  //flashsize3      ->  FLASH size in bytes, byte 3 of the 32 bit value
 23fbaf6:	f003 fac5 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbafa:	6803      	ldr	r3, [r0, #0]
 23fbafc:	2100      	movs	r1, #0
 23fbafe:	689b      	ldr	r3, [r3, #8]
 23fbb00:	4798      	blx	r3
  Serial1.write((byte)0x80);  //flashsize2      ->  FLASH size in bytes, byte 2 of the 32 bit value
 23fbb02:	f003 fabf 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbb06:	6803      	ldr	r3, [r0, #0]
 23fbb08:	2180      	movs	r1, #128	; 0x80
 23fbb0a:	689b      	ldr	r3, [r3, #8]
 23fbb0c:	4798      	blx	r3
  Serial1.write((byte)0x00);  //flashsize1      ->  FLASH size in bytes, byte 1 of the 32 bit value
 23fbb0e:	f003 fab9 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbb12:	6803      	ldr	r3, [r0, #0]
 23fbb14:	2100      	movs	r1, #0
 23fbb16:	689b      	ldr	r3, [r3, #8]
 23fbb18:	4798      	blx	r3
  Serial1.write((byte)0x20);  //Sync_CRC_EOP
 23fbb1a:	f003 fab3 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbb1e:	6803      	ldr	r3, [r0, #0]
 23fbb20:	2120      	movs	r1, #32
 23fbb22:	689b      	ldr	r3, [r3, #8]
 23fbb24:	4798      	blx	r3
  delay(defaultDelay);
 23fbb26:	2032      	movs	r0, #50	; 0x32
 23fbb28:	f000 ff86 	bl	23fca38 <delay>
  readAssetBytes();
 23fbb2c:	f7ff fe4a 	bl	23fb7c4 <_Z14readAssetBytesv>
  if (readBuffLength < 2 || readBuff[readBuffLength - 2] != (byte)0x14 || readBuff[readBuffLength - 1] != (byte)0x10)
 23fbb30:	6833      	ldr	r3, [r6, #0]
 23fbb32:	2b01      	cmp	r3, #1
 23fbb34:	dc06      	bgt.n	23fbb44 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x318>
      releaseAssetPorts();
 23fbb36:	f7ff fe65 	bl	23fb804 <_Z17releaseAssetPortsv>
      Log.error("Error code 5: Failure to write or set parameters/data!");
 23fbb3a:	493e      	ldr	r1, [pc, #248]	; (23fbc34 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x408>)
      Log.error("Error code 6: Failure to write block!");
 23fbb3c:	483c      	ldr	r0, [pc, #240]	; (23fbc30 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x404>)
 23fbb3e:	f7ff fe17 	bl	23fb770 <_ZNK5spark6Logger5errorEPKcz>
      return 5;
 23fbb42:	e071      	b.n	23fbc28 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x3fc>
  if (readBuffLength < 2 || readBuff[readBuffLength - 2] != (byte)0x14 || readBuff[readBuffLength - 1] != (byte)0x10)
 23fbb44:	1e9a      	subs	r2, r3, #2
 23fbb46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 23fbb4a:	2a14      	cmp	r2, #20
 23fbb4c:	d1f3      	bne.n	23fbb36 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x30a>
 23fbb4e:	3b01      	subs	r3, #1
 23fbb50:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 23fbb54:	2b10      	cmp	r3, #16
 23fbb56:	d1ee      	bne.n	23fbb36 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x30a>
  Log.info("Setting extended programming parameters");
 23fbb58:	4937      	ldr	r1, [pc, #220]	; (23fbc38 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x40c>)
 23fbb5a:	4835      	ldr	r0, [pc, #212]	; (23fbc30 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x404>)
 23fbb5c:	f7ff fe16 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
  Serial1.write((byte)0x45);  //Cmnd_STK_SET_DEVICE_EXT
 23fbb60:	f003 fa90 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbb64:	6803      	ldr	r3, [r0, #0]
 23fbb66:	2145      	movs	r1, #69	; 0x45
 23fbb68:	689b      	ldr	r3, [r3, #8]
 23fbb6a:	4798      	blx	r3
  Serial1.write((byte)0x05);  //commandsize     ->  How many bytes this command will contain
 23fbb6c:	f003 fa8a 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbb70:	6803      	ldr	r3, [r0, #0]
 23fbb72:	2105      	movs	r1, #5
 23fbb74:	689b      	ldr	r3, [r3, #8]
 23fbb76:	4798      	blx	r3
  Serial1.write((byte)0x04);  //eeprompagesize  ->  EEPROM page size in bytes
 23fbb78:	f003 fa84 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbb7c:	6803      	ldr	r3, [r0, #0]
 23fbb7e:	2104      	movs	r1, #4
 23fbb80:	689b      	ldr	r3, [r3, #8]
 23fbb82:	4798      	blx	r3
  Serial1.write((byte)0xd7);  //signalpagel     ->  To wich port the PAGEL signal should be mapped
 23fbb84:	f003 fa7e 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbb88:	6803      	ldr	r3, [r0, #0]
 23fbb8a:	21d7      	movs	r1, #215	; 0xd7
 23fbb8c:	689b      	ldr	r3, [r3, #8]
 23fbb8e:	4798      	blx	r3
  Serial1.write((byte)0xc2);  //signalbs2       ->  To wich port the BS2 signal should be maped
 23fbb90:	f003 fa78 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbb94:	6803      	ldr	r3, [r0, #0]
 23fbb96:	21c2      	movs	r1, #194	; 0xc2
 23fbb98:	689b      	ldr	r3, [r3, #8]
 23fbb9a:	4798      	blx	r3
  Serial1.write((byte)0x00);  //resetdisable    ->  Defines if the device has RSTDSBL fuse. 0x00 for no, 0x01 for yes
 23fbb9c:	f003 fa72 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbba0:	6803      	ldr	r3, [r0, #0]
 23fbba2:	2100      	movs	r1, #0
 23fbba4:	689b      	ldr	r3, [r3, #8]
 23fbba6:	4798      	blx	r3
  Serial1.write((byte)0x20);  //Sync_CRC_EOP
 23fbba8:	f003 fa6c 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbbac:	6803      	ldr	r3, [r0, #0]
 23fbbae:	2120      	movs	r1, #32
 23fbbb0:	689b      	ldr	r3, [r3, #8]
 23fbbb2:	4798      	blx	r3
  delay(defaultDelay);
 23fbbb4:	2032      	movs	r0, #50	; 0x32
 23fbbb6:	f000 ff3f 	bl	23fca38 <delay>
  readAssetBytes();
 23fbbba:	f7ff fe03 	bl	23fb7c4 <_Z14readAssetBytesv>
  if (readBuffLength < 2 || readBuff[readBuffLength - 2] != (byte)0x14 || readBuff[readBuffLength - 1] != (byte)0x10)
 23fbbbe:	6833      	ldr	r3, [r6, #0]
 23fbbc0:	2b01      	cmp	r3, #1
 23fbbc2:	ddb8      	ble.n	23fbb36 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x30a>
 23fbbc4:	1e9a      	subs	r2, r3, #2
 23fbbc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 23fbbca:	2a14      	cmp	r2, #20
 23fbbcc:	d1b3      	bne.n	23fbb36 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x30a>
 23fbbce:	3b01      	subs	r3, #1
 23fbbd0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 23fbbd4:	2b10      	cmp	r3, #16
 23fbbd6:	d1ae      	bne.n	23fbb36 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x30a>
  Log.info("Entering programming mode");
 23fbbd8:	4918      	ldr	r1, [pc, #96]	; (23fbc3c <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x410>)
 23fbbda:	4815      	ldr	r0, [pc, #84]	; (23fbc30 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x404>)
 23fbbdc:	f7ff fdd6 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
  Serial1.write((byte)0x50);  //Cmnd_STK_ENTER PROGMODE
 23fbbe0:	f003 fa50 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbbe4:	6803      	ldr	r3, [r0, #0]
 23fbbe6:	2150      	movs	r1, #80	; 0x50
 23fbbe8:	689b      	ldr	r3, [r3, #8]
 23fbbea:	4798      	blx	r3
  Serial1.write((byte)0x20);  //Sync_CRC_EOP
 23fbbec:	f003 fa4a 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbbf0:	6803      	ldr	r3, [r0, #0]
 23fbbf2:	2120      	movs	r1, #32
 23fbbf4:	689b      	ldr	r3, [r3, #8]
 23fbbf6:	4798      	blx	r3
  delay(defaultDelay);
 23fbbf8:	2032      	movs	r0, #50	; 0x32
 23fbbfa:	f000 ff1d 	bl	23fca38 <delay>
  readAssetBytes();
 23fbbfe:	f7ff fde1 	bl	23fb7c4 <_Z14readAssetBytesv>
  if (readBuffLength < 2 || readBuff[readBuffLength - 2] != (byte)0x14 || readBuff[readBuffLength - 1] != (byte)0x10)
 23fbc02:	6833      	ldr	r3, [r6, #0]
 23fbc04:	2b01      	cmp	r3, #1
 23fbc06:	dd09      	ble.n	23fbc1c <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x3f0>
 23fbc08:	1e9a      	subs	r2, r3, #2
 23fbc0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 23fbc0e:	2a14      	cmp	r2, #20
 23fbc10:	d104      	bne.n	23fbc1c <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x3f0>
 23fbc12:	3b01      	subs	r3, #1
 23fbc14:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 23fbc18:	2b10      	cmp	r3, #16
 23fbc1a:	d011      	beq.n	23fbc40 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x414>
    releaseAssetPorts();
 23fbc1c:	f7ff fdf2 	bl	23fb804 <_Z17releaseAssetPortsv>
    Log.info("Error code 5: Failure to write or set parameters/data!");
 23fbc20:	4904      	ldr	r1, [pc, #16]	; (23fbc34 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x408>)
 23fbc22:	4803      	ldr	r0, [pc, #12]	; (23fbc30 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x404>)
 23fbc24:	f7ff fdb2 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
      return 5;
 23fbc28:	2505      	movs	r5, #5
 23fbc2a:	e668      	b.n	23fb8fe <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0xd2>
 23fbc2c:	023ff828 	.word	0x023ff828
 23fbc30:	1007ae64 	.word	0x1007ae64
 23fbc34:	023ff847 	.word	0x023ff847
 23fbc38:	023ff87e 	.word	0x023ff87e
 23fbc3c:	023ff8a6 	.word	0x023ff8a6
  sketchLength=asset.size();                //Gets the total asset size in bytes
 23fbc40:	4638      	mov	r0, r7
 23fbc42:	f000 ff3e 	bl	23fcac2 <_ZNK8particle16ApplicationAsset4sizeEv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 23fbc46:	496b      	ldr	r1, [pc, #428]	; (23fbdf4 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5c8>)
 23fbc48:	9001      	str	r0, [sp, #4]
 23fbc4a:	a806      	add	r0, sp, #24
 23fbc4c:	f002 fd7f 	bl	23fe74e <_ZN6StringC1EPK19__FlashStringHelper>
  Log.info("Asset " + asset.name() + "  Size: %d bytes", sketchLength);
 23fbc50:	4639      	mov	r1, r7
 23fbc52:	a802      	add	r0, sp, #8
 23fbc54:	f000 ff2e 	bl	23fcab4 <_ZNK8particle16ApplicationAsset4nameEv>
 23fbc58:	a902      	add	r1, sp, #8
 23fbc5a:	a806      	add	r0, sp, #24
 23fbc5c:	f002 fdfe 	bl	23fe85c <_ZplRK15StringSumHelperRK6String>
 23fbc60:	4965      	ldr	r1, [pc, #404]	; (23fbdf8 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5cc>)
 23fbc62:	f002 fe07 	bl	23fe874 <_ZplRK15StringSumHelperPKc>
 23fbc66:	9a01      	ldr	r2, [sp, #4]
 23fbc68:	6801      	ldr	r1, [r0, #0]
 23fbc6a:	4864      	ldr	r0, [pc, #400]	; (23fbdfc <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5d0>)
 23fbc6c:	f7ff fd8e 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
 23fbc70:	a802      	add	r0, sp, #8
 23fbc72:	f002 fd21 	bl	23fe6b8 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23fbc76:	a806      	add	r0, sp, #24
 23fbc78:	f002 fd1e 	bl	23fe6b8 <_ZN6StringD1Ev>
  Log.info("Sending binary to target");
 23fbc7c:	4960      	ldr	r1, [pc, #384]	; (23fbe00 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5d4>)
 23fbc7e:	485f      	ldr	r0, [pc, #380]	; (23fbdfc <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5d0>)
 23fbc80:	f7ff fd84 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
  address = 0;                              //Reset the address counter for the target device
 23fbc84:	f04f 0800 	mov.w	r8, #0
    Log.info("Address %d Ok", address);
 23fbc88:	f8df a190 	ldr.w	sl, [pc, #400]	; 23fbe1c <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5f0>
 23fbc8c:	f8df 916c 	ldr.w	r9, [pc, #364]	; 23fbdfc <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5d0>
  while(asset.available())
 23fbc90:	683b      	ldr	r3, [r7, #0]
 23fbc92:	4638      	mov	r0, r7
 23fbc94:	691b      	ldr	r3, [r3, #16]
 23fbc96:	4798      	blx	r3
 23fbc98:	4605      	mov	r5, r0
 23fbc9a:	2800      	cmp	r0, #0
 23fbc9c:	d075      	beq.n	23fbd8a <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x55e>
    buffLength=asset.read((char*) buff,sizeof(buff));   //Reads the next bytes (amount up to the size of the buffer), puts them on the buffer and returns the amount taken. 
 23fbc9e:	683b      	ldr	r3, [r7, #0]
 23fbca0:	2280      	movs	r2, #128	; 0x80
 23fbca2:	6a1b      	ldr	r3, [r3, #32]
 23fbca4:	a906      	add	r1, sp, #24
 23fbca6:	4638      	mov	r0, r7
 23fbca8:	4798      	blx	r3
 23fbcaa:	4605      	mov	r5, r0
    Serial1.write((byte)0x55);  //ENTER_PROGMODE    ->  Starts programming mode (set the address to write)
 23fbcac:	f003 f9ea 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbcb0:	6803      	ldr	r3, [r0, #0]
 23fbcb2:	2155      	movs	r1, #85	; 0x55
 23fbcb4:	689b      	ldr	r3, [r3, #8]
 23fbcb6:	4798      	blx	r3
    Serial1.write(laddress);    //laddress          ->  The low byte of the address to write
 23fbcb8:	f003 f9e4 	bl	23ff084 <_Z22__fetch_global_Serial1v>
  bool breakRx(void);

  inline size_t write(unsigned long n) { return write((uint16_t)n); }
  inline size_t write(long n) { return write((uint16_t)n); }
  inline size_t write(unsigned int n) { return write((uint16_t)n); }
  inline size_t write(int n) { return write((uint16_t)n); }
 23fbcbc:	fa5f f188 	uxtb.w	r1, r8
 23fbcc0:	f002 ff58 	bl	23feb74 <_ZN11USARTSerial5writeEt>
    Serial1.write(haddress);    //haddress          ->  The high byte of the address to write
 23fbcc4:	f003 f9de 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbcc8:	f3c8 210f 	ubfx	r1, r8, #8, #16
 23fbccc:	f002 ff52 	bl	23feb74 <_ZN11USARTSerial5writeEt>
    Serial1.write((byte)0x20);  //Sync_CRC_EOP
 23fbcd0:	f003 f9d8 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbcd4:	6803      	ldr	r3, [r0, #0]
 23fbcd6:	2120      	movs	r1, #32
 23fbcd8:	689b      	ldr	r3, [r3, #8]
 23fbcda:	4798      	blx	r3
    delay(defaultDelay);
 23fbcdc:	2032      	movs	r0, #50	; 0x32
 23fbcde:	f000 feab 	bl	23fca38 <delay>
    readAssetBytes();
 23fbce2:	f7ff fd6f 	bl	23fb7c4 <_Z14readAssetBytesv>
    if (readBuffLength < 2 || readBuff[readBuffLength - 2] != (byte)0x14 || readBuff[readBuffLength - 1] != (byte)0x10)
 23fbce6:	6833      	ldr	r3, [r6, #0]
 23fbce8:	2b01      	cmp	r3, #1
 23fbcea:	f77f af24 	ble.w	23fbb36 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x30a>
 23fbcee:	1e9a      	subs	r2, r3, #2
 23fbcf0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 23fbcf4:	2a14      	cmp	r2, #20
 23fbcf6:	f47f af1e 	bne.w	23fbb36 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x30a>
 23fbcfa:	3b01      	subs	r3, #1
 23fbcfc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 23fbd00:	2b10      	cmp	r3, #16
 23fbd02:	f47f af18 	bne.w	23fbb36 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x30a>
    Serial1.write((byte)0x64);  //PROG_PAGE         ->  Starts writing the block
 23fbd06:	f003 f9bd 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbd0a:	6803      	ldr	r3, [r0, #0]
 23fbd0c:	2164      	movs	r1, #100	; 0x64
 23fbd0e:	689b      	ldr	r3, [r3, #8]
 23fbd10:	4798      	blx	r3
    Serial1.write((byte)0x00);  //bytesHigh         ->  High part of the number of bytes to be sent (always 0 in this case because mas buffer is 128)
 23fbd12:	f003 f9b7 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbd16:	6803      	ldr	r3, [r0, #0]
 23fbd18:	2100      	movs	r1, #0
 23fbd1a:	689b      	ldr	r3, [r3, #8]
 23fbd1c:	4798      	blx	r3
    Serial1.write(buffLength);  //bytesLow          ->  Low part of the number of bytes to be sent. Almost always the buffer will be 128, except the last one sent.
 23fbd1e:	f003 f9b1 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbd22:	b2a9      	uxth	r1, r5
 23fbd24:	f002 ff26 	bl	23feb74 <_ZN11USARTSerial5writeEt>
    Serial1.write((byte)0x46);  //memtype           ->  Memory to be written. "E"(0x45) for eeprom, "F"(0x46) for flash
 23fbd28:	f003 f9ac 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbd2c:	6803      	ldr	r3, [r0, #0]
 23fbd2e:	2146      	movs	r1, #70	; 0x46
 23fbd30:	689b      	ldr	r3, [r3, #8]
 23fbd32:	4798      	blx	r3
    Serial1.write(buff, buffLength);  // Sends the data in the buffer
 23fbd34:	f003 f9a6 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbd38:	6803      	ldr	r3, [r0, #0]
 23fbd3a:	462a      	mov	r2, r5
 23fbd3c:	68db      	ldr	r3, [r3, #12]
 23fbd3e:	a906      	add	r1, sp, #24
 23fbd40:	4798      	blx	r3
    Serial1.write((byte)0x20);  //Sync_CRC_EOP
 23fbd42:	f003 f99f 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbd46:	6803      	ldr	r3, [r0, #0]
 23fbd48:	2120      	movs	r1, #32
 23fbd4a:	689b      	ldr	r3, [r3, #8]
 23fbd4c:	4798      	blx	r3
    delay(defaultDelay);
 23fbd4e:	2032      	movs	r0, #50	; 0x32
 23fbd50:	f000 fe72 	bl	23fca38 <delay>
    readAssetBytes();
 23fbd54:	f7ff fd36 	bl	23fb7c4 <_Z14readAssetBytesv>
    if (readBuffLength < 2 || readBuff[readBuffLength - 2] != (byte)0x14 || readBuff[readBuffLength - 1] != (byte)0x10)
 23fbd58:	6833      	ldr	r3, [r6, #0]
 23fbd5a:	2b01      	cmp	r3, #1
 23fbd5c:	dd09      	ble.n	23fbd72 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x546>
 23fbd5e:	1e9a      	subs	r2, r3, #2
 23fbd60:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 23fbd64:	2a14      	cmp	r2, #20
 23fbd66:	d104      	bne.n	23fbd72 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x546>
 23fbd68:	3b01      	subs	r3, #1
 23fbd6a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 23fbd6e:	2b10      	cmp	r3, #16
 23fbd70:	d003      	beq.n	23fbd7a <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x54e>
      releaseAssetPorts();
 23fbd72:	f7ff fd47 	bl	23fb804 <_Z17releaseAssetPortsv>
      Log.error("Error code 6: Failure to write block!");
 23fbd76:	4923      	ldr	r1, [pc, #140]	; (23fbe04 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5d8>)
 23fbd78:	e6e0      	b.n	23fbb3c <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x310>
    Log.info("Address %d Ok", address);
 23fbd7a:	4642      	mov	r2, r8
 23fbd7c:	4651      	mov	r1, sl
 23fbd7e:	4648      	mov	r0, r9
 23fbd80:	f7ff fd04 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
    address += 64;                              //For the next iteration. Why 64?
 23fbd84:	f108 0840 	add.w	r8, r8, #64	; 0x40
  while(asset.available())
 23fbd88:	e782      	b.n	23fbc90 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x464>
  Log.info("Leaving programming mode");
 23fbd8a:	491f      	ldr	r1, [pc, #124]	; (23fbe08 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5dc>)
 23fbd8c:	481b      	ldr	r0, [pc, #108]	; (23fbdfc <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5d0>)
 23fbd8e:	f7ff fcfd 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
  Serial1.write((byte)0x51);  //LEAVE_PROGMODE    ->  Leave programming mode
 23fbd92:	f003 f977 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbd96:	6803      	ldr	r3, [r0, #0]
 23fbd98:	2151      	movs	r1, #81	; 0x51
 23fbd9a:	689b      	ldr	r3, [r3, #8]
 23fbd9c:	4798      	blx	r3
  Serial1.write((byte)0x20);  //Sync_CRC_EOP
 23fbd9e:	f003 f971 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fbda2:	6803      	ldr	r3, [r0, #0]
 23fbda4:	2120      	movs	r1, #32
 23fbda6:	689b      	ldr	r3, [r3, #8]
 23fbda8:	4798      	blx	r3
  delay(defaultDelay);
 23fbdaa:	2032      	movs	r0, #50	; 0x32
 23fbdac:	f000 fe44 	bl	23fca38 <delay>
  readAssetBytes();
 23fbdb0:	f7ff fd08 	bl	23fb7c4 <_Z14readAssetBytesv>
  if (readBuffLength != 2 || readBuff[0] != 0x14 || readBuff[1] != 0x10)
 23fbdb4:	6833      	ldr	r3, [r6, #0]
 23fbdb6:	2b02      	cmp	r3, #2
 23fbdb8:	d105      	bne.n	23fbdc6 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x59a>
 23fbdba:	6823      	ldr	r3, [r4, #0]
 23fbdbc:	2b14      	cmp	r3, #20
 23fbdbe:	d102      	bne.n	23fbdc6 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x59a>
 23fbdc0:	6863      	ldr	r3, [r4, #4]
 23fbdc2:	2b10      	cmp	r3, #16
 23fbdc4:	d006      	beq.n	23fbdd4 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5a8>
    releaseAssetPorts();
 23fbdc6:	f7ff fd1d 	bl	23fb804 <_Z17releaseAssetPortsv>
    Log.error("Error code 0: Failure leaving programming mode!");
 23fbdca:	4910      	ldr	r1, [pc, #64]	; (23fbe0c <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5e0>)
 23fbdcc:	480b      	ldr	r0, [pc, #44]	; (23fbdfc <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5d0>)
 23fbdce:	f7ff fccf 	bl	23fb770 <_ZNK5spark6Logger5errorEPKcz>
    return 0;
 23fbdd2:	e594      	b.n	23fb8fe <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0xd2>
  Log.info("Releasing target's serial port and reset pin");
 23fbdd4:	490e      	ldr	r1, [pc, #56]	; (23fbe10 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5e4>)
 23fbdd6:	4809      	ldr	r0, [pc, #36]	; (23fbdfc <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5d0>)
 23fbdd8:	f7ff fcd8 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
  releaseAssetPorts();
 23fbddc:	f7ff fd12 	bl	23fb804 <_Z17releaseAssetPortsv>
  Log.info("Arduino successfully updated!");
 23fbde0:	490c      	ldr	r1, [pc, #48]	; (23fbe14 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5e8>)
 23fbde2:	4806      	ldr	r0, [pc, #24]	; (23fbdfc <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5d0>)
 23fbde4:	f7ff fcd2 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
  Log.info("Note: No verification of the uploaded binary was made");
 23fbde8:	490b      	ldr	r1, [pc, #44]	; (23fbe18 <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5ec>)
 23fbdea:	4804      	ldr	r0, [pc, #16]	; (23fbdfc <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0x5d0>)
 23fbdec:	f7ff fcce 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
  return 1;     //Return success code
 23fbdf0:	2501      	movs	r5, #1
 23fbdf2:	e584      	b.n	23fb8fe <_Z16updateArduinoUnoRN8particle16ApplicationAssetE+0xd2>
 23fbdf4:	023ff8c0 	.word	0x023ff8c0
 23fbdf8:	023ff8c7 	.word	0x023ff8c7
 23fbdfc:	1007ae64 	.word	0x1007ae64
 23fbe00:	023ff8d8 	.word	0x023ff8d8
 23fbe04:	023ff8f1 	.word	0x023ff8f1
 23fbe08:	023ff925 	.word	0x023ff925
 23fbe0c:	023ff93e 	.word	0x023ff93e
 23fbe10:	023ff96e 	.word	0x023ff96e
 23fbe14:	023ff99b 	.word	0x023ff99b
 23fbe18:	023ff9b9 	.word	0x023ff9b9
 23fbe1c:	023ff917 	.word	0x023ff917

023fbe20 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbe20:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fbe22:	2614      	movs	r6, #20
 23fbe24:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbe28:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fbe2a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fbe2e:	42ae      	cmp	r6, r5
 23fbe30:	d004      	beq.n	23fbe3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fbe32:	4628      	mov	r0, r5
 23fbe34:	f002 fc40 	bl	23fe6b8 <_ZN6StringD1Ev>
 23fbe38:	3514      	adds	r5, #20
 23fbe3a:	e7f8      	b.n	23fbe2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fbe3c:	6820      	ldr	r0, [r4, #0]
 23fbe3e:	f000 fda7 	bl	23fc990 <free>
    AllocatorT::free(data_);
}
 23fbe42:	4620      	mov	r0, r4
 23fbe44:	bd70      	pop	{r4, r5, r6, pc}

023fbe46 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbe46:	b570      	push	{r4, r5, r6, lr}
 23fbe48:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fbe4a:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fbe4e:	eb05 1683 	add.w	r6, r5, r3, lsl #6
        for (; p != end; ++p) {
 23fbe52:	42ae      	cmp	r6, r5
 23fbe54:	d005      	beq.n	23fbe62 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEED1Ev+0x1c>
            p->~T();
 23fbe56:	682b      	ldr	r3, [r5, #0]
 23fbe58:	4628      	mov	r0, r5
 23fbe5a:	681b      	ldr	r3, [r3, #0]
 23fbe5c:	4798      	blx	r3
        for (; p != end; ++p) {
 23fbe5e:	3540      	adds	r5, #64	; 0x40
 23fbe60:	e7f7      	b.n	23fbe52 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fbe62:	6820      	ldr	r0, [r4, #0]
 23fbe64:	f000 fd94 	bl	23fc990 <free>
}
 23fbe68:	4620      	mov	r0, r4
 23fbe6a:	bd70      	pop	{r4, r5, r6, pc}

023fbe6c <setup>:

void setup()
{
 23fbe6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 23fbe70:	4a36      	ldr	r2, [pc, #216]	; (23fbf4c <setup+0xe0>)
 23fbe72:	b08d      	sub	sp, #52	; 0x34
 23fbe74:	4936      	ldr	r1, [pc, #216]	; (23fbf50 <setup+0xe4>)
 23fbe76:	4837      	ldr	r0, [pc, #220]	; (23fbf54 <setup+0xe8>)
 23fbe78:	f001 f86c 	bl	23fcf54 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.function("triggerOta", raiseTrigger);      //Publish a cloud function to start the target flashing
  Serial.begin(115200);                               //Starts USBserial for debug
 23fbe7c:	f002 fee4 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fbe80:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 23fbe84:	f002 fece 	bl	23fec24 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23fbe88:	2000      	movs	r0, #0
 23fbe8a:	f000 f9c9 	bl	23fc220 <hal_timer_millis>
        while (_while() && !_condition()) {
 23fbe8e:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
 23fbe92:	4604      	mov	r4, r0
 23fbe94:	2000      	movs	r0, #0
 23fbe96:	f000 f9c3 	bl	23fc220 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23fbe9a:	1b00      	subs	r0, r0, r4
 23fbe9c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23fbea0:	42a8      	cmp	r0, r5
 23fbea2:	f171 0300 	sbcs.w	r3, r1, #0
 23fbea6:	d207      	bcs.n	23fbeb8 <setup+0x4c>
  waitFor(Serial.isConnected, 15000);                 //Waits for connection on the serial USB
 23fbea8:	f002 fece 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fbeac:	f002 fec1 	bl	23fec32 <_ZN9USBSerial11isConnectedEv>
 23fbeb0:	b910      	cbnz	r0, 23fbeb8 <setup+0x4c>
            spark_process();
 23fbeb2:	f000 fc9b 	bl	23fc7ec <spark_process>
        while (_while() && !_condition()) {
 23fbeb6:	e7ed      	b.n	23fbe94 <setup+0x28>
 23fbeb8:	f002 fec6 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fbebc:	f002 feb9 	bl	23fec32 <_ZN9USBSerial11isConnectedEv>
  delay(1000);
 23fbec0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fbec4:	f000 fdb8 	bl	23fca38 <delay>
  Log.info("Ready.");
 23fbec8:	4923      	ldr	r1, [pc, #140]	; (23fbf58 <setup+0xec>)
 23fbeca:	4824      	ldr	r0, [pc, #144]	; (23fbf5c <setup+0xf0>)
 23fbecc:	f7ff fc5e 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
	StringSumHelper(const char *p) : String(p) {}
 23fbed0:	4f23      	ldr	r7, [pc, #140]	; (23fbf60 <setup+0xf4>)
  for(auto& asset: System.assetsAvailable())          //Lists the valid assets and their sizes
 23fbed2:	a801      	add	r0, sp, #4
  {
    if (asset.isValid())
    {
      Log.info("Assets available: " + asset.name() + ", " 
 23fbed4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 23fbf64 <setup+0xf8>
       + asset.size() + " bytes");
 23fbed8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 23fbf68 <setup+0xfc>
  for(auto& asset: System.assetsAvailable())          //Lists the valid assets and their sizes
 23fbedc:	f002 fda1 	bl	23fea22 <_ZN11SystemClass15assetsAvailableEv>
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 23fbee0:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
 23fbee4:	eb04 1585 	add.w	r5, r4, r5, lsl #6
 23fbee8:	42ac      	cmp	r4, r5
 23fbeea:	d029      	beq.n	23fbf40 <setup+0xd4>
    if (asset.isValid())
 23fbeec:	4620      	mov	r0, r4
 23fbeee:	f000 fdea 	bl	23fcac6 <_ZNK8particle16ApplicationAsset7isValidEv>
 23fbef2:	b318      	cbz	r0, 23fbf3c <setup+0xd0>
 23fbef4:	4639      	mov	r1, r7
 23fbef6:	a808      	add	r0, sp, #32
 23fbef8:	f002 fc29 	bl	23fe74e <_ZN6StringC1EPK19__FlashStringHelper>
      Log.info("Assets available: " + asset.name() + ", " 
 23fbefc:	4621      	mov	r1, r4
 23fbefe:	a804      	add	r0, sp, #16
 23fbf00:	f000 fdd8 	bl	23fcab4 <_ZNK8particle16ApplicationAsset4nameEv>
 23fbf04:	a904      	add	r1, sp, #16
 23fbf06:	a808      	add	r0, sp, #32
 23fbf08:	f002 fca8 	bl	23fe85c <_ZplRK15StringSumHelperRK6String>
 23fbf0c:	4641      	mov	r1, r8
 23fbf0e:	f002 fcb1 	bl	23fe874 <_ZplRK15StringSumHelperPKc>
 23fbf12:	4606      	mov	r6, r0
       + asset.size() + " bytes");
 23fbf14:	4620      	mov	r0, r4
 23fbf16:	f000 fdd4 	bl	23fcac2 <_ZNK8particle16ApplicationAsset4sizeEv>
 23fbf1a:	4601      	mov	r1, r0
 23fbf1c:	4630      	mov	r0, r6
 23fbf1e:	f002 fcbe 	bl	23fe89e <_ZplRK15StringSumHelperj>
 23fbf22:	4649      	mov	r1, r9
 23fbf24:	f002 fca6 	bl	23fe874 <_ZplRK15StringSumHelperPKc>
      Log.info("Assets available: " + asset.name() + ", " 
 23fbf28:	6801      	ldr	r1, [r0, #0]
 23fbf2a:	480c      	ldr	r0, [pc, #48]	; (23fbf5c <setup+0xf0>)
 23fbf2c:	f7ff fc2e 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
 23fbf30:	a804      	add	r0, sp, #16
 23fbf32:	f002 fbc1 	bl	23fe6b8 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23fbf36:	a808      	add	r0, sp, #32
 23fbf38:	f002 fbbe 	bl	23fe6b8 <_ZN6StringD1Ev>
  for(auto& asset: System.assetsAvailable())          //Lists the valid assets and their sizes
 23fbf3c:	3440      	adds	r4, #64	; 0x40
 23fbf3e:	e7d3      	b.n	23fbee8 <setup+0x7c>
 23fbf40:	a801      	add	r0, sp, #4
 23fbf42:	f7ff ff80 	bl	23fbe46 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEED1Ev>
    }
  }
}
 23fbf46:	b00d      	add	sp, #52	; 0x34
 23fbf48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fbf4c:	023ff9ef 	.word	0x023ff9ef
 23fbf50:	023fb6f5 	.word	0x023fb6f5
 23fbf54:	023fcf29 	.word	0x023fcf29
 23fbf58:	023ff9fa 	.word	0x023ff9fa
 23fbf5c:	1007ae64 	.word	0x1007ae64
 23fbf60:	023ffa01 	.word	0x023ffa01
 23fbf64:	023ffa14 	.word	0x023ffa14
 23fbf68:	023ff8d1 	.word	0x023ff8d1

023fbf6c <loop>:

void loop()
{
 23fbf6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (updateTrigger == 1)                                     //Checks on every loop if the update flag is raised
 23fbf70:	4d20      	ldr	r5, [pc, #128]	; (23fbff4 <loop+0x88>)
{
 23fbf72:	b089      	sub	sp, #36	; 0x24
  if (updateTrigger == 1)                                     //Checks on every loop if the update flag is raised
 23fbf74:	782b      	ldrb	r3, [r5, #0]
 23fbf76:	b383      	cbz	r3, 23fbfda <loop+0x6e>
  {
    Log.info("Update trigger enabled.");
 23fbf78:	491f      	ldr	r1, [pc, #124]	; (23fbff8 <loop+0x8c>)
 23fbf7a:	4820      	ldr	r0, [pc, #128]	; (23fbffc <loop+0x90>)
 23fbf7c:	f7ff fc06 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
    for(auto& asset: System.assetsAvailable())                //For every asset listed
 23fbf80:	a801      	add	r0, sp, #4
 23fbf82:	f002 fd4e 	bl	23fea22 <_ZN11SystemClass15assetsAvailableEv>
 23fbf86:	e9dd 3601 	ldrd	r3, r6, [sp, #4]
 23fbf8a:	4699      	mov	r9, r3
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23fbf8c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 23fc008 <loop+0x9c>
 23fbf90:	eb03 1686 	add.w	r6, r3, r6, lsl #6
 23fbf94:	454e      	cmp	r6, r9
 23fbf96:	464f      	mov	r7, r9
 23fbf98:	d022      	beq.n	23fbfe0 <loop+0x74>
    {
      if ((asset.name() == assetBinName) && asset.isValid())  //Checks if the asset is valid and matches with the name defined
 23fbf9a:	4649      	mov	r1, r9
 23fbf9c:	a804      	add	r0, sp, #16
 23fbf9e:	f000 fd89 	bl	23fcab4 <_ZNK8particle16ApplicationAsset4nameEv>
 23fbfa2:	4641      	mov	r1, r8
 23fbfa4:	a804      	add	r0, sp, #16
 23fbfa6:	f002 fc84 	bl	23fe8b2 <_ZNK6String6equalsEPKc>
 23fbfaa:	b110      	cbz	r0, 23fbfb2 <loop+0x46>
 23fbfac:	4648      	mov	r0, r9
 23fbfae:	f000 fd8a 	bl	23fcac6 <_ZNK8particle16ApplicationAsset7isValidEv>
 23fbfb2:	4604      	mov	r4, r0
 23fbfb4:	a804      	add	r0, sp, #16
 23fbfb6:	f002 fb7f 	bl	23fe6b8 <_ZN6StringD1Ev>
 23fbfba:	f109 0940 	add.w	r9, r9, #64	; 0x40
 23fbfbe:	2c00      	cmp	r4, #0
 23fbfc0:	d0e8      	beq.n	23fbf94 <loop+0x28>
      {
        Log.info("Valid asset found. Flashing.");
 23fbfc2:	490f      	ldr	r1, [pc, #60]	; (23fc000 <loop+0x94>)
 23fbfc4:	480d      	ldr	r0, [pc, #52]	; (23fbffc <loop+0x90>)
 23fbfc6:	f7ff fbe1 	bl	23fb78c <_ZNK5spark6Logger4infoEPKcz>
        updateArduinoUno(asset);                              //Calls the arduino flashing function
 23fbfca:	4638      	mov	r0, r7
 23fbfcc:	f7ff fc2e 	bl	23fb82c <_Z16updateArduinoUnoRN8particle16ApplicationAssetE>
        updateTrigger = 0;                                    //Resets the trigger
 23fbfd0:	2300      	movs	r3, #0
        return;
 23fbfd2:	a801      	add	r0, sp, #4
        updateTrigger = 0;                                    //Resets the trigger
 23fbfd4:	702b      	strb	r3, [r5, #0]
        return;
 23fbfd6:	f7ff ff36 	bl	23fbe46 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEED1Ev>
    updateTrigger = 0;
  }
  
  //Your code

 23fbfda:	b009      	add	sp, #36	; 0x24
 23fbfdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for(auto& asset: System.assetsAvailable())                //For every asset listed
 23fbfe0:	a801      	add	r0, sp, #4
 23fbfe2:	f7ff ff30 	bl	23fbe46 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEED1Ev>
    Log.warn("No valid asset found. Update skipped.");
 23fbfe6:	4907      	ldr	r1, [pc, #28]	; (23fc004 <loop+0x98>)
 23fbfe8:	4804      	ldr	r0, [pc, #16]	; (23fbffc <loop+0x90>)
 23fbfea:	f7ff fbdd 	bl	23fb7a8 <_ZNK5spark6Logger4warnEPKcz>
    updateTrigger = 0;
 23fbfee:	2300      	movs	r3, #0
 23fbff0:	702b      	strb	r3, [r5, #0]
 23fbff2:	e7f2      	b.n	23fbfda <loop+0x6e>
 23fbff4:	1007ae48 	.word	0x1007ae48
 23fbff8:	023ffa17 	.word	0x023ffa17
 23fbffc:	1007ae64 	.word	0x1007ae64
 23fc000:	023ffa39 	.word	0x023ffa39
 23fc004:	023ffa56 	.word	0x023ffa56
 23fc008:	023ffa2f 	.word	0x023ffa2f

023fc00c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fc00c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fc00e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc010:	4604      	mov	r4, r0
 23fc012:	460d      	mov	r5, r1
 23fc014:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fc016:	d916      	bls.n	23fc046 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fc018:	4290      	cmp	r0, r2
 23fc01a:	d215      	bcs.n	23fc048 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fc01c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fc020:	1a75      	subs	r5, r6, r1
 23fc022:	f1a1 0714 	sub.w	r7, r1, #20
 23fc026:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fc028:	42b7      	cmp	r7, r6
 23fc02a:	d01c      	beq.n	23fc066 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fc02c:	b12c      	cbz	r4, 23fc03a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fc02e:	4631      	mov	r1, r6
 23fc030:	4620      	mov	r0, r4
 23fc032:	f002 fbbe 	bl	23fe7b2 <_ZN6StringC1EOS_>
 23fc036:	7c33      	ldrb	r3, [r6, #16]
 23fc038:	7423      	strb	r3, [r4, #16]
 23fc03a:	4630      	mov	r0, r6
 23fc03c:	f002 fb3c 	bl	23fe6b8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fc040:	3e14      	subs	r6, #20
 23fc042:	3c14      	subs	r4, #20
 23fc044:	e7f0      	b.n	23fc028 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fc046:	d00e      	beq.n	23fc066 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fc048:	42b5      	cmp	r5, r6
 23fc04a:	d00c      	beq.n	23fc066 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fc04c:	b12c      	cbz	r4, 23fc05a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fc04e:	4629      	mov	r1, r5
 23fc050:	4620      	mov	r0, r4
 23fc052:	f002 fbae 	bl	23fe7b2 <_ZN6StringC1EOS_>
 23fc056:	7c2b      	ldrb	r3, [r5, #16]
 23fc058:	7423      	strb	r3, [r4, #16]
 23fc05a:	4628      	mov	r0, r5
 23fc05c:	f002 fb2c 	bl	23fe6b8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fc060:	3514      	adds	r5, #20
 23fc062:	3414      	adds	r4, #20
 23fc064:	e7f0      	b.n	23fc048 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fc066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc068 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fc068:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fc06e:	e9c0 3300 	strd	r3, r3, [r0]
 23fc072:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc074:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc076:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc078:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc07a:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc07c:	dd24      	ble.n	23fc0c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fc07e:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fc082:	fb08 f007 	mul.w	r0, r8, r7
 23fc086:	f000 fc75 	bl	23fc974 <malloc>
            if (!d) {
 23fc08a:	4605      	mov	r5, r0
 23fc08c:	b1e0      	cbz	r0, 23fc0c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fc08e:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fc092:	fb08 1202 	mla	r2, r8, r2, r1
 23fc096:	f7ff ffb9 	bl	23fc00c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fc09a:	6820      	ldr	r0, [r4, #0]
 23fc09c:	f000 fc78 	bl	23fc990 <free>
        data_ = d;
 23fc0a0:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fc0a2:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fc0a4:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fc0a8:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fc0ac:	45b8      	cmp	r8, r7
 23fc0ae:	d009      	beq.n	23fc0c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fc0b0:	4639      	mov	r1, r7
 23fc0b2:	4628      	mov	r0, r5
 23fc0b4:	f002 fb97 	bl	23fe7e6 <_ZN6StringC1ERKS_>
 23fc0b8:	7c3b      	ldrb	r3, [r7, #16]
 23fc0ba:	3514      	adds	r5, #20
 23fc0bc:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fc0c0:	3714      	adds	r7, #20
 23fc0c2:	e7f3      	b.n	23fc0ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fc0c4:	6873      	ldr	r3, [r6, #4]
 23fc0c6:	6063      	str	r3, [r4, #4]
}
 23fc0c8:	4620      	mov	r0, r4
 23fc0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023fc0d0 <_GLOBAL__sub_I_readBuff>:
        capacity_(0) {
 23fc0d0:	2300      	movs	r3, #0
 23fc0d2:	b570      	push	{r4, r5, r6, lr}
 23fc0d4:	b08c      	sub	sp, #48	; 0x30
 23fc0d6:	e9cd 3300 	strd	r3, r3, [sp]
 23fc0da:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23fc0dc:	f002 fdb4 	bl	23fec48 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fc0e0:	4c1a      	ldr	r4, [pc, #104]	; (23fc14c <_GLOBAL__sub_I_readBuff+0x7c>)
 23fc0e2:	4605      	mov	r5, r0
 23fc0e4:	4626      	mov	r6, r4
 23fc0e6:	4669      	mov	r1, sp
 23fc0e8:	a803      	add	r0, sp, #12
 23fc0ea:	f7ff ffbd 	bl	23fc068 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23fc0ee:	a903      	add	r1, sp, #12
 23fc0f0:	a806      	add	r0, sp, #24
 23fc0f2:	f7ff ffb9 	bl	23fc068 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fc0f6:	4b16      	ldr	r3, [pc, #88]	; (23fc150 <_GLOBAL__sub_I_readBuff+0x80>)
 23fc0f8:	a906      	add	r1, sp, #24
 23fc0fa:	f846 3b04 	str.w	r3, [r6], #4
 23fc0fe:	a809      	add	r0, sp, #36	; 0x24
 23fc100:	f7ff ffb2 	bl	23fc068 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fc104:	aa09      	add	r2, sp, #36	; 0x24
 23fc106:	211e      	movs	r1, #30
 23fc108:	4630      	mov	r0, r6
 23fc10a:	f001 feb1 	bl	23fde70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fc10e:	a809      	add	r0, sp, #36	; 0x24
 23fc110:	f7ff fe86 	bl	23fbe20 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fc114:	a806      	add	r0, sp, #24
 23fc116:	f7ff fe83 	bl	23fbe20 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc11a:	4b0e      	ldr	r3, [pc, #56]	; (23fc154 <_GLOBAL__sub_I_readBuff+0x84>)
 23fc11c:	a803      	add	r0, sp, #12
 23fc11e:	6023      	str	r3, [r4, #0]
 23fc120:	6225      	str	r5, [r4, #32]
 23fc122:	f7ff fe7d 	bl	23fbe20 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc126:	4b0c      	ldr	r3, [pc, #48]	; (23fc158 <_GLOBAL__sub_I_readBuff+0x88>)
 23fc128:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fc12a:	f002 fd8d 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fc12e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fc132:	f002 fd77 	bl	23fec24 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fc136:	f001 fb7f 	bl	23fd838 <_ZN5spark10LogManager8instanceEv>
 23fc13a:	4621      	mov	r1, r4
 23fc13c:	f001 fd70 	bl	23fdc20 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 23fc140:	4668      	mov	r0, sp
 23fc142:	f7ff fe6d 	bl	23fbe20 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc146:	b00c      	add	sp, #48	; 0x30
 23fc148:	bd70      	pop	{r4, r5, r6, pc}
 23fc14a:	bf00      	nop
 23fc14c:	1007ade0 	.word	0x1007ade0
 23fc150:	023ffa84 	.word	0x023ffa84
 23fc154:	023ffc18 	.word	0x023ffc18
 23fc158:	023ffa9c 	.word	0x023ffa9c

023fc15c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fc15c:	b509      	push	{r0, r3, lr}
 23fc15e:	4804      	ldr	r0, [pc, #16]	; (23fc170 <os_mutex_recursive_create+0x14>)
 23fc160:	6800      	ldr	r0, [r0, #0]
 23fc162:	4b04      	ldr	r3, [pc, #16]	; (23fc174 <os_mutex_recursive_create+0x18>)
 23fc164:	4403      	add	r3, r0
 23fc166:	681b      	ldr	r3, [r3, #0]
 23fc168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc16a:	9302      	str	r3, [sp, #8]
 23fc16c:	bd09      	pop	{r0, r3, pc}
 23fc16e:	0000      	.short	0x0000
 23fc170:	1007ad68 	.word	0x1007ad68
 23fc174:	00000030 	.word	0x00000030

023fc178 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fc178:	b509      	push	{r0, r3, lr}
 23fc17a:	4804      	ldr	r0, [pc, #16]	; (23fc18c <os_mutex_recursive_destroy+0x14>)
 23fc17c:	6800      	ldr	r0, [r0, #0]
 23fc17e:	4b04      	ldr	r3, [pc, #16]	; (23fc190 <os_mutex_recursive_destroy+0x18>)
 23fc180:	4403      	add	r3, r0
 23fc182:	681b      	ldr	r3, [r3, #0]
 23fc184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fc186:	9302      	str	r3, [sp, #8]
 23fc188:	bd09      	pop	{r0, r3, pc}
 23fc18a:	0000      	.short	0x0000
 23fc18c:	1007ad68 	.word	0x1007ad68
 23fc190:	00000030 	.word	0x00000030

023fc194 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fc194:	b509      	push	{r0, r3, lr}
 23fc196:	4804      	ldr	r0, [pc, #16]	; (23fc1a8 <os_mutex_recursive_lock+0x14>)
 23fc198:	6800      	ldr	r0, [r0, #0]
 23fc19a:	4b04      	ldr	r3, [pc, #16]	; (23fc1ac <os_mutex_recursive_lock+0x18>)
 23fc19c:	4403      	add	r3, r0
 23fc19e:	681b      	ldr	r3, [r3, #0]
 23fc1a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fc1a2:	9302      	str	r3, [sp, #8]
 23fc1a4:	bd09      	pop	{r0, r3, pc}
 23fc1a6:	0000      	.short	0x0000
 23fc1a8:	1007ad68 	.word	0x1007ad68
 23fc1ac:	00000030 	.word	0x00000030

023fc1b0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fc1b0:	b509      	push	{r0, r3, lr}
 23fc1b2:	4804      	ldr	r0, [pc, #16]	; (23fc1c4 <os_mutex_recursive_unlock+0x14>)
 23fc1b4:	6800      	ldr	r0, [r0, #0]
 23fc1b6:	4b04      	ldr	r3, [pc, #16]	; (23fc1c8 <os_mutex_recursive_unlock+0x18>)
 23fc1b8:	4403      	add	r3, r0
 23fc1ba:	681b      	ldr	r3, [r3, #0]
 23fc1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc1be:	9302      	str	r3, [sp, #8]
 23fc1c0:	bd09      	pop	{r0, r3, pc}
 23fc1c2:	0000      	.short	0x0000
 23fc1c4:	1007ad68 	.word	0x1007ad68
 23fc1c8:	00000030 	.word	0x00000030

023fc1cc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fc1cc:	b509      	push	{r0, r3, lr}
 23fc1ce:	4804      	ldr	r0, [pc, #16]	; (23fc1e0 <HAL_RNG_GetRandomNumber+0x14>)
 23fc1d0:	6800      	ldr	r0, [r0, #0]
 23fc1d2:	4b04      	ldr	r3, [pc, #16]	; (23fc1e4 <HAL_RNG_GetRandomNumber+0x18>)
 23fc1d4:	4403      	add	r3, r0
 23fc1d6:	681b      	ldr	r3, [r3, #0]
 23fc1d8:	685b      	ldr	r3, [r3, #4]
 23fc1da:	9302      	str	r3, [sp, #8]
 23fc1dc:	bd09      	pop	{r0, r3, pc}
 23fc1de:	0000      	.short	0x0000
 23fc1e0:	1007ad68 	.word	0x1007ad68
 23fc1e4:	00000000 	.word	0x00000000

023fc1e8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fc1e8:	b509      	push	{r0, r3, lr}
 23fc1ea:	4804      	ldr	r0, [pc, #16]	; (23fc1fc <HAL_Delay_Microseconds+0x14>)
 23fc1ec:	6800      	ldr	r0, [r0, #0]
 23fc1ee:	4b04      	ldr	r3, [pc, #16]	; (23fc200 <HAL_Delay_Microseconds+0x18>)
 23fc1f0:	4403      	add	r3, r0
 23fc1f2:	681b      	ldr	r3, [r3, #0]
 23fc1f4:	68db      	ldr	r3, [r3, #12]
 23fc1f6:	9302      	str	r3, [sp, #8]
 23fc1f8:	bd09      	pop	{r0, r3, pc}
 23fc1fa:	0000      	.short	0x0000
 23fc1fc:	1007ad68 	.word	0x1007ad68
 23fc200:	00000000 	.word	0x00000000

023fc204 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fc204:	b509      	push	{r0, r3, lr}
 23fc206:	4804      	ldr	r0, [pc, #16]	; (23fc218 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fc208:	6800      	ldr	r0, [r0, #0]
 23fc20a:	4b04      	ldr	r3, [pc, #16]	; (23fc21c <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fc20c:	4403      	add	r3, r0
 23fc20e:	681b      	ldr	r3, [r3, #0]
 23fc210:	695b      	ldr	r3, [r3, #20]
 23fc212:	9302      	str	r3, [sp, #8]
 23fc214:	bd09      	pop	{r0, r3, pc}
 23fc216:	0000      	.short	0x0000
 23fc218:	1007ad68 	.word	0x1007ad68
 23fc21c:	00000000 	.word	0x00000000

023fc220 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23fc220:	b509      	push	{r0, r3, lr}
 23fc222:	4804      	ldr	r0, [pc, #16]	; (23fc234 <hal_timer_millis+0x14>)
 23fc224:	6800      	ldr	r0, [r0, #0]
 23fc226:	4b04      	ldr	r3, [pc, #16]	; (23fc238 <hal_timer_millis+0x18>)
 23fc228:	4403      	add	r3, r0
 23fc22a:	681b      	ldr	r3, [r3, #0]
 23fc22c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23fc22e:	9302      	str	r3, [sp, #8]
 23fc230:	bd09      	pop	{r0, r3, pc}
 23fc232:	0000      	.short	0x0000
 23fc234:	1007ad68 	.word	0x1007ad68
 23fc238:	00000000 	.word	0x00000000

023fc23c <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fc23c:	b509      	push	{r0, r3, lr}
 23fc23e:	4804      	ldr	r0, [pc, #16]	; (23fc250 <hal_gpio_mode+0x14>)
 23fc240:	6800      	ldr	r0, [r0, #0]
 23fc242:	4b04      	ldr	r3, [pc, #16]	; (23fc254 <hal_gpio_mode+0x18>)
 23fc244:	4403      	add	r3, r0
 23fc246:	681b      	ldr	r3, [r3, #0]
 23fc248:	689b      	ldr	r3, [r3, #8]
 23fc24a:	9302      	str	r3, [sp, #8]
 23fc24c:	bd09      	pop	{r0, r3, pc}
 23fc24e:	0000      	.short	0x0000
 23fc250:	1007ad68 	.word	0x1007ad68
 23fc254:	00000014 	.word	0x00000014

023fc258 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fc258:	b509      	push	{r0, r3, lr}
 23fc25a:	4804      	ldr	r0, [pc, #16]	; (23fc26c <hal_gpio_get_mode+0x14>)
 23fc25c:	6800      	ldr	r0, [r0, #0]
 23fc25e:	4b04      	ldr	r3, [pc, #16]	; (23fc270 <hal_gpio_get_mode+0x18>)
 23fc260:	4403      	add	r3, r0
 23fc262:	681b      	ldr	r3, [r3, #0]
 23fc264:	68db      	ldr	r3, [r3, #12]
 23fc266:	9302      	str	r3, [sp, #8]
 23fc268:	bd09      	pop	{r0, r3, pc}
 23fc26a:	0000      	.short	0x0000
 23fc26c:	1007ad68 	.word	0x1007ad68
 23fc270:	00000014 	.word	0x00000014

023fc274 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fc274:	b509      	push	{r0, r3, lr}
 23fc276:	4804      	ldr	r0, [pc, #16]	; (23fc288 <hal_gpio_write+0x14>)
 23fc278:	6800      	ldr	r0, [r0, #0]
 23fc27a:	4b04      	ldr	r3, [pc, #16]	; (23fc28c <hal_gpio_write+0x18>)
 23fc27c:	4403      	add	r3, r0
 23fc27e:	681b      	ldr	r3, [r3, #0]
 23fc280:	691b      	ldr	r3, [r3, #16]
 23fc282:	9302      	str	r3, [sp, #8]
 23fc284:	bd09      	pop	{r0, r3, pc}
 23fc286:	0000      	.short	0x0000
 23fc288:	1007ad68 	.word	0x1007ad68
 23fc28c:	00000014 	.word	0x00000014

023fc290 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fc290:	b509      	push	{r0, r3, lr}
 23fc292:	4804      	ldr	r0, [pc, #16]	; (23fc2a4 <hal_i2c_write+0x14>)
 23fc294:	6800      	ldr	r0, [r0, #0]
 23fc296:	4b04      	ldr	r3, [pc, #16]	; (23fc2a8 <hal_i2c_write+0x18>)
 23fc298:	4403      	add	r3, r0
 23fc29a:	681b      	ldr	r3, [r3, #0]
 23fc29c:	6a1b      	ldr	r3, [r3, #32]
 23fc29e:	9302      	str	r3, [sp, #8]
 23fc2a0:	bd09      	pop	{r0, r3, pc}
 23fc2a2:	0000      	.short	0x0000
 23fc2a4:	1007ad68 	.word	0x1007ad68
 23fc2a8:	00000010 	.word	0x00000010

023fc2ac <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fc2ac:	b509      	push	{r0, r3, lr}
 23fc2ae:	4804      	ldr	r0, [pc, #16]	; (23fc2c0 <hal_i2c_available+0x14>)
 23fc2b0:	6800      	ldr	r0, [r0, #0]
 23fc2b2:	4b04      	ldr	r3, [pc, #16]	; (23fc2c4 <hal_i2c_available+0x18>)
 23fc2b4:	4403      	add	r3, r0
 23fc2b6:	681b      	ldr	r3, [r3, #0]
 23fc2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc2ba:	9302      	str	r3, [sp, #8]
 23fc2bc:	bd09      	pop	{r0, r3, pc}
 23fc2be:	0000      	.short	0x0000
 23fc2c0:	1007ad68 	.word	0x1007ad68
 23fc2c4:	00000010 	.word	0x00000010

023fc2c8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fc2c8:	b509      	push	{r0, r3, lr}
 23fc2ca:	4804      	ldr	r0, [pc, #16]	; (23fc2dc <hal_i2c_read+0x14>)
 23fc2cc:	6800      	ldr	r0, [r0, #0]
 23fc2ce:	4b04      	ldr	r3, [pc, #16]	; (23fc2e0 <hal_i2c_read+0x18>)
 23fc2d0:	4403      	add	r3, r0
 23fc2d2:	681b      	ldr	r3, [r3, #0]
 23fc2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc2d6:	9302      	str	r3, [sp, #8]
 23fc2d8:	bd09      	pop	{r0, r3, pc}
 23fc2da:	0000      	.short	0x0000
 23fc2dc:	1007ad68 	.word	0x1007ad68
 23fc2e0:	00000010 	.word	0x00000010

023fc2e4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fc2e4:	b509      	push	{r0, r3, lr}
 23fc2e6:	4804      	ldr	r0, [pc, #16]	; (23fc2f8 <hal_i2c_peek+0x14>)
 23fc2e8:	6800      	ldr	r0, [r0, #0]
 23fc2ea:	4b04      	ldr	r3, [pc, #16]	; (23fc2fc <hal_i2c_peek+0x18>)
 23fc2ec:	4403      	add	r3, r0
 23fc2ee:	681b      	ldr	r3, [r3, #0]
 23fc2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc2f2:	9302      	str	r3, [sp, #8]
 23fc2f4:	bd09      	pop	{r0, r3, pc}
 23fc2f6:	0000      	.short	0x0000
 23fc2f8:	1007ad68 	.word	0x1007ad68
 23fc2fc:	00000010 	.word	0x00000010

023fc300 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fc300:	b509      	push	{r0, r3, lr}
 23fc302:	4804      	ldr	r0, [pc, #16]	; (23fc314 <hal_i2c_flush+0x14>)
 23fc304:	6800      	ldr	r0, [r0, #0]
 23fc306:	4b04      	ldr	r3, [pc, #16]	; (23fc318 <hal_i2c_flush+0x18>)
 23fc308:	4403      	add	r3, r0
 23fc30a:	681b      	ldr	r3, [r3, #0]
 23fc30c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc30e:	9302      	str	r3, [sp, #8]
 23fc310:	bd09      	pop	{r0, r3, pc}
 23fc312:	0000      	.short	0x0000
 23fc314:	1007ad68 	.word	0x1007ad68
 23fc318:	00000010 	.word	0x00000010

023fc31c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fc31c:	b509      	push	{r0, r3, lr}
 23fc31e:	4804      	ldr	r0, [pc, #16]	; (23fc330 <hal_i2c_is_enabled+0x14>)
 23fc320:	6800      	ldr	r0, [r0, #0]
 23fc322:	4b04      	ldr	r3, [pc, #16]	; (23fc334 <hal_i2c_is_enabled+0x18>)
 23fc324:	4403      	add	r3, r0
 23fc326:	681b      	ldr	r3, [r3, #0]
 23fc328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc32a:	9302      	str	r3, [sp, #8]
 23fc32c:	bd09      	pop	{r0, r3, pc}
 23fc32e:	0000      	.short	0x0000
 23fc330:	1007ad68 	.word	0x1007ad68
 23fc334:	00000010 	.word	0x00000010

023fc338 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fc338:	b509      	push	{r0, r3, lr}
 23fc33a:	4804      	ldr	r0, [pc, #16]	; (23fc34c <hal_i2c_init+0x14>)
 23fc33c:	6800      	ldr	r0, [r0, #0]
 23fc33e:	4b04      	ldr	r3, [pc, #16]	; (23fc350 <hal_i2c_init+0x18>)
 23fc340:	4403      	add	r3, r0
 23fc342:	681b      	ldr	r3, [r3, #0]
 23fc344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc346:	9302      	str	r3, [sp, #8]
 23fc348:	bd09      	pop	{r0, r3, pc}
 23fc34a:	0000      	.short	0x0000
 23fc34c:	1007ad68 	.word	0x1007ad68
 23fc350:	00000010 	.word	0x00000010

023fc354 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fc354:	b509      	push	{r0, r3, lr}
 23fc356:	4804      	ldr	r0, [pc, #16]	; (23fc368 <inet_inet_ntop+0x14>)
 23fc358:	6800      	ldr	r0, [r0, #0]
 23fc35a:	4b04      	ldr	r3, [pc, #16]	; (23fc36c <inet_inet_ntop+0x18>)
 23fc35c:	4403      	add	r3, r0
 23fc35e:	681b      	ldr	r3, [r3, #0]
 23fc360:	695b      	ldr	r3, [r3, #20]
 23fc362:	9302      	str	r3, [sp, #8]
 23fc364:	bd09      	pop	{r0, r3, pc}
 23fc366:	0000      	.short	0x0000
 23fc368:	1007ad68 	.word	0x1007ad68
 23fc36c:	0000004c 	.word	0x0000004c

023fc370 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fc370:	b509      	push	{r0, r3, lr}
 23fc372:	4804      	ldr	r0, [pc, #16]	; (23fc384 <netdb_freeaddrinfo+0x14>)
 23fc374:	6800      	ldr	r0, [r0, #0]
 23fc376:	4b04      	ldr	r3, [pc, #16]	; (23fc388 <netdb_freeaddrinfo+0x18>)
 23fc378:	4403      	add	r3, r0
 23fc37a:	681b      	ldr	r3, [r3, #0]
 23fc37c:	689b      	ldr	r3, [r3, #8]
 23fc37e:	9302      	str	r3, [sp, #8]
 23fc380:	bd09      	pop	{r0, r3, pc}
 23fc382:	0000      	.short	0x0000
 23fc384:	1007ad68 	.word	0x1007ad68
 23fc388:	00000050 	.word	0x00000050

023fc38c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fc38c:	b509      	push	{r0, r3, lr}
 23fc38e:	4804      	ldr	r0, [pc, #16]	; (23fc3a0 <netdb_getaddrinfo+0x14>)
 23fc390:	6800      	ldr	r0, [r0, #0]
 23fc392:	4b04      	ldr	r3, [pc, #16]	; (23fc3a4 <netdb_getaddrinfo+0x18>)
 23fc394:	4403      	add	r3, r0
 23fc396:	681b      	ldr	r3, [r3, #0]
 23fc398:	68db      	ldr	r3, [r3, #12]
 23fc39a:	9302      	str	r3, [sp, #8]
 23fc39c:	bd09      	pop	{r0, r3, pc}
 23fc39e:	0000      	.short	0x0000
 23fc3a0:	1007ad68 	.word	0x1007ad68
 23fc3a4:	00000050 	.word	0x00000050

023fc3a8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fc3a8:	b509      	push	{r0, r3, lr}
 23fc3aa:	4804      	ldr	r0, [pc, #16]	; (23fc3bc <hal_spi_init+0x14>)
 23fc3ac:	6800      	ldr	r0, [r0, #0]
 23fc3ae:	4b04      	ldr	r3, [pc, #16]	; (23fc3c0 <hal_spi_init+0x18>)
 23fc3b0:	4403      	add	r3, r0
 23fc3b2:	681b      	ldr	r3, [r3, #0]
 23fc3b4:	69db      	ldr	r3, [r3, #28]
 23fc3b6:	9302      	str	r3, [sp, #8]
 23fc3b8:	bd09      	pop	{r0, r3, pc}
 23fc3ba:	0000      	.short	0x0000
 23fc3bc:	1007ad68 	.word	0x1007ad68
 23fc3c0:	00000018 	.word	0x00000018

023fc3c4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fc3c4:	b509      	push	{r0, r3, lr}
 23fc3c6:	4804      	ldr	r0, [pc, #16]	; (23fc3d8 <hal_spi_is_enabled+0x14>)
 23fc3c8:	6800      	ldr	r0, [r0, #0]
 23fc3ca:	4b04      	ldr	r3, [pc, #16]	; (23fc3dc <hal_spi_is_enabled+0x18>)
 23fc3cc:	4403      	add	r3, r0
 23fc3ce:	681b      	ldr	r3, [r3, #0]
 23fc3d0:	6a1b      	ldr	r3, [r3, #32]
 23fc3d2:	9302      	str	r3, [sp, #8]
 23fc3d4:	bd09      	pop	{r0, r3, pc}
 23fc3d6:	0000      	.short	0x0000
 23fc3d8:	1007ad68 	.word	0x1007ad68
 23fc3dc:	00000018 	.word	0x00000018

023fc3e0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fc3e0:	b509      	push	{r0, r3, lr}
 23fc3e2:	4804      	ldr	r0, [pc, #16]	; (23fc3f4 <hal_usart_end+0x14>)
 23fc3e4:	6800      	ldr	r0, [r0, #0]
 23fc3e6:	4b04      	ldr	r3, [pc, #16]	; (23fc3f8 <hal_usart_end+0x18>)
 23fc3e8:	4403      	add	r3, r0
 23fc3ea:	681b      	ldr	r3, [r3, #0]
 23fc3ec:	689b      	ldr	r3, [r3, #8]
 23fc3ee:	9302      	str	r3, [sp, #8]
 23fc3f0:	bd09      	pop	{r0, r3, pc}
 23fc3f2:	0000      	.short	0x0000
 23fc3f4:	1007ad68 	.word	0x1007ad68
 23fc3f8:	00000024 	.word	0x00000024

023fc3fc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fc3fc:	b509      	push	{r0, r3, lr}
 23fc3fe:	4804      	ldr	r0, [pc, #16]	; (23fc410 <hal_usart_write+0x14>)
 23fc400:	6800      	ldr	r0, [r0, #0]
 23fc402:	4b04      	ldr	r3, [pc, #16]	; (23fc414 <hal_usart_write+0x18>)
 23fc404:	4403      	add	r3, r0
 23fc406:	681b      	ldr	r3, [r3, #0]
 23fc408:	68db      	ldr	r3, [r3, #12]
 23fc40a:	9302      	str	r3, [sp, #8]
 23fc40c:	bd09      	pop	{r0, r3, pc}
 23fc40e:	0000      	.short	0x0000
 23fc410:	1007ad68 	.word	0x1007ad68
 23fc414:	00000024 	.word	0x00000024

023fc418 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fc418:	b509      	push	{r0, r3, lr}
 23fc41a:	4804      	ldr	r0, [pc, #16]	; (23fc42c <hal_usart_available+0x14>)
 23fc41c:	6800      	ldr	r0, [r0, #0]
 23fc41e:	4b04      	ldr	r3, [pc, #16]	; (23fc430 <hal_usart_available+0x18>)
 23fc420:	4403      	add	r3, r0
 23fc422:	681b      	ldr	r3, [r3, #0]
 23fc424:	691b      	ldr	r3, [r3, #16]
 23fc426:	9302      	str	r3, [sp, #8]
 23fc428:	bd09      	pop	{r0, r3, pc}
 23fc42a:	0000      	.short	0x0000
 23fc42c:	1007ad68 	.word	0x1007ad68
 23fc430:	00000024 	.word	0x00000024

023fc434 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fc434:	b509      	push	{r0, r3, lr}
 23fc436:	4804      	ldr	r0, [pc, #16]	; (23fc448 <hal_usart_read+0x14>)
 23fc438:	6800      	ldr	r0, [r0, #0]
 23fc43a:	4b04      	ldr	r3, [pc, #16]	; (23fc44c <hal_usart_read+0x18>)
 23fc43c:	4403      	add	r3, r0
 23fc43e:	681b      	ldr	r3, [r3, #0]
 23fc440:	695b      	ldr	r3, [r3, #20]
 23fc442:	9302      	str	r3, [sp, #8]
 23fc444:	bd09      	pop	{r0, r3, pc}
 23fc446:	0000      	.short	0x0000
 23fc448:	1007ad68 	.word	0x1007ad68
 23fc44c:	00000024 	.word	0x00000024

023fc450 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fc450:	b509      	push	{r0, r3, lr}
 23fc452:	4804      	ldr	r0, [pc, #16]	; (23fc464 <hal_usart_peek+0x14>)
 23fc454:	6800      	ldr	r0, [r0, #0]
 23fc456:	4b04      	ldr	r3, [pc, #16]	; (23fc468 <hal_usart_peek+0x18>)
 23fc458:	4403      	add	r3, r0
 23fc45a:	681b      	ldr	r3, [r3, #0]
 23fc45c:	699b      	ldr	r3, [r3, #24]
 23fc45e:	9302      	str	r3, [sp, #8]
 23fc460:	bd09      	pop	{r0, r3, pc}
 23fc462:	0000      	.short	0x0000
 23fc464:	1007ad68 	.word	0x1007ad68
 23fc468:	00000024 	.word	0x00000024

023fc46c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fc46c:	b509      	push	{r0, r3, lr}
 23fc46e:	4804      	ldr	r0, [pc, #16]	; (23fc480 <hal_usart_flush+0x14>)
 23fc470:	6800      	ldr	r0, [r0, #0]
 23fc472:	4b04      	ldr	r3, [pc, #16]	; (23fc484 <hal_usart_flush+0x18>)
 23fc474:	4403      	add	r3, r0
 23fc476:	681b      	ldr	r3, [r3, #0]
 23fc478:	69db      	ldr	r3, [r3, #28]
 23fc47a:	9302      	str	r3, [sp, #8]
 23fc47c:	bd09      	pop	{r0, r3, pc}
 23fc47e:	0000      	.short	0x0000
 23fc480:	1007ad68 	.word	0x1007ad68
 23fc484:	00000024 	.word	0x00000024

023fc488 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fc488:	b509      	push	{r0, r3, lr}
 23fc48a:	4804      	ldr	r0, [pc, #16]	; (23fc49c <hal_usart_is_enabled+0x14>)
 23fc48c:	6800      	ldr	r0, [r0, #0]
 23fc48e:	4b04      	ldr	r3, [pc, #16]	; (23fc4a0 <hal_usart_is_enabled+0x18>)
 23fc490:	4403      	add	r3, r0
 23fc492:	681b      	ldr	r3, [r3, #0]
 23fc494:	6a1b      	ldr	r3, [r3, #32]
 23fc496:	9302      	str	r3, [sp, #8]
 23fc498:	bd09      	pop	{r0, r3, pc}
 23fc49a:	0000      	.short	0x0000
 23fc49c:	1007ad68 	.word	0x1007ad68
 23fc4a0:	00000024 	.word	0x00000024

023fc4a4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fc4a4:	b509      	push	{r0, r3, lr}
 23fc4a6:	4804      	ldr	r0, [pc, #16]	; (23fc4b8 <hal_usart_available_data_for_write+0x14>)
 23fc4a8:	6800      	ldr	r0, [r0, #0]
 23fc4aa:	4b04      	ldr	r3, [pc, #16]	; (23fc4bc <hal_usart_available_data_for_write+0x18>)
 23fc4ac:	4403      	add	r3, r0
 23fc4ae:	681b      	ldr	r3, [r3, #0]
 23fc4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc4b2:	9302      	str	r3, [sp, #8]
 23fc4b4:	bd09      	pop	{r0, r3, pc}
 23fc4b6:	0000      	.short	0x0000
 23fc4b8:	1007ad68 	.word	0x1007ad68
 23fc4bc:	00000024 	.word	0x00000024

023fc4c0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fc4c0:	b509      	push	{r0, r3, lr}
 23fc4c2:	4804      	ldr	r0, [pc, #16]	; (23fc4d4 <hal_usart_begin_config+0x14>)
 23fc4c4:	6800      	ldr	r0, [r0, #0]
 23fc4c6:	4b04      	ldr	r3, [pc, #16]	; (23fc4d8 <hal_usart_begin_config+0x18>)
 23fc4c8:	4403      	add	r3, r0
 23fc4ca:	681b      	ldr	r3, [r3, #0]
 23fc4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc4ce:	9302      	str	r3, [sp, #8]
 23fc4d0:	bd09      	pop	{r0, r3, pc}
 23fc4d2:	0000      	.short	0x0000
 23fc4d4:	1007ad68 	.word	0x1007ad68
 23fc4d8:	00000024 	.word	0x00000024

023fc4dc <hal_usart_write_nine_bits>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
 23fc4dc:	b509      	push	{r0, r3, lr}
 23fc4de:	4804      	ldr	r0, [pc, #16]	; (23fc4f0 <hal_usart_write_nine_bits+0x14>)
 23fc4e0:	6800      	ldr	r0, [r0, #0]
 23fc4e2:	4b04      	ldr	r3, [pc, #16]	; (23fc4f4 <hal_usart_write_nine_bits+0x18>)
 23fc4e4:	4403      	add	r3, r0
 23fc4e6:	681b      	ldr	r3, [r3, #0]
 23fc4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc4ea:	9302      	str	r3, [sp, #8]
 23fc4ec:	bd09      	pop	{r0, r3, pc}
 23fc4ee:	0000      	.short	0x0000
 23fc4f0:	1007ad68 	.word	0x1007ad68
 23fc4f4:	00000024 	.word	0x00000024

023fc4f8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fc4f8:	b509      	push	{r0, r3, lr}
 23fc4fa:	4804      	ldr	r0, [pc, #16]	; (23fc50c <hal_usart_init_ex+0x14>)
 23fc4fc:	6800      	ldr	r0, [r0, #0]
 23fc4fe:	4b04      	ldr	r3, [pc, #16]	; (23fc510 <hal_usart_init_ex+0x18>)
 23fc500:	4403      	add	r3, r0
 23fc502:	681b      	ldr	r3, [r3, #0]
 23fc504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc506:	9302      	str	r3, [sp, #8]
 23fc508:	bd09      	pop	{r0, r3, pc}
 23fc50a:	0000      	.short	0x0000
 23fc50c:	1007ad68 	.word	0x1007ad68
 23fc510:	00000024 	.word	0x00000024

023fc514 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fc514:	b509      	push	{r0, r3, lr}
 23fc516:	4804      	ldr	r0, [pc, #16]	; (23fc528 <HAL_USB_USART_Init+0x14>)
 23fc518:	6800      	ldr	r0, [r0, #0]
 23fc51a:	4b04      	ldr	r3, [pc, #16]	; (23fc52c <HAL_USB_USART_Init+0x18>)
 23fc51c:	4403      	add	r3, r0
 23fc51e:	681b      	ldr	r3, [r3, #0]
 23fc520:	681b      	ldr	r3, [r3, #0]
 23fc522:	9302      	str	r3, [sp, #8]
 23fc524:	bd09      	pop	{r0, r3, pc}
 23fc526:	0000      	.short	0x0000
 23fc528:	1007ad68 	.word	0x1007ad68
 23fc52c:	00000034 	.word	0x00000034

023fc530 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fc530:	b509      	push	{r0, r3, lr}
 23fc532:	4804      	ldr	r0, [pc, #16]	; (23fc544 <HAL_USB_USART_Begin+0x14>)
 23fc534:	6800      	ldr	r0, [r0, #0]
 23fc536:	4b04      	ldr	r3, [pc, #16]	; (23fc548 <HAL_USB_USART_Begin+0x18>)
 23fc538:	4403      	add	r3, r0
 23fc53a:	681b      	ldr	r3, [r3, #0]
 23fc53c:	685b      	ldr	r3, [r3, #4]
 23fc53e:	9302      	str	r3, [sp, #8]
 23fc540:	bd09      	pop	{r0, r3, pc}
 23fc542:	0000      	.short	0x0000
 23fc544:	1007ad68 	.word	0x1007ad68
 23fc548:	00000034 	.word	0x00000034

023fc54c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fc54c:	b509      	push	{r0, r3, lr}
 23fc54e:	4804      	ldr	r0, [pc, #16]	; (23fc560 <HAL_USB_USART_End+0x14>)
 23fc550:	6800      	ldr	r0, [r0, #0]
 23fc552:	4b04      	ldr	r3, [pc, #16]	; (23fc564 <HAL_USB_USART_End+0x18>)
 23fc554:	4403      	add	r3, r0
 23fc556:	681b      	ldr	r3, [r3, #0]
 23fc558:	689b      	ldr	r3, [r3, #8]
 23fc55a:	9302      	str	r3, [sp, #8]
 23fc55c:	bd09      	pop	{r0, r3, pc}
 23fc55e:	0000      	.short	0x0000
 23fc560:	1007ad68 	.word	0x1007ad68
 23fc564:	00000034 	.word	0x00000034

023fc568 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fc568:	b509      	push	{r0, r3, lr}
 23fc56a:	4804      	ldr	r0, [pc, #16]	; (23fc57c <HAL_USB_USART_Available_Data+0x14>)
 23fc56c:	6800      	ldr	r0, [r0, #0]
 23fc56e:	4b04      	ldr	r3, [pc, #16]	; (23fc580 <HAL_USB_USART_Available_Data+0x18>)
 23fc570:	4403      	add	r3, r0
 23fc572:	681b      	ldr	r3, [r3, #0]
 23fc574:	691b      	ldr	r3, [r3, #16]
 23fc576:	9302      	str	r3, [sp, #8]
 23fc578:	bd09      	pop	{r0, r3, pc}
 23fc57a:	0000      	.short	0x0000
 23fc57c:	1007ad68 	.word	0x1007ad68
 23fc580:	00000034 	.word	0x00000034

023fc584 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fc584:	b509      	push	{r0, r3, lr}
 23fc586:	4804      	ldr	r0, [pc, #16]	; (23fc598 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fc588:	6800      	ldr	r0, [r0, #0]
 23fc58a:	4b04      	ldr	r3, [pc, #16]	; (23fc59c <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fc58c:	4403      	add	r3, r0
 23fc58e:	681b      	ldr	r3, [r3, #0]
 23fc590:	695b      	ldr	r3, [r3, #20]
 23fc592:	9302      	str	r3, [sp, #8]
 23fc594:	bd09      	pop	{r0, r3, pc}
 23fc596:	0000      	.short	0x0000
 23fc598:	1007ad68 	.word	0x1007ad68
 23fc59c:	00000034 	.word	0x00000034

023fc5a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fc5a0:	b509      	push	{r0, r3, lr}
 23fc5a2:	4804      	ldr	r0, [pc, #16]	; (23fc5b4 <HAL_USB_USART_Receive_Data+0x14>)
 23fc5a4:	6800      	ldr	r0, [r0, #0]
 23fc5a6:	4b04      	ldr	r3, [pc, #16]	; (23fc5b8 <HAL_USB_USART_Receive_Data+0x18>)
 23fc5a8:	4403      	add	r3, r0
 23fc5aa:	681b      	ldr	r3, [r3, #0]
 23fc5ac:	699b      	ldr	r3, [r3, #24]
 23fc5ae:	9302      	str	r3, [sp, #8]
 23fc5b0:	bd09      	pop	{r0, r3, pc}
 23fc5b2:	0000      	.short	0x0000
 23fc5b4:	1007ad68 	.word	0x1007ad68
 23fc5b8:	00000034 	.word	0x00000034

023fc5bc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fc5bc:	b509      	push	{r0, r3, lr}
 23fc5be:	4804      	ldr	r0, [pc, #16]	; (23fc5d0 <HAL_USB_USART_Send_Data+0x14>)
 23fc5c0:	6800      	ldr	r0, [r0, #0]
 23fc5c2:	4b04      	ldr	r3, [pc, #16]	; (23fc5d4 <HAL_USB_USART_Send_Data+0x18>)
 23fc5c4:	4403      	add	r3, r0
 23fc5c6:	681b      	ldr	r3, [r3, #0]
 23fc5c8:	69db      	ldr	r3, [r3, #28]
 23fc5ca:	9302      	str	r3, [sp, #8]
 23fc5cc:	bd09      	pop	{r0, r3, pc}
 23fc5ce:	0000      	.short	0x0000
 23fc5d0:	1007ad68 	.word	0x1007ad68
 23fc5d4:	00000034 	.word	0x00000034

023fc5d8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fc5d8:	b509      	push	{r0, r3, lr}
 23fc5da:	4804      	ldr	r0, [pc, #16]	; (23fc5ec <HAL_USB_USART_Flush_Data+0x14>)
 23fc5dc:	6800      	ldr	r0, [r0, #0]
 23fc5de:	4b04      	ldr	r3, [pc, #16]	; (23fc5f0 <HAL_USB_USART_Flush_Data+0x18>)
 23fc5e0:	4403      	add	r3, r0
 23fc5e2:	681b      	ldr	r3, [r3, #0]
 23fc5e4:	6a1b      	ldr	r3, [r3, #32]
 23fc5e6:	9302      	str	r3, [sp, #8]
 23fc5e8:	bd09      	pop	{r0, r3, pc}
 23fc5ea:	0000      	.short	0x0000
 23fc5ec:	1007ad68 	.word	0x1007ad68
 23fc5f0:	00000034 	.word	0x00000034

023fc5f4 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23fc5f4:	b509      	push	{r0, r3, lr}
 23fc5f6:	4804      	ldr	r0, [pc, #16]	; (23fc608 <HAL_USB_USART_Is_Connected+0x14>)
 23fc5f8:	6800      	ldr	r0, [r0, #0]
 23fc5fa:	4b04      	ldr	r3, [pc, #16]	; (23fc60c <HAL_USB_USART_Is_Connected+0x18>)
 23fc5fc:	4403      	add	r3, r0
 23fc5fe:	681b      	ldr	r3, [r3, #0]
 23fc600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc602:	9302      	str	r3, [sp, #8]
 23fc604:	bd09      	pop	{r0, r3, pc}
 23fc606:	0000      	.short	0x0000
 23fc608:	1007ad68 	.word	0x1007ad68
 23fc60c:	00000034 	.word	0x00000034

023fc610 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fc610:	b509      	push	{r0, r3, lr}
 23fc612:	4804      	ldr	r0, [pc, #16]	; (23fc624 <panic_+0x14>)
 23fc614:	6800      	ldr	r0, [r0, #0]
 23fc616:	4b04      	ldr	r3, [pc, #16]	; (23fc628 <panic_+0x18>)
 23fc618:	4403      	add	r3, r0
 23fc61a:	681b      	ldr	r3, [r3, #0]
 23fc61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc61e:	9302      	str	r3, [sp, #8]
 23fc620:	bd09      	pop	{r0, r3, pc}
 23fc622:	0000      	.short	0x0000
 23fc624:	1007ad68 	.word	0x1007ad68
 23fc628:	00000048 	.word	0x00000048

023fc62c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fc62c:	b509      	push	{r0, r3, lr}
 23fc62e:	4804      	ldr	r0, [pc, #16]	; (23fc640 <log_message_v+0x14>)
 23fc630:	6800      	ldr	r0, [r0, #0]
 23fc632:	4b04      	ldr	r3, [pc, #16]	; (23fc644 <log_message_v+0x18>)
 23fc634:	4403      	add	r3, r0
 23fc636:	681b      	ldr	r3, [r3, #0]
 23fc638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc63a:	9302      	str	r3, [sp, #8]
 23fc63c:	bd09      	pop	{r0, r3, pc}
 23fc63e:	0000      	.short	0x0000
 23fc640:	1007ad68 	.word	0x1007ad68
 23fc644:	00000048 	.word	0x00000048

023fc648 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fc648:	b509      	push	{r0, r3, lr}
 23fc64a:	4804      	ldr	r0, [pc, #16]	; (23fc65c <log_level_name+0x14>)
 23fc64c:	6800      	ldr	r0, [r0, #0]
 23fc64e:	4b04      	ldr	r3, [pc, #16]	; (23fc660 <log_level_name+0x18>)
 23fc650:	4403      	add	r3, r0
 23fc652:	681b      	ldr	r3, [r3, #0]
 23fc654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fc656:	9302      	str	r3, [sp, #8]
 23fc658:	bd09      	pop	{r0, r3, pc}
 23fc65a:	0000      	.short	0x0000
 23fc65c:	1007ad68 	.word	0x1007ad68
 23fc660:	00000048 	.word	0x00000048

023fc664 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fc664:	b509      	push	{r0, r3, lr}
 23fc666:	4804      	ldr	r0, [pc, #16]	; (23fc678 <log_set_callbacks+0x14>)
 23fc668:	6800      	ldr	r0, [r0, #0]
 23fc66a:	4b04      	ldr	r3, [pc, #16]	; (23fc67c <log_set_callbacks+0x18>)
 23fc66c:	4403      	add	r3, r0
 23fc66e:	681b      	ldr	r3, [r3, #0]
 23fc670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fc672:	9302      	str	r3, [sp, #8]
 23fc674:	bd09      	pop	{r0, r3, pc}
 23fc676:	0000      	.short	0x0000
 23fc678:	1007ad68 	.word	0x1007ad68
 23fc67c:	00000048 	.word	0x00000048

023fc680 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fc680:	b509      	push	{r0, r3, lr}
 23fc682:	4804      	ldr	r0, [pc, #16]	; (23fc694 <set_system_mode+0x14>)
 23fc684:	6800      	ldr	r0, [r0, #0]
 23fc686:	4b04      	ldr	r3, [pc, #16]	; (23fc698 <set_system_mode+0x18>)
 23fc688:	4403      	add	r3, r0
 23fc68a:	681b      	ldr	r3, [r3, #0]
 23fc68c:	685b      	ldr	r3, [r3, #4]
 23fc68e:	9302      	str	r3, [sp, #8]
 23fc690:	bd09      	pop	{r0, r3, pc}
 23fc692:	0000      	.short	0x0000
 23fc694:	1007ad68 	.word	0x1007ad68
 23fc698:	00000008 	.word	0x00000008

023fc69c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fc69c:	b509      	push	{r0, r3, lr}
 23fc69e:	4804      	ldr	r0, [pc, #16]	; (23fc6b0 <system_delay_ms+0x14>)
 23fc6a0:	6800      	ldr	r0, [r0, #0]
 23fc6a2:	4b04      	ldr	r3, [pc, #16]	; (23fc6b4 <system_delay_ms+0x18>)
 23fc6a4:	4403      	add	r3, r0
 23fc6a6:	681b      	ldr	r3, [r3, #0]
 23fc6a8:	695b      	ldr	r3, [r3, #20]
 23fc6aa:	9302      	str	r3, [sp, #8]
 23fc6ac:	bd09      	pop	{r0, r3, pc}
 23fc6ae:	0000      	.short	0x0000
 23fc6b0:	1007ad68 	.word	0x1007ad68
 23fc6b4:	00000008 	.word	0x00000008

023fc6b8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fc6b8:	b509      	push	{r0, r3, lr}
 23fc6ba:	4804      	ldr	r0, [pc, #16]	; (23fc6cc <system_ctrl_set_app_request_handler+0x14>)
 23fc6bc:	6800      	ldr	r0, [r0, #0]
 23fc6be:	4b04      	ldr	r3, [pc, #16]	; (23fc6d0 <system_ctrl_set_app_request_handler+0x18>)
 23fc6c0:	4403      	add	r3, r0
 23fc6c2:	681b      	ldr	r3, [r3, #0]
 23fc6c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fc6c8:	9302      	str	r3, [sp, #8]
 23fc6ca:	bd09      	pop	{r0, r3, pc}
 23fc6cc:	1007ad68 	.word	0x1007ad68
 23fc6d0:	00000008 	.word	0x00000008

023fc6d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fc6d4:	b509      	push	{r0, r3, lr}
 23fc6d6:	4804      	ldr	r0, [pc, #16]	; (23fc6e8 <system_ctrl_set_result+0x14>)
 23fc6d8:	6800      	ldr	r0, [r0, #0]
 23fc6da:	4b04      	ldr	r3, [pc, #16]	; (23fc6ec <system_ctrl_set_result+0x18>)
 23fc6dc:	4403      	add	r3, r0
 23fc6de:	681b      	ldr	r3, [r3, #0]
 23fc6e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fc6e4:	9302      	str	r3, [sp, #8]
 23fc6e6:	bd09      	pop	{r0, r3, pc}
 23fc6e8:	1007ad68 	.word	0x1007ad68
 23fc6ec:	00000008 	.word	0x00000008

023fc6f0 <asset_manager_get_info>:
#endif // DYNALIB_EXPORT

DYNALIB_BEGIN(system_asset_manager)

DYNALIB_FN(0, system_asset_manager, asset_manager_set_notify_hook, int(asset_manager_notify_hook, void*, void*))
DYNALIB_FN(1, system_asset_manager, asset_manager_get_info, int(asset_manager_info*, void*))
 23fc6f0:	b509      	push	{r0, r3, lr}
 23fc6f2:	4804      	ldr	r0, [pc, #16]	; (23fc704 <asset_manager_get_info+0x14>)
 23fc6f4:	6800      	ldr	r0, [r0, #0]
 23fc6f6:	4b04      	ldr	r3, [pc, #16]	; (23fc708 <asset_manager_get_info+0x18>)
 23fc6f8:	4403      	add	r3, r0
 23fc6fa:	681b      	ldr	r3, [r3, #0]
 23fc6fc:	685b      	ldr	r3, [r3, #4]
 23fc6fe:	9302      	str	r3, [sp, #8]
 23fc700:	bd09      	pop	{r0, r3, pc}
 23fc702:	0000      	.short	0x0000
 23fc704:	1007ad68 	.word	0x1007ad68
 23fc708:	00000074 	.word	0x00000074

023fc70c <asset_manager_free_info>:
DYNALIB_FN(2, system_asset_manager, asset_manager_free_info, void(asset_manager_info*, void*))
 23fc70c:	b509      	push	{r0, r3, lr}
 23fc70e:	4804      	ldr	r0, [pc, #16]	; (23fc720 <asset_manager_free_info+0x14>)
 23fc710:	6800      	ldr	r0, [r0, #0]
 23fc712:	4b04      	ldr	r3, [pc, #16]	; (23fc724 <asset_manager_free_info+0x18>)
 23fc714:	4403      	add	r3, r0
 23fc716:	681b      	ldr	r3, [r3, #0]
 23fc718:	689b      	ldr	r3, [r3, #8]
 23fc71a:	9302      	str	r3, [sp, #8]
 23fc71c:	bd09      	pop	{r0, r3, pc}
 23fc71e:	0000      	.short	0x0000
 23fc720:	1007ad68 	.word	0x1007ad68
 23fc724:	00000074 	.word	0x00000074

023fc728 <asset_manager_open>:
DYNALIB_FN(3, system_asset_manager, asset_manager_set_consumer_state, int(asset_manager_consumer_state, void*))
DYNALIB_FN(4, system_asset_manager, asset_manager_open, int(asset_manager_stream**, const asset_manager_asset*, void*))
 23fc728:	b509      	push	{r0, r3, lr}
 23fc72a:	4804      	ldr	r0, [pc, #16]	; (23fc73c <asset_manager_open+0x14>)
 23fc72c:	6800      	ldr	r0, [r0, #0]
 23fc72e:	4b04      	ldr	r3, [pc, #16]	; (23fc740 <asset_manager_open+0x18>)
 23fc730:	4403      	add	r3, r0
 23fc732:	681b      	ldr	r3, [r3, #0]
 23fc734:	691b      	ldr	r3, [r3, #16]
 23fc736:	9302      	str	r3, [sp, #8]
 23fc738:	bd09      	pop	{r0, r3, pc}
 23fc73a:	0000      	.short	0x0000
 23fc73c:	1007ad68 	.word	0x1007ad68
 23fc740:	00000074 	.word	0x00000074

023fc744 <asset_manager_available>:
DYNALIB_FN(5, system_asset_manager, asset_manager_available, int(asset_manager_stream*, void*))
 23fc744:	b509      	push	{r0, r3, lr}
 23fc746:	4804      	ldr	r0, [pc, #16]	; (23fc758 <asset_manager_available+0x14>)
 23fc748:	6800      	ldr	r0, [r0, #0]
 23fc74a:	4b04      	ldr	r3, [pc, #16]	; (23fc75c <asset_manager_available+0x18>)
 23fc74c:	4403      	add	r3, r0
 23fc74e:	681b      	ldr	r3, [r3, #0]
 23fc750:	695b      	ldr	r3, [r3, #20]
 23fc752:	9302      	str	r3, [sp, #8]
 23fc754:	bd09      	pop	{r0, r3, pc}
 23fc756:	0000      	.short	0x0000
 23fc758:	1007ad68 	.word	0x1007ad68
 23fc75c:	00000074 	.word	0x00000074

023fc760 <asset_manager_read>:
DYNALIB_FN(6, system_asset_manager, asset_manager_read, int(asset_manager_stream*, char*, size_t, void*))
 23fc760:	b509      	push	{r0, r3, lr}
 23fc762:	4804      	ldr	r0, [pc, #16]	; (23fc774 <asset_manager_read+0x14>)
 23fc764:	6800      	ldr	r0, [r0, #0]
 23fc766:	4b04      	ldr	r3, [pc, #16]	; (23fc778 <asset_manager_read+0x18>)
 23fc768:	4403      	add	r3, r0
 23fc76a:	681b      	ldr	r3, [r3, #0]
 23fc76c:	699b      	ldr	r3, [r3, #24]
 23fc76e:	9302      	str	r3, [sp, #8]
 23fc770:	bd09      	pop	{r0, r3, pc}
 23fc772:	0000      	.short	0x0000
 23fc774:	1007ad68 	.word	0x1007ad68
 23fc778:	00000074 	.word	0x00000074

023fc77c <asset_manager_peek>:
DYNALIB_FN(7, system_asset_manager, asset_manager_peek, int(asset_manager_stream*, char*, size_t, void*))
 23fc77c:	b509      	push	{r0, r3, lr}
 23fc77e:	4804      	ldr	r0, [pc, #16]	; (23fc790 <asset_manager_peek+0x14>)
 23fc780:	6800      	ldr	r0, [r0, #0]
 23fc782:	4b04      	ldr	r3, [pc, #16]	; (23fc794 <asset_manager_peek+0x18>)
 23fc784:	4403      	add	r3, r0
 23fc786:	681b      	ldr	r3, [r3, #0]
 23fc788:	69db      	ldr	r3, [r3, #28]
 23fc78a:	9302      	str	r3, [sp, #8]
 23fc78c:	bd09      	pop	{r0, r3, pc}
 23fc78e:	0000      	.short	0x0000
 23fc790:	1007ad68 	.word	0x1007ad68
 23fc794:	00000074 	.word	0x00000074

023fc798 <asset_manager_skip>:
DYNALIB_FN(8, system_asset_manager, asset_manager_skip, int(asset_manager_stream*, size_t, void*))
 23fc798:	b509      	push	{r0, r3, lr}
 23fc79a:	4804      	ldr	r0, [pc, #16]	; (23fc7ac <asset_manager_skip+0x14>)
 23fc79c:	6800      	ldr	r0, [r0, #0]
 23fc79e:	4b04      	ldr	r3, [pc, #16]	; (23fc7b0 <asset_manager_skip+0x18>)
 23fc7a0:	4403      	add	r3, r0
 23fc7a2:	681b      	ldr	r3, [r3, #0]
 23fc7a4:	6a1b      	ldr	r3, [r3, #32]
 23fc7a6:	9302      	str	r3, [sp, #8]
 23fc7a8:	bd09      	pop	{r0, r3, pc}
 23fc7aa:	0000      	.short	0x0000
 23fc7ac:	1007ad68 	.word	0x1007ad68
 23fc7b0:	00000074 	.word	0x00000074

023fc7b4 <asset_manager_close>:
DYNALIB_FN(9, system_asset_manager, asset_manager_seek, int(asset_manager_stream*, size_t, void*))
DYNALIB_FN(10, system_asset_manager, asset_manager_close, void(asset_manager_stream*, void*))
 23fc7b4:	b509      	push	{r0, r3, lr}
 23fc7b6:	4804      	ldr	r0, [pc, #16]	; (23fc7c8 <asset_manager_close+0x14>)
 23fc7b8:	6800      	ldr	r0, [r0, #0]
 23fc7ba:	4b04      	ldr	r3, [pc, #16]	; (23fc7cc <asset_manager_close+0x18>)
 23fc7bc:	4403      	add	r3, r0
 23fc7be:	681b      	ldr	r3, [r3, #0]
 23fc7c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc7c2:	9302      	str	r3, [sp, #8]
 23fc7c4:	bd09      	pop	{r0, r3, pc}
 23fc7c6:	0000      	.short	0x0000
 23fc7c8:	1007ad68 	.word	0x1007ad68
 23fc7cc:	00000074 	.word	0x00000074

023fc7d0 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 23fc7d0:	b509      	push	{r0, r3, lr}
 23fc7d2:	4804      	ldr	r0, [pc, #16]	; (23fc7e4 <spark_function+0x14>)
 23fc7d4:	6800      	ldr	r0, [r0, #0]
 23fc7d6:	4b04      	ldr	r3, [pc, #16]	; (23fc7e8 <spark_function+0x18>)
 23fc7d8:	4403      	add	r3, r0
 23fc7da:	681b      	ldr	r3, [r3, #0]
 23fc7dc:	685b      	ldr	r3, [r3, #4]
 23fc7de:	9302      	str	r3, [sp, #8]
 23fc7e0:	bd09      	pop	{r0, r3, pc}
 23fc7e2:	0000      	.short	0x0000
 23fc7e4:	1007ad68 	.word	0x1007ad68
 23fc7e8:	0000002c 	.word	0x0000002c

023fc7ec <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fc7ec:	b509      	push	{r0, r3, lr}
 23fc7ee:	4804      	ldr	r0, [pc, #16]	; (23fc800 <spark_process+0x14>)
 23fc7f0:	6800      	ldr	r0, [r0, #0]
 23fc7f2:	4b04      	ldr	r3, [pc, #16]	; (23fc804 <spark_process+0x18>)
 23fc7f4:	4403      	add	r3, r0
 23fc7f6:	681b      	ldr	r3, [r3, #0]
 23fc7f8:	689b      	ldr	r3, [r3, #8]
 23fc7fa:	9302      	str	r3, [sp, #8]
 23fc7fc:	bd09      	pop	{r0, r3, pc}
 23fc7fe:	0000      	.short	0x0000
 23fc800:	1007ad68 	.word	0x1007ad68
 23fc804:	0000002c 	.word	0x0000002c

023fc808 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fc808:	b509      	push	{r0, r3, lr}
 23fc80a:	4804      	ldr	r0, [pc, #16]	; (23fc81c <spark_set_random_seed_from_cloud_handler+0x14>)
 23fc80c:	6800      	ldr	r0, [r0, #0]
 23fc80e:	4b04      	ldr	r3, [pc, #16]	; (23fc820 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fc810:	4403      	add	r3, r0
 23fc812:	681b      	ldr	r3, [r3, #0]
 23fc814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc816:	9302      	str	r3, [sp, #8]
 23fc818:	bd09      	pop	{r0, r3, pc}
 23fc81a:	0000      	.short	0x0000
 23fc81c:	1007ad68 	.word	0x1007ad68
 23fc820:	0000002c 	.word	0x0000002c

023fc824 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc824:	b509      	push	{r0, r3, lr}
 23fc826:	4804      	ldr	r0, [pc, #16]	; (23fc838 <network_connect+0x14>)
 23fc828:	6800      	ldr	r0, [r0, #0]
 23fc82a:	4b04      	ldr	r3, [pc, #16]	; (23fc83c <network_connect+0x18>)
 23fc82c:	4403      	add	r3, r0
 23fc82e:	681b      	ldr	r3, [r3, #0]
 23fc830:	685b      	ldr	r3, [r3, #4]
 23fc832:	9302      	str	r3, [sp, #8]
 23fc834:	bd09      	pop	{r0, r3, pc}
 23fc836:	0000      	.short	0x0000
 23fc838:	1007ad68 	.word	0x1007ad68
 23fc83c:	00000028 	.word	0x00000028

023fc840 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fc840:	b509      	push	{r0, r3, lr}
 23fc842:	4804      	ldr	r0, [pc, #16]	; (23fc854 <network_connecting+0x14>)
 23fc844:	6800      	ldr	r0, [r0, #0]
 23fc846:	4b04      	ldr	r3, [pc, #16]	; (23fc858 <network_connecting+0x18>)
 23fc848:	4403      	add	r3, r0
 23fc84a:	681b      	ldr	r3, [r3, #0]
 23fc84c:	689b      	ldr	r3, [r3, #8]
 23fc84e:	9302      	str	r3, [sp, #8]
 23fc850:	bd09      	pop	{r0, r3, pc}
 23fc852:	0000      	.short	0x0000
 23fc854:	1007ad68 	.word	0x1007ad68
 23fc858:	00000028 	.word	0x00000028

023fc85c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fc85c:	b509      	push	{r0, r3, lr}
 23fc85e:	4804      	ldr	r0, [pc, #16]	; (23fc870 <network_disconnect+0x14>)
 23fc860:	6800      	ldr	r0, [r0, #0]
 23fc862:	4b04      	ldr	r3, [pc, #16]	; (23fc874 <network_disconnect+0x18>)
 23fc864:	4403      	add	r3, r0
 23fc866:	681b      	ldr	r3, [r3, #0]
 23fc868:	68db      	ldr	r3, [r3, #12]
 23fc86a:	9302      	str	r3, [sp, #8]
 23fc86c:	bd09      	pop	{r0, r3, pc}
 23fc86e:	0000      	.short	0x0000
 23fc870:	1007ad68 	.word	0x1007ad68
 23fc874:	00000028 	.word	0x00000028

023fc878 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fc878:	b509      	push	{r0, r3, lr}
 23fc87a:	4804      	ldr	r0, [pc, #16]	; (23fc88c <network_ready+0x14>)
 23fc87c:	6800      	ldr	r0, [r0, #0]
 23fc87e:	4b04      	ldr	r3, [pc, #16]	; (23fc890 <network_ready+0x18>)
 23fc880:	4403      	add	r3, r0
 23fc882:	681b      	ldr	r3, [r3, #0]
 23fc884:	691b      	ldr	r3, [r3, #16]
 23fc886:	9302      	str	r3, [sp, #8]
 23fc888:	bd09      	pop	{r0, r3, pc}
 23fc88a:	0000      	.short	0x0000
 23fc88c:	1007ad68 	.word	0x1007ad68
 23fc890:	00000028 	.word	0x00000028

023fc894 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc894:	b509      	push	{r0, r3, lr}
 23fc896:	4804      	ldr	r0, [pc, #16]	; (23fc8a8 <network_on+0x14>)
 23fc898:	6800      	ldr	r0, [r0, #0]
 23fc89a:	4b04      	ldr	r3, [pc, #16]	; (23fc8ac <network_on+0x18>)
 23fc89c:	4403      	add	r3, r0
 23fc89e:	681b      	ldr	r3, [r3, #0]
 23fc8a0:	695b      	ldr	r3, [r3, #20]
 23fc8a2:	9302      	str	r3, [sp, #8]
 23fc8a4:	bd09      	pop	{r0, r3, pc}
 23fc8a6:	0000      	.short	0x0000
 23fc8a8:	1007ad68 	.word	0x1007ad68
 23fc8ac:	00000028 	.word	0x00000028

023fc8b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc8b0:	b509      	push	{r0, r3, lr}
 23fc8b2:	4804      	ldr	r0, [pc, #16]	; (23fc8c4 <network_off+0x14>)
 23fc8b4:	6800      	ldr	r0, [r0, #0]
 23fc8b6:	4b04      	ldr	r3, [pc, #16]	; (23fc8c8 <network_off+0x18>)
 23fc8b8:	4403      	add	r3, r0
 23fc8ba:	681b      	ldr	r3, [r3, #0]
 23fc8bc:	699b      	ldr	r3, [r3, #24]
 23fc8be:	9302      	str	r3, [sp, #8]
 23fc8c0:	bd09      	pop	{r0, r3, pc}
 23fc8c2:	0000      	.short	0x0000
 23fc8c4:	1007ad68 	.word	0x1007ad68
 23fc8c8:	00000028 	.word	0x00000028

023fc8cc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fc8cc:	b509      	push	{r0, r3, lr}
 23fc8ce:	4804      	ldr	r0, [pc, #16]	; (23fc8e0 <network_listen+0x14>)
 23fc8d0:	6800      	ldr	r0, [r0, #0]
 23fc8d2:	4b04      	ldr	r3, [pc, #16]	; (23fc8e4 <network_listen+0x18>)
 23fc8d4:	4403      	add	r3, r0
 23fc8d6:	681b      	ldr	r3, [r3, #0]
 23fc8d8:	69db      	ldr	r3, [r3, #28]
 23fc8da:	9302      	str	r3, [sp, #8]
 23fc8dc:	bd09      	pop	{r0, r3, pc}
 23fc8de:	0000      	.short	0x0000
 23fc8e0:	1007ad68 	.word	0x1007ad68
 23fc8e4:	00000028 	.word	0x00000028

023fc8e8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fc8e8:	b509      	push	{r0, r3, lr}
 23fc8ea:	4804      	ldr	r0, [pc, #16]	; (23fc8fc <network_listening+0x14>)
 23fc8ec:	6800      	ldr	r0, [r0, #0]
 23fc8ee:	4b04      	ldr	r3, [pc, #16]	; (23fc900 <network_listening+0x18>)
 23fc8f0:	4403      	add	r3, r0
 23fc8f2:	681b      	ldr	r3, [r3, #0]
 23fc8f4:	6a1b      	ldr	r3, [r3, #32]
 23fc8f6:	9302      	str	r3, [sp, #8]
 23fc8f8:	bd09      	pop	{r0, r3, pc}
 23fc8fa:	0000      	.short	0x0000
 23fc8fc:	1007ad68 	.word	0x1007ad68
 23fc900:	00000028 	.word	0x00000028

023fc904 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fc904:	b509      	push	{r0, r3, lr}
 23fc906:	4804      	ldr	r0, [pc, #16]	; (23fc918 <network_set_listen_timeout+0x14>)
 23fc908:	6800      	ldr	r0, [r0, #0]
 23fc90a:	4b04      	ldr	r3, [pc, #16]	; (23fc91c <network_set_listen_timeout+0x18>)
 23fc90c:	4403      	add	r3, r0
 23fc90e:	681b      	ldr	r3, [r3, #0]
 23fc910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc912:	9302      	str	r3, [sp, #8]
 23fc914:	bd09      	pop	{r0, r3, pc}
 23fc916:	0000      	.short	0x0000
 23fc918:	1007ad68 	.word	0x1007ad68
 23fc91c:	00000028 	.word	0x00000028

023fc920 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fc920:	b509      	push	{r0, r3, lr}
 23fc922:	4804      	ldr	r0, [pc, #16]	; (23fc934 <network_get_listen_timeout+0x14>)
 23fc924:	6800      	ldr	r0, [r0, #0]
 23fc926:	4b04      	ldr	r3, [pc, #16]	; (23fc938 <network_get_listen_timeout+0x18>)
 23fc928:	4403      	add	r3, r0
 23fc92a:	681b      	ldr	r3, [r3, #0]
 23fc92c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc92e:	9302      	str	r3, [sp, #8]
 23fc930:	bd09      	pop	{r0, r3, pc}
 23fc932:	0000      	.short	0x0000
 23fc934:	1007ad68 	.word	0x1007ad68
 23fc938:	00000028 	.word	0x00000028

023fc93c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fc93c:	b509      	push	{r0, r3, lr}
 23fc93e:	4804      	ldr	r0, [pc, #16]	; (23fc950 <network_is_on+0x14>)
 23fc940:	6800      	ldr	r0, [r0, #0]
 23fc942:	4b04      	ldr	r3, [pc, #16]	; (23fc954 <network_is_on+0x18>)
 23fc944:	4403      	add	r3, r0
 23fc946:	681b      	ldr	r3, [r3, #0]
 23fc948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc94a:	9302      	str	r3, [sp, #8]
 23fc94c:	bd09      	pop	{r0, r3, pc}
 23fc94e:	0000      	.short	0x0000
 23fc950:	1007ad68 	.word	0x1007ad68
 23fc954:	00000028 	.word	0x00000028

023fc958 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fc958:	b509      	push	{r0, r3, lr}
 23fc95a:	4804      	ldr	r0, [pc, #16]	; (23fc96c <network_is_off+0x14>)
 23fc95c:	6800      	ldr	r0, [r0, #0]
 23fc95e:	4b04      	ldr	r3, [pc, #16]	; (23fc970 <network_is_off+0x18>)
 23fc960:	4403      	add	r3, r0
 23fc962:	681b      	ldr	r3, [r3, #0]
 23fc964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc966:	9302      	str	r3, [sp, #8]
 23fc968:	bd09      	pop	{r0, r3, pc}
 23fc96a:	0000      	.short	0x0000
 23fc96c:	1007ad68 	.word	0x1007ad68
 23fc970:	00000028 	.word	0x00000028

023fc974 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fc974:	b509      	push	{r0, r3, lr}
 23fc976:	4804      	ldr	r0, [pc, #16]	; (23fc988 <malloc+0x14>)
 23fc978:	6800      	ldr	r0, [r0, #0]
 23fc97a:	4b04      	ldr	r3, [pc, #16]	; (23fc98c <malloc+0x18>)
 23fc97c:	4403      	add	r3, r0
 23fc97e:	681b      	ldr	r3, [r3, #0]
 23fc980:	681b      	ldr	r3, [r3, #0]
 23fc982:	9302      	str	r3, [sp, #8]
 23fc984:	bd09      	pop	{r0, r3, pc}
 23fc986:	0000      	.short	0x0000
 23fc988:	1007ad68 	.word	0x1007ad68
 23fc98c:	00000004 	.word	0x00000004

023fc990 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fc990:	b509      	push	{r0, r3, lr}
 23fc992:	4804      	ldr	r0, [pc, #16]	; (23fc9a4 <free+0x14>)
 23fc994:	6800      	ldr	r0, [r0, #0]
 23fc996:	4b04      	ldr	r3, [pc, #16]	; (23fc9a8 <free+0x18>)
 23fc998:	4403      	add	r3, r0
 23fc99a:	681b      	ldr	r3, [r3, #0]
 23fc99c:	685b      	ldr	r3, [r3, #4]
 23fc99e:	9302      	str	r3, [sp, #8]
 23fc9a0:	bd09      	pop	{r0, r3, pc}
 23fc9a2:	0000      	.short	0x0000
 23fc9a4:	1007ad68 	.word	0x1007ad68
 23fc9a8:	00000004 	.word	0x00000004

023fc9ac <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fc9ac:	b509      	push	{r0, r3, lr}
 23fc9ae:	4804      	ldr	r0, [pc, #16]	; (23fc9c0 <realloc+0x14>)
 23fc9b0:	6800      	ldr	r0, [r0, #0]
 23fc9b2:	4b04      	ldr	r3, [pc, #16]	; (23fc9c4 <realloc+0x18>)
 23fc9b4:	4403      	add	r3, r0
 23fc9b6:	681b      	ldr	r3, [r3, #0]
 23fc9b8:	689b      	ldr	r3, [r3, #8]
 23fc9ba:	9302      	str	r3, [sp, #8]
 23fc9bc:	bd09      	pop	{r0, r3, pc}
 23fc9be:	0000      	.short	0x0000
 23fc9c0:	1007ad68 	.word	0x1007ad68
 23fc9c4:	00000004 	.word	0x00000004

023fc9c8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fc9c8:	b509      	push	{r0, r3, lr}
 23fc9ca:	4804      	ldr	r0, [pc, #16]	; (23fc9dc <vsnprintf+0x14>)
 23fc9cc:	6800      	ldr	r0, [r0, #0]
 23fc9ce:	4b04      	ldr	r3, [pc, #16]	; (23fc9e0 <vsnprintf+0x18>)
 23fc9d0:	4403      	add	r3, r0
 23fc9d2:	681b      	ldr	r3, [r3, #0]
 23fc9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc9d6:	9302      	str	r3, [sp, #8]
 23fc9d8:	bd09      	pop	{r0, r3, pc}
 23fc9da:	0000      	.short	0x0000
 23fc9dc:	1007ad68 	.word	0x1007ad68
 23fc9e0:	00000004 	.word	0x00000004

023fc9e4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fc9e4:	b509      	push	{r0, r3, lr}
 23fc9e6:	4804      	ldr	r0, [pc, #16]	; (23fc9f8 <__errno+0x14>)
 23fc9e8:	6800      	ldr	r0, [r0, #0]
 23fc9ea:	4b04      	ldr	r3, [pc, #16]	; (23fc9fc <__errno+0x18>)
 23fc9ec:	4403      	add	r3, r0
 23fc9ee:	681b      	ldr	r3, [r3, #0]
 23fc9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc9f2:	9302      	str	r3, [sp, #8]
 23fc9f4:	bd09      	pop	{r0, r3, pc}
 23fc9f6:	0000      	.short	0x0000
 23fc9f8:	1007ad68 	.word	0x1007ad68
 23fc9fc:	00000004 	.word	0x00000004

023fca00 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fca00:	b509      	push	{r0, r3, lr}
 23fca02:	4804      	ldr	r0, [pc, #16]	; (23fca14 <__assert_func+0x14>)
 23fca04:	6800      	ldr	r0, [r0, #0]
 23fca06:	4b04      	ldr	r3, [pc, #16]	; (23fca18 <__assert_func+0x18>)
 23fca08:	4403      	add	r3, r0
 23fca0a:	681b      	ldr	r3, [r3, #0]
 23fca0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fca0e:	9302      	str	r3, [sp, #8]
 23fca10:	bd09      	pop	{r0, r3, pc}
 23fca12:	0000      	.short	0x0000
 23fca14:	1007ad68 	.word	0x1007ad68
 23fca18:	00000004 	.word	0x00000004

023fca1c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fca1c:	b509      	push	{r0, r3, lr}
 23fca1e:	4804      	ldr	r0, [pc, #16]	; (23fca30 <newlib_impure_ptr_callback+0x14>)
 23fca20:	6800      	ldr	r0, [r0, #0]
 23fca22:	4b04      	ldr	r3, [pc, #16]	; (23fca34 <newlib_impure_ptr_callback+0x18>)
 23fca24:	4403      	add	r3, r0
 23fca26:	681b      	ldr	r3, [r3, #0]
 23fca28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fca2a:	9302      	str	r3, [sp, #8]
 23fca2c:	bd09      	pop	{r0, r3, pc}
 23fca2e:	0000      	.short	0x0000
 23fca30:	1007ad68 	.word	0x1007ad68
 23fca34:	00000004 	.word	0x00000004

023fca38 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fca38:	2100      	movs	r1, #0
 23fca3a:	f7ff be2f 	b.w	23fc69c <system_delay_ms>

023fca3e <_ZN8particle16ApplicationAsset4readEv>:
        return r;
    }
    return 0;
}

int ApplicationAsset::read() {
 23fca3e:	b507      	push	{r0, r1, r2, lr}
    char c;
    int r = read(&c, sizeof(c));
 23fca40:	6803      	ldr	r3, [r0, #0]
 23fca42:	2201      	movs	r2, #1
 23fca44:	6a1b      	ldr	r3, [r3, #32]
 23fca46:	f10d 0107 	add.w	r1, sp, #7
 23fca4a:	4798      	blx	r3
    if (r == 1) {
 23fca4c:	2801      	cmp	r0, #1
        return c;
 23fca4e:	bf08      	it	eq
 23fca50:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    }
    return r;
}
 23fca54:	b003      	add	sp, #12
 23fca56:	f85d fb04 	ldr.w	pc, [sp], #4

023fca5a <_ZN8particle16ApplicationAsset4peekEv>:
        size -= actuallyRead;
    }
    return pos;
}

int ApplicationAsset::peek() {
 23fca5a:	b507      	push	{r0, r1, r2, lr}
    char c;
    int r = peek(&c, sizeof(c));
 23fca5c:	6803      	ldr	r3, [r0, #0]
 23fca5e:	2201      	movs	r2, #1
 23fca60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fca62:	f10d 0107 	add.w	r1, sp, #7
 23fca66:	4798      	blx	r3
    if (r == 1) {
 23fca68:	2801      	cmp	r0, #1
        return c;
 23fca6a:	bf08      	it	eq
 23fca6c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    }
    return r;
}
 23fca70:	b003      	add	sp, #12
 23fca72:	f85d fb04 	ldr.w	pc, [sp], #4

023fca76 <_ZN8particle16ApplicationAsset5flushEv>:
    return asset_manager_skip(data_->stream, size, nullptr);
}

void ApplicationAsset::flush() {
    return;
}
 23fca76:	4770      	bx	lr

023fca78 <_ZN8particle16ApplicationAsset5writeEh>:
    data_.reset();
}

size_t ApplicationAsset::write(uint8_t c) {
    return 0;
}
 23fca78:	2000      	movs	r0, #0
 23fca7a:	4770      	bx	lr

023fca7c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
 23fca7c:	4770      	bx	lr
	...

023fca80 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	// Check for the fake type_info first, so we don't try to access it
	// as a real type_info object. Otherwise, check if it's the real
	// type_info for this class. With RTTI enabled we can check directly,
	// or call a library function to do it.
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
	    ||
 23fca80:	4b06      	ldr	r3, [pc, #24]	; (23fca9c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fca82:	b510      	push	{r4, lr}
	    ||
 23fca84:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fca86:	f100 040c 	add.w	r4, r0, #12
 23fca8a:	d005      	beq.n	23fca98 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
#if __cpp_rtti
	    __ti == typeid(_Sp_make_shared_tag)
#else
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fca8c:	4608      	mov	r0, r1
 23fca8e:	f002 fb8d 	bl	23ff1ac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
#endif
	   )
	  return __ptr;
	return nullptr;
 23fca92:	2800      	cmp	r0, #0
 23fca94:	bf08      	it	eq
 23fca96:	2400      	moveq	r4, #0
      }
 23fca98:	4620      	mov	r0, r4
 23fca9a:	bd10      	pop	{r4, pc}
 23fca9c:	023ffac8 	.word	0x023ffac8

023fcaa0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fcaa0:	b510      	push	{r4, lr}
 23fcaa2:	4604      	mov	r4, r0
 23fcaa4:	2110      	movs	r1, #16
 23fcaa6:	f7fe fe0c 	bl	23fb6c2 <_ZdlPvj>
 23fcaaa:	4620      	mov	r0, r4
 23fcaac:	bd10      	pop	{r4, pc}

023fcaae <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23fcaae:	2110      	movs	r1, #16
 23fcab0:	f7fe be07 	b.w	23fb6c2 <_ZdlPvj>

023fcab4 <_ZNK8particle16ApplicationAsset4nameEv>:
String ApplicationAsset::name() const {
 23fcab4:	b510      	push	{r4, lr}
 23fcab6:	4604      	mov	r4, r0
    return name_;
 23fcab8:	3110      	adds	r1, #16
 23fcaba:	f001 fe94 	bl	23fe7e6 <_ZN6StringC1ERKS_>
}
 23fcabe:	4620      	mov	r0, r4
 23fcac0:	bd10      	pop	{r4, pc}

023fcac2 <_ZNK8particle16ApplicationAsset4sizeEv>:
}
 23fcac2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23fcac4:	4770      	bx	lr

023fcac6 <_ZNK8particle16ApplicationAsset7isValidEv>:
    return name_.length() > 0 && hash_.isValid();
 23fcac6:	6983      	ldr	r3, [r0, #24]
 23fcac8:	b143      	cbz	r3, 23fcadc <_ZNK8particle16ApplicationAsset7isValidEv+0x16>
inline const Buffer& AssetHash::hash() const {
    return hash_;
}

inline bool AssetHash::isValid() const {
    return type_ != Type::INVALID && hash_.size() > 0;
 23fcaca:	f990 3020 	ldrsb.w	r3, [r0, #32]
 23fcace:	3301      	adds	r3, #1
 23fcad0:	d004      	beq.n	23fcadc <_ZNK8particle16ApplicationAsset7isValidEv+0x16>
 23fcad2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 23fcad4:	3800      	subs	r0, #0
 23fcad6:	bf18      	it	ne
 23fcad8:	2001      	movne	r0, #1
 23fcada:	4770      	bx	lr
 23fcadc:	2000      	movs	r0, #0
}
 23fcade:	4770      	bx	lr

023fcae0 <_ZN8particle16ApplicationAsset4DataD1Ev>:

ApplicationAsset::Data::Data(asset_manager_stream* s)
        : stream(s) {
}

ApplicationAsset::Data::~Data() {
 23fcae0:	b510      	push	{r4, lr}
 23fcae2:	4604      	mov	r4, r0
    if (stream) {
 23fcae4:	6800      	ldr	r0, [r0, #0]
 23fcae6:	b110      	cbz	r0, 23fcaee <_ZN8particle16ApplicationAsset4DataD1Ev+0xe>
        asset_manager_close(stream, nullptr);
 23fcae8:	2100      	movs	r1, #0
 23fcaea:	f7ff fe63 	bl	23fc7b4 <asset_manager_close>
        stream = nullptr;
    }
}
 23fcaee:	4620      	mov	r0, r4
 23fcaf0:	bd10      	pop	{r4, pc}

023fcaf2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 23fcaf2:	300c      	adds	r0, #12
 23fcaf4:	f7ff bff4 	b.w	23fcae0 <_ZN8particle16ApplicationAsset4DataD1Ev>

023fcaf8 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
	{ }

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
 23fcaf8:	b510      	push	{r4, lr}
 23fcafa:	4604      	mov	r4, r0
      {
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
 23fcafc:	6800      	ldr	r0, [r0, #0]
 23fcafe:	b108      	cbz	r0, 23fcb04 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev+0xc>
	  delete [] __ptr;
 23fcb00:	f7fe fddd 	bl	23fb6be <_ZdaPv>
	  get_deleter()(__ptr);
	__ptr = pointer();
      }
 23fcb04:	4620      	mov	r0, r4
 23fcb06:	bd10      	pop	{r4, pc}

023fcb08 <_ZN8particle6BufferC1Ej>:
private:
    std::unique_ptr<char[]> buffer_;
    size_t size_;
};

inline Buffer::Buffer(size_t size)
 23fcb08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 23fcb0a:	2700      	movs	r7, #0
 23fcb0c:	4604      	mov	r4, r0
 23fcb0e:	460d      	mov	r5, r1
        : size_(size) {
 23fcb10:	e9c0 7100 	strd	r7, r1, [r0]
    if (size_ > 0) {
 23fcb14:	b1c9      	cbz	r1, 23fcb4a <_ZN8particle6BufferC1Ej+0x42>

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 23fcb16:	4608      	mov	r0, r1
 23fcb18:	f7fe fdcf 	bl	23fb6ba <_Znaj>
 23fcb1c:	4606      	mov	r6, r0
 23fcb1e:	b138      	cbz	r0, 23fcb30 <_ZN8particle6BufferC1Ej+0x28>
 23fcb20:	1e6b      	subs	r3, r5, #1
 23fcb22:	3301      	adds	r3, #1
 23fcb24:	bfac      	ite	ge
 23fcb26:	462a      	movge	r2, r5
 23fcb28:	463a      	movlt	r2, r7
 23fcb2a:	4639      	mov	r1, r7
 23fcb2c:	f002 fc85 	bl	23ff43a <memset>
	_M_ptr() = nullptr;
 23fcb30:	2300      	movs	r3, #0
	const pointer __old_p = _M_ptr();
 23fcb32:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = nullptr;
 23fcb34:	9301      	str	r3, [sp, #4]
	_M_ptr() = __p;
 23fcb36:	6026      	str	r6, [r4, #0]
	if (__old_p)
 23fcb38:	b108      	cbz	r0, 23fcb3e <_ZN8particle6BufferC1Ej+0x36>
	  delete [] __ptr;
 23fcb3a:	f7fe fdc0 	bl	23fb6be <_ZdaPv>
        buffer_ = std::make_unique<char[]>(size_);
 23fcb3e:	a801      	add	r0, sp, #4
 23fcb40:	f7ff ffda 	bl	23fcaf8 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
        if (!buffer_) {
 23fcb44:	6823      	ldr	r3, [r4, #0]
 23fcb46:	b903      	cbnz	r3, 23fcb4a <_ZN8particle6BufferC1Ej+0x42>
            size_ = 0;
 23fcb48:	6063      	str	r3, [r4, #4]
        }
    }
}
 23fcb4a:	4620      	mov	r0, r4
 23fcb4c:	b003      	add	sp, #12
 23fcb4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fcb50 <_ZN8particle6BufferC1ERKS0_>:

inline Buffer::Buffer(const uint8_t* data, size_t size)
        : Buffer((const char*)data, size) {

}
inline Buffer::Buffer(const Buffer& other)
 23fcb50:	b538      	push	{r3, r4, r5, lr}
 23fcb52:	4604      	mov	r4, r0
 23fcb54:	460d      	mov	r5, r1
        : Buffer(other.size()) {
 23fcb56:	6849      	ldr	r1, [r1, #4]
 23fcb58:	f7ff ffd6 	bl	23fcb08 <_ZN8particle6BufferC1Ej>
    if (size_ > 0 && other.size() > 0) {
 23fcb5c:	6862      	ldr	r2, [r4, #4]
 23fcb5e:	b12a      	cbz	r2, 23fcb6c <_ZN8particle6BufferC1ERKS0_+0x1c>
 23fcb60:	686b      	ldr	r3, [r5, #4]
 23fcb62:	b11b      	cbz	r3, 23fcb6c <_ZN8particle6BufferC1ERKS0_+0x1c>
        memcpy(buffer_.get(), other.buffer_.get(), size_);
 23fcb64:	6829      	ldr	r1, [r5, #0]
 23fcb66:	6820      	ldr	r0, [r4, #0]
 23fcb68:	f002 fc40 	bl	23ff3ec <memcpy>
    }
}
 23fcb6c:	4620      	mov	r0, r4
 23fcb6e:	bd38      	pop	{r3, r4, r5, pc}

023fcb70 <_ZN8particle9AssetHashC1ERKNS_6BufferENS0_4TypeE>:
        : type_(Type::INVALID) {
 23fcb70:	23ff      	movs	r3, #255	; 0xff
inline AssetHash::AssetHash(const Buffer& hash, Type type)
 23fcb72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fcb74:	4615      	mov	r5, r2
 23fcb76:	4604      	mov	r4, r0
 23fcb78:	460e      	mov	r6, r1
        : type_(Type::INVALID) {
 23fcb7a:	f800 3b04 	strb.w	r3, [r0], #4
 23fcb7e:	2100      	movs	r1, #0
 23fcb80:	f7ff ffc2 	bl	23fcb08 <_ZN8particle6BufferC1Ej>
    if (type == Type::SHA256 && hash.size() == SHA256_HASH_SIZE) {
 23fcb84:	b995      	cbnz	r5, 23fcbac <_ZN8particle9AssetHashC1ERKNS_6BufferENS0_4TypeE+0x3c>
 23fcb86:	6873      	ldr	r3, [r6, #4]
 23fcb88:	2b20      	cmp	r3, #32
 23fcb8a:	d10f      	bne.n	23fcbac <_ZN8particle9AssetHashC1ERKNS_6BufferENS0_4TypeE+0x3c>
        hash_ = hash;
 23fcb8c:	4631      	mov	r1, r6
 23fcb8e:	4668      	mov	r0, sp
 23fcb90:	f7ff ffde 	bl	23fcb50 <_ZN8particle6BufferC1ERKS0_>
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23fcb94:	9a00      	ldr	r2, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcb96:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fcb98:	6062      	str	r2, [r4, #4]
 23fcb9a:	9a01      	ldr	r2, [sp, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcb9c:	9300      	str	r3, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcb9e:	68a3      	ldr	r3, [r4, #8]
class Buffer {
 23fcba0:	4668      	mov	r0, sp
      __a = _GLIBCXX_MOVE(__b);
 23fcba2:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcba4:	9301      	str	r3, [sp, #4]
 23fcba6:	f7ff ffa7 	bl	23fcaf8 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
        type_ = type;
 23fcbaa:	7025      	strb	r5, [r4, #0]
}
 23fcbac:	4620      	mov	r0, r4
 23fcbae:	b002      	add	sp, #8
 23fcbb0:	bd70      	pop	{r4, r5, r6, pc}
	...

023fcbb4 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset>:
ApplicationAsset::ApplicationAsset(const asset_manager_asset* asset)
 23fcbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fcbb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fcbba:	2600      	movs	r6, #0
    /**
     * Default constructor.
     * 
     * Construct a new Application Asset object.
     */
    ApplicationAsset() = default;
 23fcbbc:	4607      	mov	r7, r0
 23fcbbe:	e9c0 6301 	strd	r6, r3, [r0, #4]
 23fcbc2:	4b31      	ldr	r3, [pc, #196]	; (23fcc88 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xd4>)
 23fcbc4:	4604      	mov	r4, r0
 23fcbc6:	f847 3b10 	str.w	r3, [r7], #16
 23fcbca:	b089      	sub	sp, #36	; 0x24
 23fcbcc:	460d      	mov	r5, r1
 23fcbce:	4638      	mov	r0, r7
 23fcbd0:	492e      	ldr	r1, [pc, #184]	; (23fcc8c <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xd8>)
 23fcbd2:	f001 fdbc 	bl	23fe74e <_ZN6StringC1EPK19__FlashStringHelper>
        : type_(Type::INVALID) {
 23fcbd6:	23ff      	movs	r3, #255	; 0xff
 23fcbd8:	4631      	mov	r1, r6
 23fcbda:	f884 3020 	strb.w	r3, [r4, #32]
 23fcbde:	f104 0024 	add.w	r0, r4, #36	; 0x24
 23fcbe2:	f7ff ff91 	bl	23fcb08 <_ZN8particle6BufferC1Ej>
 23fcbe6:	e9c4 660b 	strd	r6, r6, [r4, #44]	; 0x2c

      template<typename _Tp>
	struct __not_alloc_shared_tag<_Sp_alloc_shared_tag<_Tp>> { };

    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 23fcbea:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
 23fcbee:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    if (!asset) {
 23fcbf2:	2d00      	cmp	r5, #0
 23fcbf4:	d045      	beq.n	23fcc82 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xce>
    if (asset->name) {
 23fcbf6:	6829      	ldr	r1, [r5, #0]
 23fcbf8:	b149      	cbz	r1, 23fcc0e <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0x5a>
        name_ = String(asset->name);
 23fcbfa:	a804      	add	r0, sp, #16
 23fcbfc:	f001 fda7 	bl	23fe74e <_ZN6StringC1EPK19__FlashStringHelper>
 23fcc00:	4638      	mov	r0, r7
 23fcc02:	a904      	add	r1, sp, #16
 23fcc04:	f001 fdfa 	bl	23fe7fc <_ZN6StringaSEOS_>
 23fcc08:	a804      	add	r0, sp, #16
 23fcc0a:	f001 fd55 	bl	23fe6b8 <_ZN6StringD1Ev>
    if (asset->hash && asset->hash_length) {
 23fcc0e:	686e      	ldr	r6, [r5, #4]
 23fcc10:	2e00      	cmp	r6, #0
 23fcc12:	d031      	beq.n	23fcc78 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xc4>
 23fcc14:	892a      	ldrh	r2, [r5, #8]
 23fcc16:	2a00      	cmp	r2, #0
 23fcc18:	d02e      	beq.n	23fcc78 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xc4>
        : Buffer(size) {
 23fcc1a:	4611      	mov	r1, r2
 23fcc1c:	a802      	add	r0, sp, #8
        hash_ = AssetHash(asset->hash, asset->hash_length, (AssetHash::Type)asset->hash_type);
 23fcc1e:	f995 700a 	ldrsb.w	r7, [r5, #10]
 23fcc22:	9201      	str	r2, [sp, #4]
 23fcc24:	f7ff ff70 	bl	23fcb08 <_ZN8particle6BufferC1Ej>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 23fcc28:	9802      	ldr	r0, [sp, #8]
    if (buffer_ && data && size > 0) {
 23fcc2a:	b118      	cbz	r0, 23fcc34 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0x80>
        memcpy(buffer_.get(), data, size);
 23fcc2c:	4631      	mov	r1, r6
 23fcc2e:	9a01      	ldr	r2, [sp, #4]
 23fcc30:	f002 fbdc 	bl	23ff3ec <memcpy>
        : AssetHash(Buffer(hash, length), type) {
 23fcc34:	463a      	mov	r2, r7
 23fcc36:	a902      	add	r1, sp, #8
 23fcc38:	a804      	add	r0, sp, #16
 23fcc3a:	f7ff ff99 	bl	23fcb70 <_ZN8particle9AssetHashC1ERKNS_6BufferENS0_4TypeE>
class Buffer {
 23fcc3e:	a802      	add	r0, sp, #8
 23fcc40:	f7ff ff5a 	bl	23fcaf8 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
    AssetHash& operator=(AssetHash&& other) = default;
 23fcc44:	f89d 3010 	ldrb.w	r3, [sp, #16]

inline Buffer::Buffer(Buffer&& other)
        : Buffer() {
 23fcc48:	2100      	movs	r1, #0
 23fcc4a:	f884 3020 	strb.w	r3, [r4, #32]
 23fcc4e:	a802      	add	r0, sp, #8
 23fcc50:	f7ff ff5a 	bl	23fcb08 <_ZN8particle6BufferC1Ej>
 23fcc54:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fcc56:	9905      	ldr	r1, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcc58:	9305      	str	r3, [sp, #20]
 23fcc5a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fcc5c:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcc5e:	9306      	str	r3, [sp, #24]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcc60:	6a63      	ldr	r3, [r4, #36]	; 0x24
class Buffer {
 23fcc62:	a802      	add	r0, sp, #8
      __b = _GLIBCXX_MOVE(__tmp);
 23fcc64:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcc66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 23fcc68:	6261      	str	r1, [r4, #36]	; 0x24
 23fcc6a:	62a2      	str	r2, [r4, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fcc6c:	9303      	str	r3, [sp, #12]
 23fcc6e:	f7ff ff43 	bl	23fcaf8 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
 23fcc72:	a805      	add	r0, sp, #20
 23fcc74:	f7ff ff40 	bl	23fcaf8 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
    if (asset->size) {
 23fcc78:	68eb      	ldr	r3, [r5, #12]
 23fcc7a:	b103      	cbz	r3, 23fcc7e <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xca>
        size_ = asset->size;
 23fcc7c:	62e3      	str	r3, [r4, #44]	; 0x2c
    storageSize_ = asset->storage_size;
 23fcc7e:	692b      	ldr	r3, [r5, #16]
 23fcc80:	6323      	str	r3, [r4, #48]	; 0x30
}
 23fcc82:	4620      	mov	r0, r4
 23fcc84:	b009      	add	sp, #36	; 0x24
 23fcc86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fcc88:	023ffad8 	.word	0x023ffad8
 23fcc8c:	023ffbdf 	.word	0x023ffbdf

023fcc90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fcc90:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23fcc92:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fcc94:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fcc96:	b17c      	cbz	r4, 23fccb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fcc98:	6863      	ldr	r3, [r4, #4]
 23fcc9a:	3b01      	subs	r3, #1
 23fcc9c:	6063      	str	r3, [r4, #4]
 23fcc9e:	b95b      	cbnz	r3, 23fccb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fcca0:	6823      	ldr	r3, [r4, #0]
 23fcca2:	4620      	mov	r0, r4
 23fcca4:	689b      	ldr	r3, [r3, #8]
 23fcca6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fcca8:	68a3      	ldr	r3, [r4, #8]
 23fccaa:	3b01      	subs	r3, #1
 23fccac:	60a3      	str	r3, [r4, #8]
 23fccae:	b91b      	cbnz	r3, 23fccb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fccb0:	6823      	ldr	r3, [r4, #0]
 23fccb2:	4620      	mov	r0, r4
 23fccb4:	68db      	ldr	r3, [r3, #12]
 23fccb6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fccb8:	4628      	mov	r0, r5
 23fccba:	bd38      	pop	{r3, r4, r5, pc}

023fccbc <_ZN8particle16ApplicationAssetD1Ev>:

    /**
     * Destroy the Application Asset object.
     * 
     */
    virtual ~ApplicationAsset() = default;
 23fccbc:	b510      	push	{r4, lr}
 23fccbe:	4604      	mov	r4, r0
 23fccc0:	4b07      	ldr	r3, [pc, #28]	; (23fcce0 <_ZN8particle16ApplicationAssetD1Ev+0x24>)
 23fccc2:	f840 3b3c 	str.w	r3, [r0], #60
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 23fccc6:	f7ff ffe3 	bl	23fcc90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fccca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 23fccce:	f7ff ff13 	bl	23fcaf8 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
 23fccd2:	f104 0010 	add.w	r0, r4, #16
 23fccd6:	f001 fcef 	bl	23fe6b8 <_ZN6StringD1Ev>
 23fccda:	4620      	mov	r0, r4
 23fccdc:	bd10      	pop	{r4, pc}
 23fccde:	bf00      	nop
 23fcce0:	023ffad8 	.word	0x023ffad8

023fcce4 <_ZN8particle16ApplicationAssetD0Ev>:
 23fcce4:	b510      	push	{r4, lr}
 23fcce6:	4604      	mov	r4, r0
 23fcce8:	f7ff ffe8 	bl	23fccbc <_ZN8particle16ApplicationAssetD1Ev>
 23fccec:	4620      	mov	r0, r4
 23fccee:	2140      	movs	r1, #64	; 0x40
 23fccf0:	f7fe fce7 	bl	23fb6c2 <_ZdlPvj>
 23fccf4:	4620      	mov	r0, r4
 23fccf6:	bd10      	pop	{r4, pc}

023fccf8 <_ZN8particle16ApplicationAsset17prepareForReadingEb>:
int ApplicationAsset::prepareForReading(bool keepOpen) {
 23fccf8:	b570      	push	{r4, r5, r6, lr}
 23fccfa:	b08a      	sub	sp, #40	; 0x28
 23fccfc:	4604      	mov	r4, r0
 23fccfe:	460e      	mov	r6, r1
    if (!isValid()) {
 23fcd00:	f7ff fee1 	bl	23fcac6 <_ZNK8particle16ApplicationAsset7isValidEv>
 23fcd04:	2800      	cmp	r0, #0
 23fcd06:	d04e      	beq.n	23fcda6 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xae>
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const // never throws
      { return _M_ptr == 0 ? false : true; }
 23fcd08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (data_ && data_->stream) {
 23fcd0a:	b113      	cbz	r3, 23fcd12 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x1a>
 23fcd0c:	681b      	ldr	r3, [r3, #0]
 23fcd0e:	2b00      	cmp	r3, #0
 23fcd10:	d13c      	bne.n	23fcd8c <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x94>
    } else if (eof_) {
 23fcd12:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
 23fcd16:	2d00      	cmp	r5, #0
 23fcd18:	d148      	bne.n	23fcdac <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xb4>
    if (size() == 0) {
 23fcd1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23fcd1c:	2b00      	cmp	r3, #0
 23fcd1e:	d048      	beq.n	23fcdb2 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xba>
    a.name = name_.c_str();
 23fcd20:	6923      	ldr	r3, [r4, #16]
    asset_manager_asset a = {};
 23fcd22:	e9cd 5507 	strd	r5, r5, [sp, #28]
    a.name = name_.c_str();
 23fcd26:	9305      	str	r3, [sp, #20]
    a.hash = hash_.hash().data();
 23fcd28:	6a63      	ldr	r3, [r4, #36]	; 0x24
    CHECK(asset_manager_open(&stream, &a, nullptr));
 23fcd2a:	462a      	mov	r2, r5
    a.hash = hash_.hash().data();
 23fcd2c:	9306      	str	r3, [sp, #24]
    a.hash_length = hash_.hash().size();
 23fcd2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    CHECK(asset_manager_open(&stream, &a, nullptr));
 23fcd30:	4668      	mov	r0, sp
    a.hash_length = hash_.hash().size();
 23fcd32:	f8ad 301c 	strh.w	r3, [sp, #28]
    a.hash_type = hash_.type();
 23fcd36:	f894 3020 	ldrb.w	r3, [r4, #32]
    CHECK(asset_manager_open(&stream, &a, nullptr));
 23fcd3a:	a905      	add	r1, sp, #20
    asset_manager_stream* stream = nullptr;
 23fcd3c:	9500      	str	r5, [sp, #0]
    asset_manager_asset a = {};
 23fcd3e:	9509      	str	r5, [sp, #36]	; 0x24
    a.hash_type = hash_.type();
 23fcd40:	f88d 301e 	strb.w	r3, [sp, #30]
    CHECK(asset_manager_open(&stream, &a, nullptr));
 23fcd44:	f7ff fcf0 	bl	23fc728 <asset_manager_open>
 23fcd48:	2800      	cmp	r0, #0
 23fcd4a:	db2a      	blt.n	23fcda2 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
    if (keepOpen) {
 23fcd4c:	b1e6      	cbz	r6, 23fcd88 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x90>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fcd4e:	2010      	movs	r0, #16

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fcd50:	9501      	str	r5, [sp, #4]
 23fcd52:	f7fe fcb0 	bl	23fb6b6 <_Znwj>
	  auto __pi = ::new (__mem)
 23fcd56:	b130      	cbz	r0, 23fcd66 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x6e>
      : _M_use_count(1), _M_weak_count(1) { }
 23fcd58:	2301      	movs	r3, #1
 23fcd5a:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
 23fcd5e:	4b16      	ldr	r3, [pc, #88]	; (23fcdb8 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xc0>)
 23fcd60:	6003      	str	r3, [r0, #0]
        : stream(s) {
 23fcd62:	9b00      	ldr	r3, [sp, #0]
 23fcd64:	60c3      	str	r3, [r0, #12]
	__r._M_pi = _M_pi;
 23fcd66:	2300      	movs	r3, #0
	__r._M_ptr = 0;
 23fcd68:	e9cd 3301 	strd	r3, r3, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fcd6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23fcd6e:	9303      	str	r3, [sp, #12]
 23fcd70:	f100 030c 	add.w	r3, r0, #12
      __b = _GLIBCXX_MOVE(__tmp);
 23fcd74:	63a3      	str	r3, [r4, #56]	; 0x38
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fcd76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	__r._M_pi = _M_pi;
 23fcd78:	63e0      	str	r0, [r4, #60]	; 0x3c
      ~__shared_ptr() = default;
 23fcd7a:	a804      	add	r0, sp, #16
	_M_pi = __tmp;
 23fcd7c:	9304      	str	r3, [sp, #16]
      ~__shared_ptr() = default;
 23fcd7e:	f7ff ff87 	bl	23fcc90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fcd82:	a802      	add	r0, sp, #8
 23fcd84:	f7ff ff84 	bl	23fcc90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!data_) {
 23fcd88:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 23fcd8a:	b109      	cbz	r1, 23fcd90 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x98>
        return 0;
 23fcd8c:	2000      	movs	r0, #0
 23fcd8e:	e008      	b.n	23fcda2 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
        asset_manager_close(stream, nullptr);
 23fcd90:	9800      	ldr	r0, [sp, #0]
 23fcd92:	f7ff fd0f 	bl	23fc7b4 <asset_manager_close>
    if (keepOpen && !data_) {
 23fcd96:	2e00      	cmp	r6, #0
 23fcd98:	d0f8      	beq.n	23fcd8c <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x94>
 23fcd9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23fcd9c:	2b00      	cmp	r3, #0
 23fcd9e:	d1f5      	bne.n	23fcd8c <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x94>
        return SYSTEM_ERROR_NO_MEMORY;
 23fcda0:	4806      	ldr	r0, [pc, #24]	; (23fcdbc <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xc4>)
}
 23fcda2:	b00a      	add	sp, #40	; 0x28
 23fcda4:	bd70      	pop	{r4, r5, r6, pc}
        return SYSTEM_ERROR_INVALID_STATE;
 23fcda6:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
 23fcdaa:	e7fa      	b.n	23fcda2 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
        return SYSTEM_ERROR_END_OF_STREAM;
 23fcdac:	f06f 00c8 	mvn.w	r0, #200	; 0xc8
 23fcdb0:	e7f7      	b.n	23fcda2 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
        return SYSTEM_ERROR_NOT_ENOUGH_DATA;
 23fcdb2:	f06f 00be 	mvn.w	r0, #190	; 0xbe
 23fcdb6:	e7f4      	b.n	23fcda2 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
 23fcdb8:	023ffab4 	.word	0x023ffab4
 23fcdbc:	fffffefc 	.word	0xfffffefc

023fcdc0 <_ZN8particle16ApplicationAsset4peekEPcj>:
int ApplicationAsset::peek(char* buffer, size_t size) {
 23fcdc0:	b570      	push	{r4, r5, r6, lr}
 23fcdc2:	460c      	mov	r4, r1
    CHECK(prepareForReading());
 23fcdc4:	2101      	movs	r1, #1
int ApplicationAsset::peek(char* buffer, size_t size) {
 23fcdc6:	4606      	mov	r6, r0
 23fcdc8:	4615      	mov	r5, r2
    CHECK(prepareForReading());
 23fcdca:	f7ff ff95 	bl	23fccf8 <_ZN8particle16ApplicationAsset17prepareForReadingEb>
 23fcdce:	2800      	cmp	r0, #0
 23fcdd0:	db0b      	blt.n	23fcdea <_ZN8particle16ApplicationAsset4peekEPcj+0x2a>
    CHECK_TRUE(buffer && size, SYSTEM_ERROR_INVALID_ARGUMENT);
 23fcdd2:	b14c      	cbz	r4, 23fcde8 <_ZN8particle16ApplicationAsset4peekEPcj+0x28>
 23fcdd4:	b145      	cbz	r5, 23fcde8 <_ZN8particle16ApplicationAsset4peekEPcj+0x28>
    return asset_manager_peek(data_->stream, buffer, size, nullptr);
 23fcdd6:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 23fcdd8:	462a      	mov	r2, r5
 23fcdda:	4621      	mov	r1, r4
}
 23fcddc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return asset_manager_peek(data_->stream, buffer, size, nullptr);
 23fcde0:	2300      	movs	r3, #0
 23fcde2:	6800      	ldr	r0, [r0, #0]
 23fcde4:	f7ff bcca 	b.w	23fc77c <asset_manager_peek>
    CHECK_TRUE(buffer && size, SYSTEM_ERROR_INVALID_ARGUMENT);
 23fcde8:	4800      	ldr	r0, [pc, #0]	; (23fcdec <_ZN8particle16ApplicationAsset4peekEPcj+0x2c>)
}
 23fcdea:	bd70      	pop	{r4, r5, r6, pc}
 23fcdec:	fffffef2 	.word	0xfffffef2

023fcdf0 <_ZN8particle16ApplicationAsset4skipEj>:
int ApplicationAsset::skip(size_t size) {
 23fcdf0:	b538      	push	{r3, r4, r5, lr}
 23fcdf2:	460c      	mov	r4, r1
    CHECK(prepareForReading());
 23fcdf4:	2101      	movs	r1, #1
int ApplicationAsset::skip(size_t size) {
 23fcdf6:	4605      	mov	r5, r0
    CHECK(prepareForReading());
 23fcdf8:	f7ff ff7e 	bl	23fccf8 <_ZN8particle16ApplicationAsset17prepareForReadingEb>
 23fcdfc:	2800      	cmp	r0, #0
 23fcdfe:	db07      	blt.n	23fce10 <_ZN8particle16ApplicationAsset4skipEj+0x20>
    return asset_manager_skip(data_->stream, size, nullptr);
 23fce00:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fce02:	4621      	mov	r1, r4
 23fce04:	6818      	ldr	r0, [r3, #0]
 23fce06:	2200      	movs	r2, #0
}
 23fce08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return asset_manager_skip(data_->stream, size, nullptr);
 23fce0c:	f7ff bcc4 	b.w	23fc798 <asset_manager_skip>
}
 23fce10:	bd38      	pop	{r3, r4, r5, pc}

023fce12 <_ZNSt12__shared_ptrIN8particle16ApplicationAsset4DataELN9__gnu_cxx12_Lock_policyE0EE5resetEv>:
      reset() noexcept
 23fce12:	b507      	push	{r0, r1, r2, lr}
      __a = _GLIBCXX_MOVE(__b);
 23fce14:	6803      	ldr	r3, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fce16:	6842      	ldr	r2, [r0, #4]
 23fce18:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fce1a:	2300      	movs	r3, #0
 23fce1c:	6003      	str	r3, [r0, #0]
	__r._M_pi = _M_pi;
 23fce1e:	6043      	str	r3, [r0, #4]
      ~__shared_ptr() = default;
 23fce20:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
 23fce22:	9201      	str	r2, [sp, #4]
      ~__shared_ptr() = default;
 23fce24:	f7ff ff34 	bl	23fcc90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      { __shared_ptr().swap(*this); }
 23fce28:	b003      	add	sp, #12
 23fce2a:	f85d fb04 	ldr.w	pc, [sp], #4

023fce2e <_ZN8particle16ApplicationAsset9availableEv>:
int ApplicationAsset::available() {
 23fce2e:	b538      	push	{r3, r4, r5, lr}
    int r = prepareForReading();
 23fce30:	2101      	movs	r1, #1
int ApplicationAsset::available() {
 23fce32:	4605      	mov	r5, r0
    int r = prepareForReading();
 23fce34:	f7ff ff60 	bl	23fccf8 <_ZN8particle16ApplicationAsset17prepareForReadingEb>
    if (!r) {
 23fce38:	4604      	mov	r4, r0
 23fce3a:	b928      	cbnz	r0, 23fce48 <_ZN8particle16ApplicationAsset9availableEv+0x1a>
        r = asset_manager_available(data_->stream, nullptr);
 23fce3c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fce3e:	4601      	mov	r1, r0
 23fce40:	6818      	ldr	r0, [r3, #0]
 23fce42:	f7ff fc7f 	bl	23fc744 <asset_manager_available>
 23fce46:	4604      	mov	r4, r0
    if (r == SYSTEM_ERROR_END_OF_STREAM && !eof_) {
 23fce48:	f114 0fc9 	cmn.w	r4, #201	; 0xc9
 23fce4c:	d109      	bne.n	23fce62 <_ZN8particle16ApplicationAsset9availableEv+0x34>
 23fce4e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 23fce52:	b933      	cbnz	r3, 23fce62 <_ZN8particle16ApplicationAsset9availableEv+0x34>
        data_.reset();
 23fce54:	f105 0038 	add.w	r0, r5, #56	; 0x38
 23fce58:	f7ff ffdb 	bl	23fce12 <_ZNSt12__shared_ptrIN8particle16ApplicationAsset4DataELN9__gnu_cxx12_Lock_policyE0EE5resetEv>
        eof_ = true;
 23fce5c:	2301      	movs	r3, #1
 23fce5e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 23fce62:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 23fce66:	bd38      	pop	{r3, r4, r5, pc}

023fce68 <_ZN8particle16ApplicationAsset4readEPcj>:
int ApplicationAsset::read(char* buffer, size_t size) {
 23fce68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fce6c:	4688      	mov	r8, r1
    CHECK(prepareForReading());
 23fce6e:	2101      	movs	r1, #1
int ApplicationAsset::read(char* buffer, size_t size) {
 23fce70:	4607      	mov	r7, r0
 23fce72:	4615      	mov	r5, r2
    CHECK(prepareForReading());
 23fce74:	f7ff ff40 	bl	23fccf8 <_ZN8particle16ApplicationAsset17prepareForReadingEb>
 23fce78:	1e04      	subs	r4, r0, #0
 23fce7a:	db1b      	blt.n	23fceb4 <_ZN8particle16ApplicationAsset4readEPcj+0x4c>
    CHECK_TRUE(buffer && size, SYSTEM_ERROR_INVALID_ARGUMENT);
 23fce7c:	f1b8 0f00 	cmp.w	r8, #0
 23fce80:	d020      	beq.n	23fcec4 <_ZN8particle16ApplicationAsset4readEPcj+0x5c>
 23fce82:	b1fd      	cbz	r5, 23fcec4 <_ZN8particle16ApplicationAsset4readEPcj+0x5c>
 23fce84:	2600      	movs	r6, #0
        int actuallyRead = asset_manager_read(data_->stream, buffer + pos, size, nullptr);
 23fce86:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 23fce88:	2300      	movs	r3, #0
 23fce8a:	462a      	mov	r2, r5
 23fce8c:	6800      	ldr	r0, [r0, #0]
 23fce8e:	eb08 0106 	add.w	r1, r8, r6
 23fce92:	f7ff fc65 	bl	23fc760 <asset_manager_read>
        if (actuallyRead <= 0) {
 23fce96:	1e04      	subs	r4, r0, #0
 23fce98:	dc0f      	bgt.n	23fceba <_ZN8particle16ApplicationAsset4readEPcj+0x52>
            if (actuallyRead == SYSTEM_ERROR_END_OF_STREAM) {
 23fce9a:	f114 0fc9 	cmn.w	r4, #201	; 0xc9
 23fce9e:	d106      	bne.n	23fceae <_ZN8particle16ApplicationAsset4readEPcj+0x46>
                data_.reset();
 23fcea0:	f107 0038 	add.w	r0, r7, #56	; 0x38
 23fcea4:	f7ff ffb5 	bl	23fce12 <_ZNSt12__shared_ptrIN8particle16ApplicationAsset4DataELN9__gnu_cxx12_Lock_policyE0EE5resetEv>
                eof_ = true;
 23fcea8:	2301      	movs	r3, #1
 23fceaa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            return pos > 0 ? pos : actuallyRead;
 23fceae:	2e00      	cmp	r6, #0
 23fceb0:	bf18      	it	ne
 23fceb2:	4634      	movne	r4, r6
}
 23fceb4:	4620      	mov	r0, r4
 23fceb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (size > 0) {
 23fceba:	1b2d      	subs	r5, r5, r4
        pos += actuallyRead;
 23fcebc:	4426      	add	r6, r4
    while (size > 0) {
 23fcebe:	d1e2      	bne.n	23fce86 <_ZN8particle16ApplicationAsset4readEPcj+0x1e>
    return pos;
 23fcec0:	4634      	mov	r4, r6
 23fcec2:	e7f7      	b.n	23fceb4 <_ZN8particle16ApplicationAsset4readEPcj+0x4c>
    CHECK_TRUE(buffer && size, SYSTEM_ERROR_INVALID_ARGUMENT);
 23fcec4:	4c00      	ldr	r4, [pc, #0]	; (23fcec8 <_ZN8particle16ApplicationAsset4readEPcj+0x60>)
 23fcec6:	e7f5      	b.n	23fceb4 <_ZN8particle16ApplicationAsset4readEPcj+0x4c>
 23fcec8:	fffffef2 	.word	0xfffffef2

023fcecc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fcecc:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fcece:	6843      	ldr	r3, [r0, #4]
    {
 23fced0:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fced2:	3b01      	subs	r3, #1
 23fced4:	6043      	str	r3, [r0, #4]
 23fced6:	b963      	cbnz	r3, 23fcef2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fced8:	6803      	ldr	r3, [r0, #0]
 23fceda:	689b      	ldr	r3, [r3, #8]
 23fcedc:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fcede:	68a3      	ldr	r3, [r4, #8]
 23fcee0:	3b01      	subs	r3, #1
 23fcee2:	60a3      	str	r3, [r4, #8]
 23fcee4:	b92b      	cbnz	r3, 23fcef2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fcee6:	6823      	ldr	r3, [r4, #0]
 23fcee8:	4620      	mov	r0, r4
    }
 23fceea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fceee:	68db      	ldr	r3, [r3, #12]
 23fcef0:	4718      	bx	r3
    }
 23fcef2:	bd10      	pop	{r4, pc}

023fcef4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fcef4:	b570      	push	{r4, r5, r6, lr}
 23fcef6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fcef8:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fcefc:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fcf00:	42ae      	cmp	r6, r5
 23fcf02:	d004      	beq.n	23fcf0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fcf04:	4628      	mov	r0, r5
 23fcf06:	f001 fbd7 	bl	23fe6b8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fcf0a:	3510      	adds	r5, #16
 23fcf0c:	e7f8      	b.n	23fcf00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fcf0e:	6820      	ldr	r0, [r4, #0]
 23fcf10:	f7ff fd3e 	bl	23fc990 <free>
    AllocatorT::free(data_);
}
 23fcf14:	4620      	mov	r0, r4
 23fcf16:	bd70      	pop	{r4, r5, r6, pc}

023fcf18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fcf18:	2300      	movs	r3, #0
 23fcf1a:	4802      	ldr	r0, [pc, #8]	; (23fcf24 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fcf1c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fcf1e:	f7ff b91d 	b.w	23fc15c <os_mutex_recursive_create>
 23fcf22:	bf00      	nop
 23fcf24:	1007ae4c 	.word	0x1007ae4c

023fcf28 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 23fcf28:	b510      	push	{r4, lr}
 23fcf2a:	b088      	sub	sp, #32
 23fcf2c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 23fcf2e:	4668      	mov	r0, sp
 23fcf30:	f001 fc0d 	bl	23fe74e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 23fcf34:	4669      	mov	r1, sp
 23fcf36:	a804      	add	r0, sp, #16
 23fcf38:	f001 fc55 	bl	23fe7e6 <_ZN6StringC1ERKS_>
 23fcf3c:	a804      	add	r0, sp, #16
 23fcf3e:	47a0      	blx	r4
 23fcf40:	4604      	mov	r4, r0
 23fcf42:	a804      	add	r0, sp, #16
 23fcf44:	f001 fbb8 	bl	23fe6b8 <_ZN6StringD1Ev>
    String p(param);
 23fcf48:	4668      	mov	r0, sp
 23fcf4a:	f001 fbb5 	bl	23fe6b8 <_ZN6StringD1Ev>
}
 23fcf4e:	4620      	mov	r0, r4
 23fcf50:	b008      	add	sp, #32
 23fcf52:	bd10      	pop	{r4, pc}

023fcf54 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 23fcf54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 23fcf56:	2300      	movs	r3, #0
         size = sizeof(*this);
 23fcf58:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 23fcf5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 23fcf5e:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 23fcf60:	4669      	mov	r1, sp
 23fcf62:	461a      	mov	r2, r3
 23fcf64:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 23fcf66:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 23fcf6a:	f8ad 4000 	strh.w	r4, [sp]
 23fcf6e:	f7ff fc2f 	bl	23fc7d0 <spark_function>
}
 23fcf72:	b004      	add	sp, #16
 23fcf74:	bd10      	pop	{r4, pc}

023fcf76 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fcf76:	2200      	movs	r2, #0
 23fcf78:	6840      	ldr	r0, [r0, #4]
 23fcf7a:	4611      	mov	r1, r2
 23fcf7c:	f7ff bcb4 	b.w	23fc8e8 <network_listening>

023fcf80 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fcf80:	2200      	movs	r2, #0
 23fcf82:	6840      	ldr	r0, [r0, #4]
 23fcf84:	4611      	mov	r1, r2
 23fcf86:	f7ff bccb 	b.w	23fc920 <network_get_listen_timeout>

023fcf8a <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fcf8a:	2200      	movs	r2, #0
 23fcf8c:	6840      	ldr	r0, [r0, #4]
 23fcf8e:	f7ff bcb9 	b.w	23fc904 <network_set_listen_timeout>

023fcf92 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fcf92:	2200      	movs	r2, #0
 23fcf94:	6840      	ldr	r0, [r0, #4]
 23fcf96:	f081 0101 	eor.w	r1, r1, #1
 23fcf9a:	f7ff bc97 	b.w	23fc8cc <network_listen>

023fcf9e <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fcf9e:	2300      	movs	r3, #0
 23fcfa0:	6840      	ldr	r0, [r0, #4]
 23fcfa2:	461a      	mov	r2, r3
 23fcfa4:	4619      	mov	r1, r3
 23fcfa6:	f7ff bc83 	b.w	23fc8b0 <network_off>

023fcfaa <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fcfaa:	2300      	movs	r3, #0
 23fcfac:	6840      	ldr	r0, [r0, #4]
 23fcfae:	461a      	mov	r2, r3
 23fcfb0:	4619      	mov	r1, r3
 23fcfb2:	f7ff bc6f 	b.w	23fc894 <network_on>

023fcfb6 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fcfb6:	2200      	movs	r2, #0
 23fcfb8:	6840      	ldr	r0, [r0, #4]
 23fcfba:	4611      	mov	r1, r2
 23fcfbc:	f7ff bc5c 	b.w	23fc878 <network_ready>

023fcfc0 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fcfc0:	2200      	movs	r2, #0
 23fcfc2:	6840      	ldr	r0, [r0, #4]
 23fcfc4:	4611      	mov	r1, r2
 23fcfc6:	f7ff bc3b 	b.w	23fc840 <network_connecting>

023fcfca <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fcfca:	2200      	movs	r2, #0
 23fcfcc:	2102      	movs	r1, #2
 23fcfce:	6840      	ldr	r0, [r0, #4]
 23fcfd0:	f7ff bc44 	b.w	23fc85c <network_disconnect>

023fcfd4 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fcfd4:	2300      	movs	r3, #0
 23fcfd6:	6840      	ldr	r0, [r0, #4]
 23fcfd8:	461a      	mov	r2, r3
 23fcfda:	f7ff bc23 	b.w	23fc824 <network_connect>
	...

023fcfe0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fcfe0:	2203      	movs	r2, #3
 23fcfe2:	4b02      	ldr	r3, [pc, #8]	; (23fcfec <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fcfe4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fcfe6:	4a02      	ldr	r2, [pc, #8]	; (23fcff0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fcfe8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fcfea:	4770      	bx	lr
 23fcfec:	1007ae50 	.word	0x1007ae50
 23fcff0:	023ffb0c 	.word	0x023ffb0c

023fcff4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fcff4:	4770      	bx	lr

023fcff6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fcff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcff8:	4606      	mov	r6, r0
 23fcffa:	4615      	mov	r5, r2
 23fcffc:	460c      	mov	r4, r1
 23fcffe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fd000:	42bc      	cmp	r4, r7
 23fd002:	d006      	beq.n	23fd012 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fd004:	6833      	ldr	r3, [r6, #0]
 23fd006:	4630      	mov	r0, r6
 23fd008:	689b      	ldr	r3, [r3, #8]
 23fd00a:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fd00e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fd010:	e7f6      	b.n	23fd000 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fd012:	4628      	mov	r0, r5
 23fd014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd016 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fd016:	2200      	movs	r2, #0
 23fd018:	7c00      	ldrb	r0, [r0, #16]
 23fd01a:	f7ff b939 	b.w	23fc290 <hal_i2c_write>

023fd01e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fd01e:	2100      	movs	r1, #0
 23fd020:	7c00      	ldrb	r0, [r0, #16]
 23fd022:	f7ff b943 	b.w	23fc2ac <hal_i2c_available>

023fd026 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fd026:	2100      	movs	r1, #0
 23fd028:	7c00      	ldrb	r0, [r0, #16]
 23fd02a:	f7ff b94d 	b.w	23fc2c8 <hal_i2c_read>

023fd02e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fd02e:	2100      	movs	r1, #0
 23fd030:	7c00      	ldrb	r0, [r0, #16]
 23fd032:	f7ff b957 	b.w	23fc2e4 <hal_i2c_peek>

023fd036 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fd036:	2100      	movs	r1, #0
 23fd038:	7c00      	ldrb	r0, [r0, #16]
 23fd03a:	f7ff b961 	b.w	23fc300 <hal_i2c_flush>

023fd03e <_ZN7TwoWireD0Ev>:
 23fd03e:	b510      	push	{r4, lr}
 23fd040:	4604      	mov	r4, r0
 23fd042:	2114      	movs	r1, #20
 23fd044:	f7fe fb3d 	bl	23fb6c2 <_ZdlPvj>
 23fd048:	4620      	mov	r0, r4
 23fd04a:	bd10      	pop	{r4, pc}

023fd04c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd04c:	b538      	push	{r3, r4, r5, lr}
 23fd04e:	4604      	mov	r4, r0
 23fd050:	4615      	mov	r5, r2
 23fd052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd056:	2200      	movs	r2, #0
 23fd058:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fd05c:	4b09      	ldr	r3, [pc, #36]	; (23fd084 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fd05e:	4608      	mov	r0, r1
  _i2c = i2c;
 23fd060:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd062:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fd064:	4629      	mov	r1, r5
 23fd066:	f7ff f967 	bl	23fc338 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd06a:	30bf      	adds	r0, #191	; 0xbf
 23fd06c:	d108      	bne.n	23fd080 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fd06e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd070:	07db      	lsls	r3, r3, #31
 23fd072:	d505      	bpl.n	23fd080 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fd074:	6868      	ldr	r0, [r5, #4]
 23fd076:	f7ff fc8b 	bl	23fc990 <free>
    free(conf.tx_buffer);
 23fd07a:	68e8      	ldr	r0, [r5, #12]
 23fd07c:	f7ff fc88 	bl	23fc990 <free>
}
 23fd080:	4620      	mov	r0, r4
 23fd082:	bd38      	pop	{r3, r4, r5, pc}
 23fd084:	023ffb48 	.word	0x023ffb48

023fd088 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fd088:	4770      	bx	lr

023fd08a <_ZN9IPAddressD0Ev>:
 23fd08a:	b510      	push	{r4, lr}
 23fd08c:	4604      	mov	r4, r0
 23fd08e:	2118      	movs	r1, #24
 23fd090:	f7fe fb17 	bl	23fb6c2 <_ZdlPvj>
 23fd094:	4620      	mov	r0, r4
 23fd096:	bd10      	pop	{r4, pc}

023fd098 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fd098:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fd09a:	7d03      	ldrb	r3, [r0, #20]
{
 23fd09c:	460e      	mov	r6, r1
	if (address.v==6) {
 23fd09e:	2b06      	cmp	r3, #6
 23fd0a0:	f04f 0400 	mov.w	r4, #0
{
 23fd0a4:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd0a6:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fd0aa:	d012      	beq.n	23fd0d2 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fd0ac:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fd0b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fd0b4:	220a      	movs	r2, #10
 23fd0b6:	4630      	mov	r0, r6
 23fd0b8:	f001 facf 	bl	23fe65a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fd0bc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fd0be:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fd0c0:	d019      	beq.n	23fd0f6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fd0c2:	2c00      	cmp	r4, #0
 23fd0c4:	d0f4      	beq.n	23fd0b0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fd0c6:	212e      	movs	r1, #46	; 0x2e
 23fd0c8:	4630      	mov	r0, r6
 23fd0ca:	f001 fac3 	bl	23fe654 <_ZN5Print5printEc>
 23fd0ce:	4404      	add	r4, r0
 23fd0d0:	e7ee      	b.n	23fd0b0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd0d2:	232f      	movs	r3, #47	; 0x2f
 23fd0d4:	466a      	mov	r2, sp
 23fd0d6:	4639      	mov	r1, r7
 23fd0d8:	200a      	movs	r0, #10
		buf[0] = 0;
 23fd0da:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd0de:	f7ff f939 	bl	23fc354 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fd0e2:	4668      	mov	r0, sp
 23fd0e4:	f7fe fac2 	bl	23fb66c <strlen>
 23fd0e8:	6833      	ldr	r3, [r6, #0]
 23fd0ea:	4602      	mov	r2, r0
 23fd0ec:	4669      	mov	r1, sp
 23fd0ee:	4630      	mov	r0, r6
 23fd0f0:	68db      	ldr	r3, [r3, #12]
 23fd0f2:	4798      	blx	r3
 23fd0f4:	4604      	mov	r4, r0
    }
    return n;
}
 23fd0f6:	4620      	mov	r0, r4
 23fd0f8:	b00d      	add	sp, #52	; 0x34
 23fd0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fd0fc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fd0fc:	b510      	push	{r4, lr}
 23fd0fe:	4604      	mov	r4, r0
 23fd100:	4b04      	ldr	r3, [pc, #16]	; (23fd114 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fd102:	2211      	movs	r2, #17
 23fd104:	2100      	movs	r1, #0
 23fd106:	f840 3b04 	str.w	r3, [r0], #4
 23fd10a:	f002 f996 	bl	23ff43a <memset>
}
 23fd10e:	4620      	mov	r0, r4
 23fd110:	bd10      	pop	{r4, pc}
 23fd112:	bf00      	nop
 23fd114:	023ffb70 	.word	0x023ffb70

023fd118 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fd118:	4603      	mov	r3, r0
 23fd11a:	4a07      	ldr	r2, [pc, #28]	; (23fd138 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fd11c:	b510      	push	{r4, lr}
 23fd11e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fd122:	f101 0210 	add.w	r2, r1, #16
 23fd126:	f851 4b04 	ldr.w	r4, [r1], #4
 23fd12a:	4291      	cmp	r1, r2
 23fd12c:	f843 4b04 	str.w	r4, [r3], #4
 23fd130:	d1f9      	bne.n	23fd126 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fd132:	780a      	ldrb	r2, [r1, #0]
 23fd134:	701a      	strb	r2, [r3, #0]
}
 23fd136:	bd10      	pop	{r4, pc}
 23fd138:	023ffb70 	.word	0x023ffb70

023fd13c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fd13c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fd13e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fd142:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fd146:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fd14a:	2304      	movs	r3, #4
 23fd14c:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fd150:	6041      	str	r1, [r0, #4]
 23fd152:	7503      	strb	r3, [r0, #20]
}
 23fd154:	bd10      	pop	{r4, pc}
	...

023fd158 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fd158:	b507      	push	{r0, r1, r2, lr}
 23fd15a:	4b06      	ldr	r3, [pc, #24]	; (23fd174 <_ZN9IPAddressC1EPKh+0x1c>)
 23fd15c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fd15e:	78cb      	ldrb	r3, [r1, #3]
 23fd160:	9300      	str	r3, [sp, #0]
 23fd162:	788b      	ldrb	r3, [r1, #2]
 23fd164:	784a      	ldrb	r2, [r1, #1]
 23fd166:	7809      	ldrb	r1, [r1, #0]
 23fd168:	f7ff ffe8 	bl	23fd13c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fd16c:	b003      	add	sp, #12
 23fd16e:	f85d fb04 	ldr.w	pc, [sp], #4
 23fd172:	bf00      	nop
 23fd174:	023ffb70 	.word	0x023ffb70

023fd178 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fd178:	2201      	movs	r2, #1
 23fd17a:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fd17e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fd182:	4618      	mov	r0, r3
 23fd184:	2901      	cmp	r1, #1
 23fd186:	d108      	bne.n	23fd19a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fd188:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fd18c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fd190:	3a01      	subs	r2, #1
 23fd192:	f103 0310 	add.w	r3, r3, #16
 23fd196:	d1f2      	bne.n	23fd17e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fd198:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fd19a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fd19c:	bf04      	itt	eq
 23fd19e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fd1a2:	1852      	addeq	r2, r2, r1
 23fd1a4:	e7f4      	b.n	23fd190 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fd1a6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fd1a6:	b40e      	push	{r1, r2, r3}
 23fd1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd1aa:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd1ac:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fd1ae:	af00      	add	r7, sp, #0
 23fd1b0:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fd1b4:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd1b8:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd1ba:	462b      	mov	r3, r5
 23fd1bc:	1878      	adds	r0, r7, r1
 23fd1be:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fd1c0:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd1c2:	f7ff fc01 	bl	23fc9c8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fd1c6:	280f      	cmp	r0, #15
 23fd1c8:	687a      	ldr	r2, [r7, #4]
 23fd1ca:	d91a      	bls.n	23fd202 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fd1cc:	f100 0308 	add.w	r3, r0, #8
 23fd1d0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fd1d4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fd1d6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd1da:	1c41      	adds	r1, r0, #1
 23fd1dc:	462b      	mov	r3, r5
 23fd1de:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fd1e0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd1e2:	f7ff fbf1 	bl	23fc9c8 <vsnprintf>
        if (n > 0) {
 23fd1e6:	1e02      	subs	r2, r0, #0
 23fd1e8:	dd04      	ble.n	23fd1f4 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fd1ea:	6823      	ldr	r3, [r4, #0]
 23fd1ec:	4669      	mov	r1, sp
 23fd1ee:	4620      	mov	r0, r4
 23fd1f0:	689b      	ldr	r3, [r3, #8]
 23fd1f2:	4798      	blx	r3
 23fd1f4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fd1f6:	3720      	adds	r7, #32
 23fd1f8:	46bd      	mov	sp, r7
 23fd1fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd1fe:	b003      	add	sp, #12
 23fd200:	4770      	bx	lr
    } else if (n > 0) {
 23fd202:	2800      	cmp	r0, #0
 23fd204:	d0f7      	beq.n	23fd1f6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fd206:	6823      	ldr	r3, [r4, #0]
 23fd208:	4602      	mov	r2, r0
 23fd20a:	689b      	ldr	r3, [r3, #8]
 23fd20c:	4620      	mov	r0, r4
 23fd20e:	f107 0110 	add.w	r1, r7, #16
 23fd212:	4798      	blx	r3
}
 23fd214:	e7ef      	b.n	23fd1f6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fd216 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fd216:	b538      	push	{r3, r4, r5, lr}
 23fd218:	680b      	ldr	r3, [r1, #0]
 23fd21a:	4604      	mov	r4, r0
 23fd21c:	6003      	str	r3, [r0, #0]
 23fd21e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fd220:	6843      	ldr	r3, [r0, #4]
 23fd222:	429d      	cmp	r5, r3
 23fd224:	d008      	beq.n	23fd238 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fd226:	b115      	cbz	r5, 23fd22e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fd228:	686b      	ldr	r3, [r5, #4]
 23fd22a:	3301      	adds	r3, #1
 23fd22c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fd22e:	6860      	ldr	r0, [r4, #4]
 23fd230:	b108      	cbz	r0, 23fd236 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fd232:	f7ff fe4b 	bl	23fcecc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fd236:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fd238:	bd38      	pop	{r3, r4, r5, pc}

023fd23a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fd23a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fd23c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fd23e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fd242:	2201      	movs	r2, #1
 23fd244:	689b      	ldr	r3, [r3, #8]
 23fd246:	f10d 0107 	add.w	r1, sp, #7
 23fd24a:	4798      	blx	r3
}
 23fd24c:	b003      	add	sp, #12
 23fd24e:	f85d fb04 	ldr.w	pc, [sp], #4

023fd252 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fd252:	460b      	mov	r3, r1
 23fd254:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fd256:	2200      	movs	r2, #0
 23fd258:	b510      	push	{r4, lr}
 23fd25a:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fd25c:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fd260:	6083      	str	r3, [r0, #8]
    if (t) {
 23fd262:	b90b      	cbnz	r3, 23fd268 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fd264:	4620      	mov	r0, r4
 23fd266:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fd268:	f7ff ffd5 	bl	23fd216 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fd26c:	e7fa      	b.n	23fd264 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fd26e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fd26e:	6883      	ldr	r3, [r0, #8]
 23fd270:	b1eb      	cbz	r3, 23fd2ae <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fd272:	781a      	ldrb	r2, [r3, #0]
 23fd274:	2a03      	cmp	r2, #3
 23fd276:	d81a      	bhi.n	23fd2ae <_ZNK5spark9JSONValue4typeEv+0x40>
 23fd278:	e8df f002 	tbb	[pc, r2]
 23fd27c:	1b021704 	.word	0x1b021704
 23fd280:	2005      	movs	r0, #5
 23fd282:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fd284:	6802      	ldr	r2, [r0, #0]
 23fd286:	685b      	ldr	r3, [r3, #4]
 23fd288:	6852      	ldr	r2, [r2, #4]
 23fd28a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fd28c:	282d      	cmp	r0, #45	; 0x2d
 23fd28e:	d012      	beq.n	23fd2b6 <_ZNK5spark9JSONValue4typeEv+0x48>
 23fd290:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fd294:	2b09      	cmp	r3, #9
 23fd296:	d90e      	bls.n	23fd2b6 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fd298:	2874      	cmp	r0, #116	; 0x74
 23fd29a:	d00e      	beq.n	23fd2ba <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fd29c:	2866      	cmp	r0, #102	; 0x66
 23fd29e:	d00c      	beq.n	23fd2ba <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fd2a0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fd2a4:	4258      	negs	r0, r3
 23fd2a6:	4158      	adcs	r0, r3
 23fd2a8:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fd2aa:	2006      	movs	r0, #6
 23fd2ac:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fd2ae:	2000      	movs	r0, #0
 23fd2b0:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fd2b2:	2004      	movs	r0, #4
 23fd2b4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fd2b6:	2003      	movs	r0, #3
 23fd2b8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fd2ba:	2002      	movs	r0, #2
}
 23fd2bc:	4770      	bx	lr

023fd2be <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fd2be:	b510      	push	{r4, lr}
 23fd2c0:	4604      	mov	r4, r0
    switch (type()) {
 23fd2c2:	f7ff ffd4 	bl	23fd26e <_ZNK5spark9JSONValue4typeEv>
 23fd2c6:	2802      	cmp	r0, #2
 23fd2c8:	d00e      	beq.n	23fd2e8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fd2ca:	1ec3      	subs	r3, r0, #3
 23fd2cc:	b2db      	uxtb	r3, r3
 23fd2ce:	2b01      	cmp	r3, #1
 23fd2d0:	d814      	bhi.n	23fd2fc <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fd2d2:	6822      	ldr	r2, [r4, #0]
 23fd2d4:	68a3      	ldr	r3, [r4, #8]
 23fd2d6:	6850      	ldr	r0, [r2, #4]
 23fd2d8:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fd2da:	220a      	movs	r2, #10
}
 23fd2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fd2e0:	2100      	movs	r1, #0
 23fd2e2:	4418      	add	r0, r3
 23fd2e4:	f002 b9aa 	b.w	23ff63c <strtol>
        const char* const s = d_->json + t_->start;
 23fd2e8:	6822      	ldr	r2, [r4, #0]
 23fd2ea:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fd2ec:	6852      	ldr	r2, [r2, #4]
 23fd2ee:	685b      	ldr	r3, [r3, #4]
 23fd2f0:	5cd0      	ldrb	r0, [r2, r3]
 23fd2f2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fd2f6:	4258      	negs	r0, r3
 23fd2f8:	4158      	adcs	r0, r3
}
 23fd2fa:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fd2fc:	2000      	movs	r0, #0
 23fd2fe:	e7fc      	b.n	23fd2fa <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fd300 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fd300:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fd302:	2300      	movs	r3, #0
 23fd304:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fd306:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fd30a:	480e      	ldr	r0, [pc, #56]	; (23fd344 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fd30c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fd310:	b1a9      	cbz	r1, 23fd33e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fd312:	780b      	ldrb	r3, [r1, #0]
 23fd314:	2b03      	cmp	r3, #3
 23fd316:	d006      	beq.n	23fd326 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fd318:	b98b      	cbnz	r3, 23fd33e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fd31a:	6813      	ldr	r3, [r2, #0]
 23fd31c:	6858      	ldr	r0, [r3, #4]
 23fd31e:	684b      	ldr	r3, [r1, #4]
 23fd320:	5cc3      	ldrb	r3, [r0, r3]
 23fd322:	2b6e      	cmp	r3, #110	; 0x6e
 23fd324:	d007      	beq.n	23fd336 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fd326:	6813      	ldr	r3, [r2, #0]
 23fd328:	684d      	ldr	r5, [r1, #4]
 23fd32a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fd32c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fd32e:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fd330:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fd332:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fd334:	60e3      	str	r3, [r4, #12]
 23fd336:	4611      	mov	r1, r2
 23fd338:	4620      	mov	r0, r4
 23fd33a:	f7ff ff6c 	bl	23fd216 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fd33e:	4620      	mov	r0, r4
 23fd340:	bd38      	pop	{r3, r4, r5, pc}
 23fd342:	bf00      	nop
 23fd344:	023ffbdf 	.word	0x023ffbdf

023fd348 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fd348:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fd34a:	2500      	movs	r5, #0
 23fd34c:	460b      	mov	r3, r1
 23fd34e:	4604      	mov	r4, r0
 23fd350:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fd352:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fd356:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fd35a:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fd35e:	b14b      	cbz	r3, 23fd374 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fd360:	781a      	ldrb	r2, [r3, #0]
 23fd362:	2a01      	cmp	r2, #1
 23fd364:	d106      	bne.n	23fd374 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fd366:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fd36a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fd36c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fd36e:	6143      	str	r3, [r0, #20]
 23fd370:	f7ff ff51 	bl	23fd216 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fd374:	4620      	mov	r0, r4
 23fd376:	bd38      	pop	{r3, r4, r5, pc}

023fd378 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fd378:	b510      	push	{r4, lr}
    if (!n_) {
 23fd37a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fd37c:	4604      	mov	r4, r0
    if (!n_) {
 23fd37e:	b163      	cbz	r3, 23fd39a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fd380:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fd382:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fd384:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fd386:	3010      	adds	r0, #16
 23fd388:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fd38a:	6120      	str	r0, [r4, #16]
    --n_;
 23fd38c:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fd38e:	b113      	cbz	r3, 23fd396 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fd390:	f7ff fef2 	bl	23fd178 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fd394:	60a0      	str	r0, [r4, #8]
    return true;
 23fd396:	2001      	movs	r0, #1
 23fd398:	e000      	b.n	23fd39c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fd39a:	4618      	mov	r0, r3
}
 23fd39c:	bd10      	pop	{r4, pc}

023fd39e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fd39e:	b510      	push	{r4, lr}
    write('}');
 23fd3a0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fd3a2:	4604      	mov	r4, r0
    write('}');
 23fd3a4:	f7ff ff49 	bl	23fd23a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fd3a8:	2301      	movs	r3, #1
}
 23fd3aa:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd3ac:	7123      	strb	r3, [r4, #4]
}
 23fd3ae:	bd10      	pop	{r4, pc}

023fd3b0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fd3b0:	b508      	push	{r3, lr}
    switch (state_) {
 23fd3b2:	7903      	ldrb	r3, [r0, #4]
 23fd3b4:	2b01      	cmp	r3, #1
 23fd3b6:	d002      	beq.n	23fd3be <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fd3b8:	2b02      	cmp	r3, #2
 23fd3ba:	d004      	beq.n	23fd3c6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fd3bc:	bd08      	pop	{r3, pc}
        write(',');
 23fd3be:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fd3c0:	f7ff ff3b 	bl	23fd23a <_ZN5spark10JSONWriter5writeEc>
}
 23fd3c4:	e7fa      	b.n	23fd3bc <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fd3c6:	213a      	movs	r1, #58	; 0x3a
 23fd3c8:	e7fa      	b.n	23fd3c0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fd3ca <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fd3ca:	b510      	push	{r4, lr}
 23fd3cc:	4604      	mov	r4, r0
    writeSeparator();
 23fd3ce:	f7ff ffef 	bl	23fd3b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fd3d2:	4620      	mov	r0, r4
 23fd3d4:	217b      	movs	r1, #123	; 0x7b
 23fd3d6:	f7ff ff30 	bl	23fd23a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fd3da:	2300      	movs	r3, #0
}
 23fd3dc:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fd3de:	7123      	strb	r3, [r4, #4]
}
 23fd3e0:	bd10      	pop	{r4, pc}
	...

023fd3e4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fd3e4:	b513      	push	{r0, r1, r4, lr}
 23fd3e6:	4604      	mov	r4, r0
 23fd3e8:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fd3ea:	f7ff ffe1 	bl	23fd3b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fd3ee:	6823      	ldr	r3, [r4, #0]
 23fd3f0:	4620      	mov	r0, r4
 23fd3f2:	68db      	ldr	r3, [r3, #12]
 23fd3f4:	9a01      	ldr	r2, [sp, #4]
 23fd3f6:	4903      	ldr	r1, [pc, #12]	; (23fd404 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fd3f8:	4798      	blx	r3
    state_ = NEXT;
 23fd3fa:	2301      	movs	r3, #1
}
 23fd3fc:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd3fe:	7123      	strb	r3, [r4, #4]
}
 23fd400:	b002      	add	sp, #8
 23fd402:	bd10      	pop	{r4, pc}
 23fd404:	023ffb7c 	.word	0x023ffb7c

023fd408 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fd408:	b513      	push	{r0, r1, r4, lr}
 23fd40a:	4604      	mov	r4, r0
 23fd40c:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fd40e:	f7ff ffcf 	bl	23fd3b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fd412:	6823      	ldr	r3, [r4, #0]
 23fd414:	4620      	mov	r0, r4
 23fd416:	68db      	ldr	r3, [r3, #12]
 23fd418:	9a01      	ldr	r2, [sp, #4]
 23fd41a:	4903      	ldr	r1, [pc, #12]	; (23fd428 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fd41c:	4798      	blx	r3
    state_ = NEXT;
 23fd41e:	2301      	movs	r3, #1
}
 23fd420:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd422:	7123      	strb	r3, [r4, #4]
}
 23fd424:	b002      	add	sp, #8
 23fd426:	bd10      	pop	{r4, pc}
 23fd428:	023ffb7f 	.word	0x023ffb7f

023fd42c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fd42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fd430:	460d      	mov	r5, r1
 23fd432:	4690      	mov	r8, r2
    write('"');
 23fd434:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fd436:	4604      	mov	r4, r0
 23fd438:	462f      	mov	r7, r5
    write('"');
 23fd43a:	f7ff fefe 	bl	23fd23a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fd43e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fd4e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fd442:	44a8      	add	r8, r5
    while (s != end) {
 23fd444:	4547      	cmp	r7, r8
 23fd446:	46ba      	mov	sl, r7
 23fd448:	d03d      	beq.n	23fd4c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fd44a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fd44e:	2e22      	cmp	r6, #34	; 0x22
 23fd450:	d006      	beq.n	23fd460 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fd452:	2e5c      	cmp	r6, #92	; 0x5c
 23fd454:	d004      	beq.n	23fd460 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fd456:	4630      	mov	r0, r6
 23fd458:	f001 ffc0 	bl	23ff3dc <isprint>
 23fd45c:	2800      	cmp	r0, #0
 23fd45e:	d1f1      	bne.n	23fd444 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fd460:	6823      	ldr	r3, [r4, #0]
 23fd462:	4629      	mov	r1, r5
 23fd464:	4620      	mov	r0, r4
 23fd466:	689b      	ldr	r3, [r3, #8]
 23fd468:	ebaa 0205 	sub.w	r2, sl, r5
 23fd46c:	4798      	blx	r3
            write('\\');
 23fd46e:	215c      	movs	r1, #92	; 0x5c
 23fd470:	4620      	mov	r0, r4
 23fd472:	f7ff fee2 	bl	23fd23a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fd476:	2e0d      	cmp	r6, #13
 23fd478:	d80a      	bhi.n	23fd490 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fd47a:	2e07      	cmp	r6, #7
 23fd47c:	d91c      	bls.n	23fd4b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fd47e:	f1a6 0308 	sub.w	r3, r6, #8
 23fd482:	2b05      	cmp	r3, #5
 23fd484:	d818      	bhi.n	23fd4b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fd486:	e8df f003 	tbb	[pc, r3]
 23fd48a:	0f0d      	.short	0x0f0d
 23fd48c:	15131711 	.word	0x15131711
 23fd490:	2e22      	cmp	r6, #34	; 0x22
 23fd492:	d001      	beq.n	23fd498 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fd494:	2e5c      	cmp	r6, #92	; 0x5c
 23fd496:	d10f      	bne.n	23fd4b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fd498:	4631      	mov	r1, r6
                write('b');
 23fd49a:	4620      	mov	r0, r4
 23fd49c:	f7ff fecd 	bl	23fd23a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fd4a0:	463d      	mov	r5, r7
    while (s != end) {
 23fd4a2:	e7cf      	b.n	23fd444 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fd4a4:	2162      	movs	r1, #98	; 0x62
 23fd4a6:	e7f8      	b.n	23fd49a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fd4a8:	2174      	movs	r1, #116	; 0x74
 23fd4aa:	e7f6      	b.n	23fd49a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fd4ac:	216e      	movs	r1, #110	; 0x6e
 23fd4ae:	e7f4      	b.n	23fd49a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fd4b0:	2166      	movs	r1, #102	; 0x66
 23fd4b2:	e7f2      	b.n	23fd49a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fd4b4:	2172      	movs	r1, #114	; 0x72
 23fd4b6:	e7f0      	b.n	23fd49a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fd4b8:	6823      	ldr	r3, [r4, #0]
 23fd4ba:	4632      	mov	r2, r6
 23fd4bc:	4649      	mov	r1, r9
 23fd4be:	4620      	mov	r0, r4
 23fd4c0:	68db      	ldr	r3, [r3, #12]
 23fd4c2:	4798      	blx	r3
                break;
 23fd4c4:	e7ec      	b.n	23fd4a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fd4c6:	42bd      	cmp	r5, r7
 23fd4c8:	d005      	beq.n	23fd4d6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fd4ca:	6823      	ldr	r3, [r4, #0]
 23fd4cc:	4629      	mov	r1, r5
 23fd4ce:	4620      	mov	r0, r4
 23fd4d0:	689b      	ldr	r3, [r3, #8]
 23fd4d2:	1b7a      	subs	r2, r7, r5
 23fd4d4:	4798      	blx	r3
    }
    write('"');
 23fd4d6:	2122      	movs	r1, #34	; 0x22
 23fd4d8:	4620      	mov	r0, r4
 23fd4da:	f7ff feae 	bl	23fd23a <_ZN5spark10JSONWriter5writeEc>
}
 23fd4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fd4e2:	bf00      	nop
 23fd4e4:	023ffb82 	.word	0x023ffb82

023fd4e8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fd4e8:	b513      	push	{r0, r1, r4, lr}
 23fd4ea:	4604      	mov	r4, r0
 23fd4ec:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fd4f0:	f7ff ff5e 	bl	23fd3b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fd4f4:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fd4f8:	4620      	mov	r0, r4
 23fd4fa:	f7ff ff97 	bl	23fd42c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fd4fe:	2302      	movs	r3, #2
}
 23fd500:	4620      	mov	r0, r4
    state_ = VALUE;
 23fd502:	7123      	strb	r3, [r4, #4]
}
 23fd504:	b002      	add	sp, #8
 23fd506:	bd10      	pop	{r4, pc}

023fd508 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fd508:	b513      	push	{r0, r1, r4, lr}
 23fd50a:	4604      	mov	r4, r0
 23fd50c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fd510:	f7ff ff4e 	bl	23fd3b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fd514:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fd518:	4620      	mov	r0, r4
 23fd51a:	f7ff ff87 	bl	23fd42c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fd51e:	2301      	movs	r3, #1
}
 23fd520:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd522:	7123      	strb	r3, [r4, #4]
}
 23fd524:	b002      	add	sp, #8
 23fd526:	bd10      	pop	{r4, pc}

023fd528 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fd528:	6880      	ldr	r0, [r0, #8]
 23fd52a:	6803      	ldr	r3, [r0, #0]
 23fd52c:	68db      	ldr	r3, [r3, #12]
 23fd52e:	4718      	bx	r3

023fd530 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fd530:	4770      	bx	lr

023fd532 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fd532:	4608      	mov	r0, r1
 23fd534:	b111      	cbz	r1, 23fd53c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fd536:	680b      	ldr	r3, [r1, #0]
 23fd538:	685b      	ldr	r3, [r3, #4]
 23fd53a:	4718      	bx	r3
}
 23fd53c:	4770      	bx	lr

023fd53e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fd53e:	4770      	bx	lr

023fd540 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd540:	4770      	bx	lr

023fd542 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fd542:	4770      	bx	lr

023fd544 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fd544:	4770      	bx	lr

023fd546 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fd546:	b538      	push	{r3, r4, r5, lr}
 23fd548:	4604      	mov	r4, r0
 23fd54a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fd54c:	6800      	ldr	r0, [r0, #0]
 23fd54e:	212e      	movs	r1, #46	; 0x2e
 23fd550:	f001 ffb7 	bl	23ff4c2 <strchrnul>
    size = s - category;
 23fd554:	6823      	ldr	r3, [r4, #0]
 23fd556:	1ac3      	subs	r3, r0, r3
 23fd558:	602b      	str	r3, [r5, #0]
    if (size) {
 23fd55a:	b123      	cbz	r3, 23fd566 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fd55c:	7803      	ldrb	r3, [r0, #0]
 23fd55e:	b103      	cbz	r3, 23fd562 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fd560:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23fd562:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd564:	6020      	str	r0, [r4, #0]
}
 23fd566:	4618      	mov	r0, r3
 23fd568:	bd38      	pop	{r3, r4, r5, pc}

023fd56a <_ZN5spark16JSONStreamWriterD0Ev>:
 23fd56a:	b510      	push	{r4, lr}
 23fd56c:	4604      	mov	r4, r0
 23fd56e:	210c      	movs	r1, #12
 23fd570:	f7fe f8a7 	bl	23fb6c2 <_ZdlPvj>
 23fd574:	4620      	mov	r0, r4
 23fd576:	bd10      	pop	{r4, pc}

023fd578 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fd578:	b510      	push	{r4, lr}
 23fd57a:	4604      	mov	r4, r0
 23fd57c:	2104      	movs	r1, #4
 23fd57e:	f7fe f8a0 	bl	23fb6c2 <_ZdlPvj>
 23fd582:	4620      	mov	r0, r4
 23fd584:	bd10      	pop	{r4, pc}

023fd586 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd586:	b510      	push	{r4, lr}
 23fd588:	4604      	mov	r4, r0
 23fd58a:	2104      	movs	r1, #4
 23fd58c:	f7fe f899 	bl	23fb6c2 <_ZdlPvj>
 23fd590:	4620      	mov	r0, r4
 23fd592:	bd10      	pop	{r4, pc}

023fd594 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fd594:	f7fe bdfe 	b.w	23fc194 <os_mutex_recursive_lock>

023fd598 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fd598:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fd59a:	f7fe f85d 	bl	23fb658 <strcmp>
}
 23fd59e:	fab0 f080 	clz	r0, r0
 23fd5a2:	0940      	lsrs	r0, r0, #5
 23fd5a4:	bd08      	pop	{r3, pc}

023fd5a6 <__tcf_1>:
 23fd5a6:	4770      	bx	lr

023fd5a8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fd5a8:	b510      	push	{r4, lr}
 23fd5aa:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fd5ac:	f001 fb4c 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fd5b0:	4284      	cmp	r4, r0
 23fd5b2:	d105      	bne.n	23fd5c0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fd5b4:	f001 fb48 	bl	23fec48 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fd5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fd5bc:	f001 bb36 	b.w	23fec2c <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fd5c0:	f001 fd60 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fd5c4:	4284      	cmp	r4, r0
 23fd5c6:	d105      	bne.n	23fd5d4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fd5c8:	f001 fd5c 	bl	23ff084 <_Z22__fetch_global_Serial1v>
}
 23fd5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fd5d0:	f001 bacd 	b.w	23feb6e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fd5d4:	b12c      	cbz	r4, 23fd5e2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fd5d6:	6823      	ldr	r3, [r4, #0]
 23fd5d8:	4620      	mov	r0, r4
}
 23fd5da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd5de:	685b      	ldr	r3, [r3, #4]
 23fd5e0:	4718      	bx	r3
 23fd5e2:	bd10      	pop	{r4, pc}

023fd5e4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd5e4:	680b      	ldr	r3, [r1, #0]
 23fd5e6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fd5e8:	684b      	ldr	r3, [r1, #4]
 23fd5ea:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fd5ec:	b113      	cbz	r3, 23fd5f4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fd5ee:	685a      	ldr	r2, [r3, #4]
 23fd5f0:	3201      	adds	r2, #1
 23fd5f2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd5f4:	4770      	bx	lr

023fd5f6 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fd5f6:	b513      	push	{r0, r1, r4, lr}
 23fd5f8:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fd5fa:	4608      	mov	r0, r1
 23fd5fc:	9101      	str	r1, [sp, #4]
 23fd5fe:	f7fe f835 	bl	23fb66c <strlen>
 23fd602:	4602      	mov	r2, r0
 23fd604:	4620      	mov	r0, r4
 23fd606:	9901      	ldr	r1, [sp, #4]
}
 23fd608:	b002      	add	sp, #8
 23fd60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fd60e:	f7ff bf7b 	b.w	23fd508 <_ZN5spark10JSONWriter5valueEPKcj>

023fd612 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fd612:	b513      	push	{r0, r1, r4, lr}
 23fd614:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fd616:	4608      	mov	r0, r1
 23fd618:	9101      	str	r1, [sp, #4]
 23fd61a:	f7fe f827 	bl	23fb66c <strlen>
 23fd61e:	4602      	mov	r2, r0
 23fd620:	4620      	mov	r0, r4
 23fd622:	6823      	ldr	r3, [r4, #0]
 23fd624:	9901      	ldr	r1, [sp, #4]
 23fd626:	68db      	ldr	r3, [r3, #12]
}
 23fd628:	b002      	add	sp, #8
 23fd62a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fd62e:	4718      	bx	r3

023fd630 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fd630:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fd632:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fd634:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fd638:	2201      	movs	r2, #1
 23fd63a:	68db      	ldr	r3, [r3, #12]
 23fd63c:	f10d 0107 	add.w	r1, sp, #7
 23fd640:	4798      	blx	r3
}
 23fd642:	b003      	add	sp, #12
 23fd644:	f85d fb04 	ldr.w	pc, [sp], #4

023fd648 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fd648:	680a      	ldr	r2, [r1, #0]
 23fd64a:	b510      	push	{r4, lr}
 23fd64c:	6002      	str	r2, [r0, #0]
 23fd64e:	684a      	ldr	r2, [r1, #4]
 23fd650:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fd652:	2200      	movs	r2, #0
 23fd654:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fd658:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd65a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd65c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd65e:	6084      	str	r4, [r0, #8]
 23fd660:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd662:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd664:	60c4      	str	r4, [r0, #12]
 23fd666:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd668:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd66a:	6104      	str	r4, [r0, #16]
 23fd66c:	bd10      	pop	{r4, pc}
	...

023fd670 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fd674:	f04f 0a14 	mov.w	sl, #20
 23fd678:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fd67c:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fd67e:	4645      	mov	r5, r8
 23fd680:	fb0a f404 	mul.w	r4, sl, r4
 23fd684:	9300      	str	r3, [sp, #0]
 23fd686:	4b17      	ldr	r3, [pc, #92]	; (23fd6e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd688:	10a4      	asrs	r4, r4, #2
 23fd68a:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fd68c:	2c00      	cmp	r4, #0
 23fd68e:	dd21      	ble.n	23fd6d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fd690:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fd692:	fb0a f006 	mul.w	r0, sl, r6
 23fd696:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fd69a:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fd69e:	463a      	mov	r2, r7
 23fd6a0:	455f      	cmp	r7, fp
 23fd6a2:	bf28      	it	cs
 23fd6a4:	465a      	movcs	r2, fp
 23fd6a6:	5828      	ldr	r0, [r5, r0]
 23fd6a8:	9101      	str	r1, [sp, #4]
 23fd6aa:	f001 ff1c 	bl	23ff4e6 <strncmp>
                if (cmp == 0) {
 23fd6ae:	2800      	cmp	r0, #0
 23fd6b0:	f04f 0301 	mov.w	r3, #1
 23fd6b4:	9901      	ldr	r1, [sp, #4]
 23fd6b6:	d10b      	bne.n	23fd6d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fd6b8:	455f      	cmp	r7, fp
 23fd6ba:	d103      	bne.n	23fd6c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fd6bc:	9a00      	ldr	r2, [sp, #0]
 23fd6be:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd6c0:	4634      	mov	r4, r6
 23fd6c2:	e7e3      	b.n	23fd68c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fd6c4:	d9fc      	bls.n	23fd6c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fd6c6:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fd6c8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fd6cc:	3e01      	subs	r6, #1
 23fd6ce:	e7f7      	b.n	23fd6c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fd6d0:	dbf9      	blt.n	23fd6c6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fd6d2:	e7f5      	b.n	23fd6c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fd6d4:	eba5 0508 	sub.w	r5, r5, r8
}
 23fd6d8:	4802      	ldr	r0, [pc, #8]	; (23fd6e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd6da:	10ad      	asrs	r5, r5, #2
 23fd6dc:	4368      	muls	r0, r5
 23fd6de:	b003      	add	sp, #12
 23fd6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd6e4:	cccccccd 	.word	0xcccccccd

023fd6e8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd6e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fd6ea:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fd6ec:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd6ee:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fd6f0:	b303      	cbz	r3, 23fd734 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fd6f2:	b1f9      	cbz	r1, 23fd734 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fd6f4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fd6f6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fd6fa:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fd6fc:	a903      	add	r1, sp, #12
 23fd6fe:	a801      	add	r0, sp, #4
 23fd700:	f7ff ff21 	bl	23fd546 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd704:	4601      	mov	r1, r0
 23fd706:	b1a8      	cbz	r0, 23fd734 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd708:	f10d 030b 	add.w	r3, sp, #11
 23fd70c:	4620      	mov	r0, r4
 23fd70e:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fd710:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd714:	f7ff ffac 	bl	23fd670 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fd718:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fd71c:	b153      	cbz	r3, 23fd734 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fd71e:	6823      	ldr	r3, [r4, #0]
 23fd720:	2414      	movs	r4, #20
 23fd722:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fd726:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fd72a:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fd72c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fd72e:	bfa8      	it	ge
 23fd730:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fd732:	e7e3      	b.n	23fd6fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fd734:	4628      	mov	r0, r5
 23fd736:	b004      	add	sp, #16
 23fd738:	bd70      	pop	{r4, r5, r6, pc}

023fd73a <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fd73a:	b40e      	push	{r1, r2, r3}
 23fd73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd73e:	b08c      	sub	sp, #48	; 0x30
 23fd740:	af00      	add	r7, sp, #0
 23fd742:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fd746:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd74a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd74c:	462b      	mov	r3, r5
 23fd74e:	2120      	movs	r1, #32
 23fd750:	f107 0010 	add.w	r0, r7, #16
 23fd754:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fd756:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd758:	f7ff f936 	bl	23fc9c8 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fd75c:	281f      	cmp	r0, #31
 23fd75e:	687a      	ldr	r2, [r7, #4]
 23fd760:	d91a      	bls.n	23fd798 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fd762:	f100 0308 	add.w	r3, r0, #8
 23fd766:	f023 0307 	bic.w	r3, r3, #7
        }
 23fd76a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fd76c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd770:	1c41      	adds	r1, r0, #1
 23fd772:	462b      	mov	r3, r5
 23fd774:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fd776:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd778:	f7ff f926 	bl	23fc9c8 <vsnprintf>
        if (n > 0) {
 23fd77c:	1e02      	subs	r2, r0, #0
 23fd77e:	dd04      	ble.n	23fd78a <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fd780:	6823      	ldr	r3, [r4, #0]
 23fd782:	4669      	mov	r1, sp
 23fd784:	4620      	mov	r0, r4
 23fd786:	68db      	ldr	r3, [r3, #12]
 23fd788:	4798      	blx	r3
 23fd78a:	46b5      	mov	sp, r6
}
 23fd78c:	3730      	adds	r7, #48	; 0x30
 23fd78e:	46bd      	mov	sp, r7
 23fd790:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd794:	b003      	add	sp, #12
 23fd796:	4770      	bx	lr
    } else if (n > 0) {
 23fd798:	2800      	cmp	r0, #0
 23fd79a:	d0f7      	beq.n	23fd78c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fd79c:	6823      	ldr	r3, [r4, #0]
 23fd79e:	4602      	mov	r2, r0
 23fd7a0:	68db      	ldr	r3, [r3, #12]
 23fd7a2:	4620      	mov	r0, r4
 23fd7a4:	f107 0110 	add.w	r1, r7, #16
 23fd7a8:	4798      	blx	r3
}
 23fd7aa:	e7ef      	b.n	23fd78c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fd7ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fd7ac:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fd7ae:	4c08      	ldr	r4, [pc, #32]	; (23fd7d0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fd7b0:	e8d4 3f8f 	ldab	r3, [r4]
 23fd7b4:	07db      	lsls	r3, r3, #31
 23fd7b6:	d409      	bmi.n	23fd7cc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd7b8:	4620      	mov	r0, r4
 23fd7ba:	f7fd ff91 	bl	23fb6e0 <__cxa_guard_acquire>
 23fd7be:	b128      	cbz	r0, 23fd7cc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd7c0:	4620      	mov	r0, r4
 23fd7c2:	f7fd ff92 	bl	23fb6ea <__cxa_guard_release>
 23fd7c6:	4803      	ldr	r0, [pc, #12]	; (23fd7d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fd7c8:	f001 fe02 	bl	23ff3d0 <atexit>
}
 23fd7cc:	4802      	ldr	r0, [pc, #8]	; (23fd7d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fd7ce:	bd10      	pop	{r4, pc}
 23fd7d0:	1007ae5c 	.word	0x1007ae5c
 23fd7d4:	023fd53f 	.word	0x023fd53f
 23fd7d8:	1007ad6c 	.word	0x1007ad6c

023fd7dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fd7dc:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fd7de:	4c08      	ldr	r4, [pc, #32]	; (23fd800 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fd7e0:	e8d4 3f8f 	ldab	r3, [r4]
 23fd7e4:	07db      	lsls	r3, r3, #31
 23fd7e6:	d409      	bmi.n	23fd7fc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd7e8:	4620      	mov	r0, r4
 23fd7ea:	f7fd ff79 	bl	23fb6e0 <__cxa_guard_acquire>
 23fd7ee:	b128      	cbz	r0, 23fd7fc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd7f0:	4620      	mov	r0, r4
 23fd7f2:	f7fd ff7a 	bl	23fb6ea <__cxa_guard_release>
 23fd7f6:	4803      	ldr	r0, [pc, #12]	; (23fd804 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fd7f8:	f001 fdea 	bl	23ff3d0 <atexit>
    return &factory;
}
 23fd7fc:	4802      	ldr	r0, [pc, #8]	; (23fd808 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fd7fe:	bd10      	pop	{r4, pc}
 23fd800:	1007ae60 	.word	0x1007ae60
 23fd804:	023fd5a7 	.word	0x023fd5a7
 23fd808:	1007ad70 	.word	0x1007ad70

023fd80c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fd80c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fd80e:	2500      	movs	r5, #0
 23fd810:	4604      	mov	r4, r0
 23fd812:	e9c0 5500 	strd	r5, r5, [r0]
 23fd816:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fd81a:	6085      	str	r5, [r0, #8]
 23fd81c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fd81e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fd822:	f7fe fc9b 	bl	23fc15c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fd826:	f7ff ffc1 	bl	23fd7ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fd82a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd82c:	f7ff ffd6 	bl	23fd7dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fd830:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd832:	6220      	str	r0, [r4, #32]
}
 23fd834:	4620      	mov	r0, r4
 23fd836:	bd38      	pop	{r3, r4, r5, pc}

023fd838 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fd838:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fd83a:	4c0a      	ldr	r4, [pc, #40]	; (23fd864 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fd83c:	e8d4 3f8f 	ldab	r3, [r4]
 23fd840:	07db      	lsls	r3, r3, #31
 23fd842:	d40c      	bmi.n	23fd85e <_ZN5spark10LogManager8instanceEv+0x26>
 23fd844:	4620      	mov	r0, r4
 23fd846:	f7fd ff4b 	bl	23fb6e0 <__cxa_guard_acquire>
 23fd84a:	b140      	cbz	r0, 23fd85e <_ZN5spark10LogManager8instanceEv+0x26>
 23fd84c:	4806      	ldr	r0, [pc, #24]	; (23fd868 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd84e:	f7ff ffdd 	bl	23fd80c <_ZN5spark10LogManagerC1Ev>
 23fd852:	4620      	mov	r0, r4
 23fd854:	f7fd ff49 	bl	23fb6ea <__cxa_guard_release>
 23fd858:	4804      	ldr	r0, [pc, #16]	; (23fd86c <_ZN5spark10LogManager8instanceEv+0x34>)
 23fd85a:	f001 fdb9 	bl	23ff3d0 <atexit>
    return &mgr;
}
 23fd85e:	4802      	ldr	r0, [pc, #8]	; (23fd868 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd860:	bd10      	pop	{r4, pc}
 23fd862:	bf00      	nop
 23fd864:	1007ae58 	.word	0x1007ae58
 23fd868:	1007ae68 	.word	0x1007ae68
 23fd86c:	023fdd89 	.word	0x023fdd89

023fd870 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fd870:	2300      	movs	r3, #0
 23fd872:	4a02      	ldr	r2, [pc, #8]	; (23fd87c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fd874:	4902      	ldr	r1, [pc, #8]	; (23fd880 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fd876:	4803      	ldr	r0, [pc, #12]	; (23fd884 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fd878:	f7fe bef4 	b.w	23fc664 <log_set_callbacks>
 23fd87c:	023fdb71 	.word	0x023fdb71
 23fd880:	023fdafd 	.word	0x023fdafd
 23fd884:	023fda7d 	.word	0x023fda7d

023fd888 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fd888:	2300      	movs	r3, #0
 23fd88a:	461a      	mov	r2, r3
 23fd88c:	4619      	mov	r1, r3
 23fd88e:	4618      	mov	r0, r3
 23fd890:	f7fe bee8 	b.w	23fc664 <log_set_callbacks>

023fd894 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fd894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd896:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fd898:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fd89a:	4668      	mov	r0, sp
 23fd89c:	f7ff fea2 	bl	23fd5e4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd8a0:	466a      	mov	r2, sp
 23fd8a2:	4629      	mov	r1, r5
 23fd8a4:	4620      	mov	r0, r4
 23fd8a6:	f7ff fd4f 	bl	23fd348 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fd8aa:	a801      	add	r0, sp, #4
 23fd8ac:	f7ff f9f0 	bl	23fcc90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd8b0:	4620      	mov	r0, r4
 23fd8b2:	b003      	add	sp, #12
 23fd8b4:	bd30      	pop	{r4, r5, pc}

023fd8b6 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fd8b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd8b8:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fd8ba:	68cd      	ldr	r5, [r1, #12]
 23fd8bc:	4668      	mov	r0, sp
 23fd8be:	f7ff fe91 	bl	23fd5e4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd8c2:	466a      	mov	r2, sp
 23fd8c4:	4629      	mov	r1, r5
 23fd8c6:	4620      	mov	r0, r4
 23fd8c8:	f7ff fd1a 	bl	23fd300 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd8cc:	a801      	add	r0, sp, #4
 23fd8ce:	f7ff f9df 	bl	23fcc90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd8d2:	4620      	mov	r0, r4
 23fd8d4:	b003      	add	sp, #12
 23fd8d6:	bd30      	pop	{r4, r5, pc}

023fd8d8 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fd8d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd8da:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fd8dc:	690d      	ldr	r5, [r1, #16]
 23fd8de:	4668      	mov	r0, sp
 23fd8e0:	f7ff fe80 	bl	23fd5e4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd8e4:	466a      	mov	r2, sp
 23fd8e6:	4629      	mov	r1, r5
 23fd8e8:	4620      	mov	r0, r4
 23fd8ea:	f7ff fcb2 	bl	23fd252 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd8ee:	a801      	add	r0, sp, #4
 23fd8f0:	f7ff f9ce 	bl	23fcc90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd8f4:	4620      	mov	r0, r4
 23fd8f6:	b003      	add	sp, #12
 23fd8f8:	bd30      	pop	{r4, r5, pc}
	...

023fd8fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fd8fc:	b570      	push	{r4, r5, r6, lr}
 23fd8fe:	b08a      	sub	sp, #40	; 0x28
 23fd900:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fd902:	4601      	mov	r1, r0
 23fd904:	a804      	add	r0, sp, #16
 23fd906:	f7ff ffc5 	bl	23fd894 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fd90a:	4e14      	ldr	r6, [pc, #80]	; (23fd95c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fd90c:	a804      	add	r0, sp, #16
 23fd90e:	f7ff fd33 	bl	23fd378 <_ZN5spark18JSONObjectIterator4nextEv>
 23fd912:	b1e8      	cbz	r0, 23fd950 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fd914:	4668      	mov	r0, sp
 23fd916:	a904      	add	r1, sp, #16
 23fd918:	f7ff ffcd 	bl	23fd8b6 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fd91c:	4631      	mov	r1, r6
 23fd91e:	9802      	ldr	r0, [sp, #8]
 23fd920:	f7ff fe3a 	bl	23fd598 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fd924:	4604      	mov	r4, r0
 23fd926:	b110      	cbz	r0, 23fd92e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fd928:	1e2c      	subs	r4, r5, #0
 23fd92a:	bf18      	it	ne
 23fd92c:	2401      	movne	r4, #1
 23fd92e:	a801      	add	r0, sp, #4
 23fd930:	f7ff f9ae 	bl	23fcc90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd934:	2c00      	cmp	r4, #0
 23fd936:	d0e9      	beq.n	23fd90c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fd938:	4668      	mov	r0, sp
 23fd93a:	a904      	add	r1, sp, #16
 23fd93c:	f7ff ffcc 	bl	23fd8d8 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fd940:	4668      	mov	r0, sp
 23fd942:	f7ff fcbc 	bl	23fd2be <_ZNK5spark9JSONValue5toIntEv>
 23fd946:	6028      	str	r0, [r5, #0]
 23fd948:	a801      	add	r0, sp, #4
 23fd94a:	f7ff f9a1 	bl	23fcc90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd94e:	e7dd      	b.n	23fd90c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fd950:	a805      	add	r0, sp, #20
 23fd952:	f7ff f99d 	bl	23fcc90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd956:	b00a      	add	sp, #40	; 0x28
 23fd958:	bd70      	pop	{r4, r5, r6, pc}
 23fd95a:	bf00      	nop
 23fd95c:	023ffb88 	.word	0x023ffb88

023fd960 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd962:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fd964:	4913      	ldr	r1, [pc, #76]	; (23fd9b4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fd966:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd968:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fd96a:	f7fd fe75 	bl	23fb658 <strcmp>
 23fd96e:	b950      	cbnz	r0, 23fd986 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fd970:	f001 f96a 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fd974:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fd978:	f001 f954 	bl	23fec24 <_ZN9USBSerial5beginEl>
}
 23fd97c:	b003      	add	sp, #12
 23fd97e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fd982:	f001 b961 	b.w	23fec48 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fd986:	4620      	mov	r0, r4
 23fd988:	490b      	ldr	r1, [pc, #44]	; (23fd9b8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fd98a:	f7fd fe65 	bl	23fb658 <strcmp>
 23fd98e:	b978      	cbnz	r0, 23fd9b0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fd990:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fd994:	a901      	add	r1, sp, #4
 23fd996:	4628      	mov	r0, r5
        int baud = 9600;
 23fd998:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fd99a:	f7ff ffaf 	bl	23fd8fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fd99e:	f001 fb71 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fd9a2:	9901      	ldr	r1, [sp, #4]
 23fd9a4:	f001 f8e0 	bl	23feb68 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fd9a8:	f001 fb6c 	bl	23ff084 <_Z22__fetch_global_Serial1v>
}
 23fd9ac:	b003      	add	sp, #12
 23fd9ae:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fd9b0:	2000      	movs	r0, #0
 23fd9b2:	e7fb      	b.n	23fd9ac <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fd9b4:	023ffb8d 	.word	0x023ffb8d
 23fd9b8:	023ffb94 	.word	0x023ffb94

023fd9bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd9bc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fd9be:	2614      	movs	r6, #20
 23fd9c0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd9c4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd9c6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd9ca:	42ae      	cmp	r6, r5
 23fd9cc:	d005      	beq.n	23fd9da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fd9ce:	f105 0008 	add.w	r0, r5, #8
 23fd9d2:	f7ff fff3 	bl	23fd9bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd9d6:	3514      	adds	r5, #20
 23fd9d8:	e7f7      	b.n	23fd9ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fd9da:	6820      	ldr	r0, [r4, #0]
 23fd9dc:	f7fe ffd8 	bl	23fc990 <free>
}
 23fd9e0:	4620      	mov	r0, r4
 23fd9e2:	bd70      	pop	{r4, r5, r6, pc}

023fd9e4 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fd9e4:	b510      	push	{r4, lr}
 23fd9e6:	4604      	mov	r4, r0
 23fd9e8:	300c      	adds	r0, #12
 23fd9ea:	f7ff ffe7 	bl	23fd9bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd9ee:	4620      	mov	r0, r4
 23fd9f0:	f7ff fa80 	bl	23fcef4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd9f4:	4620      	mov	r0, r4
 23fd9f6:	bd10      	pop	{r4, pc}

023fd9f8 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fd9f8:	b510      	push	{r4, lr}
 23fd9fa:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fd9fc:	4b03      	ldr	r3, [pc, #12]	; (23fda0c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fd9fe:	f840 3b04 	str.w	r3, [r0], #4
 23fda02:	f7ff ffef 	bl	23fd9e4 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fda06:	4620      	mov	r0, r4
 23fda08:	bd10      	pop	{r4, pc}
 23fda0a:	bf00      	nop
 23fda0c:	023ffa84 	.word	0x023ffa84

023fda10 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fda10:	b510      	push	{r4, lr}
 23fda12:	4604      	mov	r4, r0
 23fda14:	f7ff fff0 	bl	23fd9f8 <_ZN5spark16StreamLogHandlerD1Ev>
 23fda18:	4620      	mov	r0, r4
 23fda1a:	2124      	movs	r1, #36	; 0x24
 23fda1c:	f7fd fe51 	bl	23fb6c2 <_ZdlPvj>
 23fda20:	4620      	mov	r0, r4
 23fda22:	bd10      	pop	{r4, pc}

023fda24 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fda24:	b510      	push	{r4, lr}
 23fda26:	4604      	mov	r4, r0
 23fda28:	4b02      	ldr	r3, [pc, #8]	; (23fda34 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fda2a:	6003      	str	r3, [r0, #0]
 23fda2c:	f7ff ffe4 	bl	23fd9f8 <_ZN5spark16StreamLogHandlerD1Ev>
 23fda30:	4620      	mov	r0, r4
 23fda32:	bd10      	pop	{r4, pc}
 23fda34:	023ffc30 	.word	0x023ffc30

023fda38 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fda38:	b510      	push	{r4, lr}
 23fda3a:	4604      	mov	r4, r0
 23fda3c:	f7ff fff2 	bl	23fda24 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fda40:	4620      	mov	r0, r4
 23fda42:	2124      	movs	r1, #36	; 0x24
 23fda44:	f7fd fe3d 	bl	23fb6c2 <_ZdlPvj>
 23fda48:	4620      	mov	r0, r4
 23fda4a:	bd10      	pop	{r4, pc}

023fda4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fda4c:	2200      	movs	r2, #0
 23fda4e:	e9c0 2200 	strd	r2, r2, [r0]
 23fda52:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fda54:	b510      	push	{r4, lr}
 23fda56:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fda58:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fda5a:	6004      	str	r4, [r0, #0]
 23fda5c:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fda5e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fda60:	6044      	str	r4, [r0, #4]
 23fda62:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fda64:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fda66:	6084      	str	r4, [r0, #8]
}
 23fda68:	bd10      	pop	{r4, pc}

023fda6a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fda6a:	b510      	push	{r4, lr}
 23fda6c:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fda6e:	6803      	ldr	r3, [r0, #0]
 23fda70:	6818      	ldr	r0, [r3, #0]
 23fda72:	f7fe fb9d 	bl	23fc1b0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fda76:	4620      	mov	r0, r4
 23fda78:	bd10      	pop	{r4, pc}
	...

023fda7c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fda7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fda80:	b087      	sub	sp, #28
 23fda82:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fda84:	4b1c      	ldr	r3, [pc, #112]	; (23fdaf8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fda86:	4680      	mov	r8, r0
 23fda88:	685b      	ldr	r3, [r3, #4]
 23fda8a:	4689      	mov	r9, r1
 23fda8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fda90:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fda92:	b96b      	cbnz	r3, 23fdab0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fda94:	f7ff fed0 	bl	23fd838 <_ZN5spark10LogManager8instanceEv>
 23fda98:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fda9a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fda9e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdaa0:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fdaa2:	f7ff fd77 	bl	23fd594 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fdaa6:	7b23      	ldrb	r3, [r4, #12]
 23fdaa8:	b12b      	cbz	r3, 23fdab6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fdaaa:	a805      	add	r0, sp, #20
 23fdaac:	f7ff ffdd 	bl	23fda6a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fdab0:	b007      	add	sp, #28
 23fdab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fdab6:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fdab8:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fdabc:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fdabe:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fdac2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdac6:	45aa      	cmp	sl, r5
 23fdac8:	d012      	beq.n	23fdaf0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fdaca:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fdace:	4631      	mov	r1, r6
 23fdad0:	1d38      	adds	r0, r7, #4
 23fdad2:	f7ff fe09 	bl	23fd6e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fdad6:	4581      	cmp	r9, r0
 23fdad8:	d3f5      	bcc.n	23fdac6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fdada:	9a03      	ldr	r2, [sp, #12]
 23fdadc:	683b      	ldr	r3, [r7, #0]
 23fdade:	9200      	str	r2, [sp, #0]
 23fdae0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fdae4:	464a      	mov	r2, r9
 23fdae6:	4633      	mov	r3, r6
 23fdae8:	4641      	mov	r1, r8
 23fdaea:	4638      	mov	r0, r7
 23fdaec:	47d8      	blx	fp
 23fdaee:	e7ea      	b.n	23fdac6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fdaf0:	2300      	movs	r3, #0
 23fdaf2:	7323      	strb	r3, [r4, #12]
 23fdaf4:	e7d9      	b.n	23fdaaa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fdaf6:	bf00      	nop
 23fdaf8:	e000ed00 	.word	0xe000ed00

023fdafc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fdafc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdb00:	469b      	mov	fp, r3
 23fdb02:	4b1a      	ldr	r3, [pc, #104]	; (23fdb6c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fdb04:	4680      	mov	r8, r0
 23fdb06:	685b      	ldr	r3, [r3, #4]
 23fdb08:	4689      	mov	r9, r1
 23fdb0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fdb0e:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fdb10:	b96b      	cbnz	r3, 23fdb2e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fdb12:	f7ff fe91 	bl	23fd838 <_ZN5spark10LogManager8instanceEv>
 23fdb16:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdb18:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdb1c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdb1e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdb20:	f7ff fd38 	bl	23fd594 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fdb24:	7b23      	ldrb	r3, [r4, #12]
 23fdb26:	b12b      	cbz	r3, 23fdb34 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fdb28:	a801      	add	r0, sp, #4
 23fdb2a:	f7ff ff9e 	bl	23fda6a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fdb2e:	b003      	add	sp, #12
 23fdb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fdb34:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fdb36:	b2f6      	uxtb	r6, r6
 23fdb38:	7323      	strb	r3, [r4, #12]
 23fdb3a:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fdb3e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdb42:	4555      	cmp	r5, sl
 23fdb44:	d00e      	beq.n	23fdb64 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fdb46:	f855 7b04 	ldr.w	r7, [r5], #4
 23fdb4a:	4659      	mov	r1, fp
 23fdb4c:	1d38      	adds	r0, r7, #4
 23fdb4e:	f7ff fdcb 	bl	23fd6e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fdb52:	4286      	cmp	r6, r0
 23fdb54:	d3f5      	bcc.n	23fdb42 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fdb56:	683b      	ldr	r3, [r7, #0]
 23fdb58:	464a      	mov	r2, r9
 23fdb5a:	4641      	mov	r1, r8
 23fdb5c:	4638      	mov	r0, r7
 23fdb5e:	68db      	ldr	r3, [r3, #12]
 23fdb60:	4798      	blx	r3
 23fdb62:	e7ee      	b.n	23fdb42 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fdb64:	2300      	movs	r3, #0
 23fdb66:	7323      	strb	r3, [r4, #12]
 23fdb68:	e7de      	b.n	23fdb28 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fdb6a:	bf00      	nop
 23fdb6c:	e000ed00 	.word	0xe000ed00

023fdb70 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fdb70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fdb74:	4b16      	ldr	r3, [pc, #88]	; (23fdbd0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fdb76:	4605      	mov	r5, r0
 23fdb78:	685b      	ldr	r3, [r3, #4]
 23fdb7a:	460f      	mov	r7, r1
 23fdb7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fdb80:	bb1b      	cbnz	r3, 23fdbca <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fdb82:	f7ff fe59 	bl	23fd838 <_ZN5spark10LogManager8instanceEv>
 23fdb86:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdb88:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdb8c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdb8e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdb90:	f7ff fd00 	bl	23fd594 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fdb94:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fdb98:	2446      	movs	r4, #70	; 0x46
 23fdb9a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdb9e:	45b0      	cmp	r8, r6
 23fdba0:	d109      	bne.n	23fdbb6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fdba2:	a801      	add	r0, sp, #4
 23fdba4:	f7ff ff61 	bl	23fda6a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fdba8:	42a5      	cmp	r5, r4
 23fdbaa:	bfb4      	ite	lt
 23fdbac:	2000      	movlt	r0, #0
 23fdbae:	2001      	movge	r0, #1
}
 23fdbb0:	b002      	add	sp, #8
 23fdbb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fdbb6:	f856 0b04 	ldr.w	r0, [r6], #4
 23fdbba:	4639      	mov	r1, r7
 23fdbbc:	3004      	adds	r0, #4
 23fdbbe:	f7ff fd93 	bl	23fd6e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fdbc2:	4284      	cmp	r4, r0
 23fdbc4:	bfa8      	it	ge
 23fdbc6:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fdbc8:	e7e9      	b.n	23fdb9e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fdbca:	2000      	movs	r0, #0
 23fdbcc:	e7f0      	b.n	23fdbb0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fdbce:	bf00      	nop
 23fdbd0:	e000ed00 	.word	0xe000ed00

023fdbd4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fdbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdbd6:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fdbda:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fdbdc:	4604      	mov	r4, r0
 23fdbde:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdbe0:	db0d      	blt.n	23fdbfe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fdbe2:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fdbe4:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fdbe6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fdbe8:	dd04      	ble.n	23fdbf4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fdbea:	00b9      	lsls	r1, r7, #2
 23fdbec:	f7fe fede 	bl	23fc9ac <realloc>
            if (!d) {
 23fdbf0:	b918      	cbnz	r0, 23fdbfa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fdbf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fdbf4:	f7fe fecc 	bl	23fc990 <free>
        T* d = nullptr;
 23fdbf8:	2000      	movs	r0, #0
        data_ = d;
 23fdbfa:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fdbfc:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fdbfe:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fdc00:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fdc02:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fdc06:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fdc08:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fdc0c:	1d08      	adds	r0, r1, #4
 23fdc0e:	f001 fbfa 	bl	23ff406 <memmove>
    new(p) T(std::move(value));
 23fdc12:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fdc16:	6863      	ldr	r3, [r4, #4]
    return true;
 23fdc18:	2001      	movs	r0, #1
    ++size_;
 23fdc1a:	3301      	adds	r3, #1
 23fdc1c:	6063      	str	r3, [r4, #4]
    return true;
 23fdc1e:	e7e8      	b.n	23fdbf2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fdc20 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fdc20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdc22:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fdc24:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdc28:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdc2a:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fdc2c:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fdc2e:	f7ff fcb1 	bl	23fd594 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fdc32:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fdc36:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fdc3a:	4293      	cmp	r3, r2
 23fdc3c:	4619      	mov	r1, r3
 23fdc3e:	d00a      	beq.n	23fdc56 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fdc40:	6809      	ldr	r1, [r1, #0]
 23fdc42:	3304      	adds	r3, #4
 23fdc44:	42a9      	cmp	r1, r5
 23fdc46:	d1f8      	bne.n	23fdc3a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fdc48:	a801      	add	r0, sp, #4
 23fdc4a:	f7ff ff0e 	bl	23fda6a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fdc4e:	2500      	movs	r5, #0
}
 23fdc50:	4628      	mov	r0, r5
 23fdc52:	b003      	add	sp, #12
 23fdc54:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fdc56:	4629      	mov	r1, r5
 23fdc58:	4620      	mov	r0, r4
 23fdc5a:	f7ff ffbb 	bl	23fdbd4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fdc5e:	4605      	mov	r5, r0
 23fdc60:	2800      	cmp	r0, #0
 23fdc62:	d0f1      	beq.n	23fdc48 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fdc64:	6863      	ldr	r3, [r4, #4]
 23fdc66:	2b01      	cmp	r3, #1
 23fdc68:	d101      	bne.n	23fdc6e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fdc6a:	f7ff fe01 	bl	23fd870 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdc6e:	a801      	add	r0, sp, #4
 23fdc70:	f7ff fefb 	bl	23fda6a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fdc74:	e7ec      	b.n	23fdc50 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fdc76 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fdc76:	460b      	mov	r3, r1
 23fdc78:	b570      	push	{r4, r5, r6, lr}
 23fdc7a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fdc7c:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fdc80:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fdc84:	4282      	cmp	r2, r0
 23fdc86:	d00f      	beq.n	23fdca8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fdc88:	4601      	mov	r1, r0
            if (*p == value) {
 23fdc8a:	681d      	ldr	r5, [r3, #0]
 23fdc8c:	f851 6b04 	ldr.w	r6, [r1], #4
 23fdc90:	42ae      	cmp	r6, r5
 23fdc92:	d107      	bne.n	23fdca4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fdc94:	1a52      	subs	r2, r2, r1
 23fdc96:	f001 fbb6 	bl	23ff406 <memmove>
    return true;
 23fdc9a:	2001      	movs	r0, #1
    --size_;
 23fdc9c:	6863      	ldr	r3, [r4, #4]
 23fdc9e:	3b01      	subs	r3, #1
 23fdca0:	6063      	str	r3, [r4, #4]
}
 23fdca2:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fdca4:	4608      	mov	r0, r1
 23fdca6:	e7ed      	b.n	23fdc84 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fdca8:	2000      	movs	r0, #0
 23fdcaa:	e7fa      	b.n	23fdca2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fdcac <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fdcac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fdcae:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fdcb0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdcb4:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fdcb6:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdcb8:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fdcba:	f7ff fc6b 	bl	23fd594 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fdcbe:	4620      	mov	r0, r4
 23fdcc0:	a901      	add	r1, sp, #4
 23fdcc2:	f7ff ffd8 	bl	23fdc76 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fdcc6:	b118      	cbz	r0, 23fdcd0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fdcc8:	6863      	ldr	r3, [r4, #4]
 23fdcca:	b90b      	cbnz	r3, 23fdcd0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fdccc:	f7ff fddc 	bl	23fd888 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdcd0:	a803      	add	r0, sp, #12
 23fdcd2:	f7ff feca 	bl	23fda6a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fdcd6:	b004      	add	sp, #16
 23fdcd8:	bd10      	pop	{r4, pc}

023fdcda <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fdcda:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fdcdc:	b570      	push	{r4, r5, r6, lr}
 23fdcde:	4604      	mov	r4, r0
 23fdce0:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fdce4:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fdce8:	42ae      	cmp	r6, r5
 23fdcea:	d015      	beq.n	23fdd18 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fdcec:	4620      	mov	r0, r4
 23fdcee:	f105 0110 	add.w	r1, r5, #16
 23fdcf2:	f7ff ffc0 	bl	23fdc76 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fdcf6:	6863      	ldr	r3, [r4, #4]
 23fdcf8:	b90b      	cbnz	r3, 23fdcfe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fdcfa:	f7ff fdc5 	bl	23fd888 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fdcfe:	69e0      	ldr	r0, [r4, #28]
 23fdd00:	6929      	ldr	r1, [r5, #16]
 23fdd02:	6803      	ldr	r3, [r0, #0]
 23fdd04:	68db      	ldr	r3, [r3, #12]
 23fdd06:	4798      	blx	r3
        if (h.stream) {
 23fdd08:	6969      	ldr	r1, [r5, #20]
 23fdd0a:	b119      	cbz	r1, 23fdd14 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fdd0c:	6a20      	ldr	r0, [r4, #32]
 23fdd0e:	6803      	ldr	r3, [r0, #0]
 23fdd10:	68db      	ldr	r3, [r3, #12]
 23fdd12:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fdd14:	3518      	adds	r5, #24
 23fdd16:	e7e7      	b.n	23fdce8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fdd18:	2618      	movs	r6, #24
 23fdd1a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fdd1e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fdd22:	42ae      	cmp	r6, r5
 23fdd24:	d004      	beq.n	23fdd30 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fdd26:	4628      	mov	r0, r5
 23fdd28:	f000 fcc6 	bl	23fe6b8 <_ZN6StringD1Ev>
 23fdd2c:	3518      	adds	r5, #24
 23fdd2e:	e7f8      	b.n	23fdd22 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fdd30:	2300      	movs	r3, #0
 23fdd32:	6163      	str	r3, [r4, #20]
}
 23fdd34:	bd70      	pop	{r4, r5, r6, pc}

023fdd36 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fdd36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fdd38:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fdd3a:	f7ff fda5 	bl	23fd888 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdd3e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fdd42:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdd44:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdd46:	f7ff fc25 	bl	23fd594 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fdd4a:	4620      	mov	r0, r4
 23fdd4c:	f7ff ffc5 	bl	23fdcda <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fdd50:	a801      	add	r0, sp, #4
 23fdd52:	f7ff fe8a 	bl	23fda6a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fdd56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fdd58:	b108      	cbz	r0, 23fdd5e <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fdd5a:	f7fe fa0d 	bl	23fc178 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fdd5e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fdd62:	2618      	movs	r6, #24
 23fdd64:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fdd68:	42ae      	cmp	r6, r5
 23fdd6a:	d004      	beq.n	23fdd76 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fdd6c:	4628      	mov	r0, r5
 23fdd6e:	f000 fca3 	bl	23fe6b8 <_ZN6StringD1Ev>
 23fdd72:	3518      	adds	r5, #24
 23fdd74:	e7f8      	b.n	23fdd68 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fdd76:	6920      	ldr	r0, [r4, #16]
 23fdd78:	f7fe fe0a 	bl	23fc990 <free>
 23fdd7c:	6820      	ldr	r0, [r4, #0]
 23fdd7e:	f7fe fe07 	bl	23fc990 <free>
}
 23fdd82:	4620      	mov	r0, r4
 23fdd84:	b002      	add	sp, #8
 23fdd86:	bd70      	pop	{r4, r5, r6, pc}

023fdd88 <__tcf_2>:
    static LogManager mgr;
 23fdd88:	4801      	ldr	r0, [pc, #4]	; (23fdd90 <__tcf_2+0x8>)
 23fdd8a:	f7ff bfd4 	b.w	23fdd36 <_ZN5spark10LogManagerD1Ev>
 23fdd8e:	bf00      	nop
 23fdd90:	1007ae68 	.word	0x1007ae68

023fdd94 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fdd94:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fdd96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fdd98:	4604      	mov	r4, r0
 23fdd9a:	460d      	mov	r5, r1
 23fdd9c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fdd9e:	d915      	bls.n	23fddcc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fdda0:	4290      	cmp	r0, r2
 23fdda2:	d214      	bcs.n	23fddce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fdda4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fdda8:	1a75      	subs	r5, r6, r1
 23fddaa:	f1a1 0714 	sub.w	r7, r1, #20
 23fddae:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fddb0:	42b7      	cmp	r7, r6
 23fddb2:	d01a      	beq.n	23fddea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fddb4:	b11c      	cbz	r4, 23fddbe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fddb6:	4631      	mov	r1, r6
 23fddb8:	4620      	mov	r0, r4
 23fddba:	f7ff fc45 	bl	23fd648 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fddbe:	f106 0008 	add.w	r0, r6, #8
 23fddc2:	f7ff fdfb 	bl	23fd9bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fddc6:	3e14      	subs	r6, #20
 23fddc8:	3c14      	subs	r4, #20
 23fddca:	e7f1      	b.n	23fddb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fddcc:	d00d      	beq.n	23fddea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fddce:	42b5      	cmp	r5, r6
 23fddd0:	d00b      	beq.n	23fddea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fddd2:	b11c      	cbz	r4, 23fdddc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fddd4:	4629      	mov	r1, r5
 23fddd6:	4620      	mov	r0, r4
 23fddd8:	f7ff fc36 	bl	23fd648 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fdddc:	f105 0008 	add.w	r0, r5, #8
 23fdde0:	f7ff fdec 	bl	23fd9bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fdde4:	3514      	adds	r5, #20
 23fdde6:	3414      	adds	r4, #20
 23fdde8:	e7f1      	b.n	23fddce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fddea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fddec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fddec:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fddee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fddf0:	4604      	mov	r4, r0
 23fddf2:	460d      	mov	r5, r1
 23fddf4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fddf6:	d914      	bls.n	23fde22 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fddf8:	4290      	cmp	r0, r2
 23fddfa:	d213      	bcs.n	23fde24 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fddfc:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fde00:	1a75      	subs	r5, r6, r1
 23fde02:	f1a1 0710 	sub.w	r7, r1, #16
 23fde06:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fde08:	42b7      	cmp	r7, r6
 23fde0a:	d018      	beq.n	23fde3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fde0c:	b11c      	cbz	r4, 23fde16 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fde0e:	4631      	mov	r1, r6
 23fde10:	4620      	mov	r0, r4
 23fde12:	f000 fcce 	bl	23fe7b2 <_ZN6StringC1EOS_>
                end->~T();
 23fde16:	4630      	mov	r0, r6
 23fde18:	f000 fc4e 	bl	23fe6b8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fde1c:	3e10      	subs	r6, #16
 23fde1e:	3c10      	subs	r4, #16
 23fde20:	e7f2      	b.n	23fde08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fde22:	d00c      	beq.n	23fde3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fde24:	42b5      	cmp	r5, r6
 23fde26:	d00a      	beq.n	23fde3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fde28:	b11c      	cbz	r4, 23fde32 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fde2a:	4629      	mov	r1, r5
 23fde2c:	4620      	mov	r0, r4
 23fde2e:	f000 fcc0 	bl	23fe7b2 <_ZN6StringC1EOS_>
                p->~T();
 23fde32:	4628      	mov	r0, r5
 23fde34:	f000 fc40 	bl	23fe6b8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fde38:	3510      	adds	r5, #16
 23fde3a:	3410      	adds	r4, #16
 23fde3c:	e7f2      	b.n	23fde24 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fde3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fde40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fde40:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fde42:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fde44:	4605      	mov	r5, r0
        if (n > 0) {
 23fde46:	dd11      	ble.n	23fde6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fde48:	0130      	lsls	r0, r6, #4
 23fde4a:	f7fe fd93 	bl	23fc974 <malloc>
            if (!d) {
 23fde4e:	4604      	mov	r4, r0
 23fde50:	b158      	cbz	r0, 23fde6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fde52:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fde56:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fde5a:	f7ff ffc7 	bl	23fddec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fde5e:	6828      	ldr	r0, [r5, #0]
 23fde60:	f7fe fd96 	bl	23fc990 <free>
        return true;
 23fde64:	2001      	movs	r0, #1
        data_ = d;
 23fde66:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fde68:	60ae      	str	r6, [r5, #8]
    }
 23fde6a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fde6c:	2400      	movs	r4, #0
 23fde6e:	e7f6      	b.n	23fde5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fde70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fde70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fde74:	4690      	mov	r8, r2
        capacity_(0) {
 23fde76:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fde78:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fde7a:	b095      	sub	sp, #84	; 0x54
 23fde7c:	9103      	str	r1, [sp, #12]
    return size_;
 23fde7e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fde82:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fde84:	4299      	cmp	r1, r3
        capacity_(0) {
 23fde86:	e9c0 3300 	strd	r3, r3, [r0]
 23fde8a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fde8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fde92:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fde96:	7602      	strb	r2, [r0, #24]
 23fde98:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fde9a:	dc23      	bgt.n	23fdee4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fde9c:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fdea0:	2314      	movs	r3, #20
 23fdea2:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fdea6:	42af      	cmp	r7, r5
 23fdea8:	d03b      	beq.n	23fdf22 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fdeaa:	4629      	mov	r1, r5
 23fdeac:	a80b      	add	r0, sp, #44	; 0x2c
 23fdeae:	f000 fc80 	bl	23fe7b2 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fdeb2:	a90b      	add	r1, sp, #44	; 0x2c
 23fdeb4:	a80f      	add	r0, sp, #60	; 0x3c
 23fdeb6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fdeb8:	f000 fc7b 	bl	23fe7b2 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdebc:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fdec0:	4299      	cmp	r1, r3
 23fdec2:	da1b      	bge.n	23fdefc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fdec4:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fdec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fdec8:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fdecc:	4631      	mov	r1, r6
 23fdece:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fded2:	f106 0010 	add.w	r0, r6, #16
 23fded6:	f7ff ff89 	bl	23fddec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fdeda:	b9ee      	cbnz	r6, 23fdf18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fdedc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fdede:	3301      	adds	r3, #1
 23fdee0:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fdee2:	e011      	b.n	23fdf08 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fdee4:	a808      	add	r0, sp, #32
 23fdee6:	f7ff ffab 	bl	23fde40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fdeea:	2800      	cmp	r0, #0
 23fdeec:	d1d6      	bne.n	23fde9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fdeee:	a808      	add	r0, sp, #32
 23fdef0:	f7ff f800 	bl	23fcef4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fdef4:	4620      	mov	r0, r4
 23fdef6:	b015      	add	sp, #84	; 0x54
 23fdef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdefc:	3101      	adds	r1, #1
 23fdefe:	a808      	add	r0, sp, #32
 23fdf00:	f7ff ff9e 	bl	23fde40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fdf04:	2800      	cmp	r0, #0
 23fdf06:	d1dd      	bne.n	23fdec4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fdf08:	a80f      	add	r0, sp, #60	; 0x3c
 23fdf0a:	f000 fbd5 	bl	23fe6b8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fdf0e:	a80b      	add	r0, sp, #44	; 0x2c
 23fdf10:	f000 fbd2 	bl	23fe6b8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fdf14:	3514      	adds	r5, #20
 23fdf16:	e7c6      	b.n	23fdea6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fdf18:	4630      	mov	r0, r6
 23fdf1a:	a90f      	add	r1, sp, #60	; 0x3c
 23fdf1c:	f000 fc49 	bl	23fe7b2 <_ZN6StringC1EOS_>
 23fdf20:	e7dc      	b.n	23fdedc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fdf22:	2600      	movs	r6, #0
 23fdf24:	f04f 0914 	mov.w	r9, #20
 23fdf28:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fdf2c:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fdf2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fdf32:	429e      	cmp	r6, r3
 23fdf34:	da7c      	bge.n	23fe030 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fdf36:	0133      	lsls	r3, r6, #4
 23fdf38:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fdf3a:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fdf3c:	b90b      	cbnz	r3, 23fdf42 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fdf3e:	3601      	adds	r6, #1
 23fdf40:	e7f5      	b.n	23fdf2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fdf42:	2300      	movs	r3, #0
 23fdf44:	9307      	str	r3, [sp, #28]
 23fdf46:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fdf4a:	ad0b      	add	r5, sp, #44	; 0x2c
 23fdf4c:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fdf4e:	a907      	add	r1, sp, #28
 23fdf50:	a806      	add	r0, sp, #24
 23fdf52:	f7ff faf8 	bl	23fd546 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fdf56:	4682      	mov	sl, r0
 23fdf58:	2800      	cmp	r0, #0
 23fdf5a:	d0f0      	beq.n	23fdf3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fdf5c:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdf60:	4601      	mov	r1, r0
            bool found = false;
 23fdf62:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdf66:	4628      	mov	r0, r5
 23fdf68:	9a07      	ldr	r2, [sp, #28]
 23fdf6a:	f10d 0317 	add.w	r3, sp, #23
 23fdf6e:	f7ff fb7f 	bl	23fd670 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fdf72:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdf76:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fdf78:	2f00      	cmp	r7, #0
 23fdf7a:	d14a      	bne.n	23fe012 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fdf7c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fdf80:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fdf84:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fdf88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fdf8c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fdf90:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fdf94:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdf96:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fdf9a:	4293      	cmp	r3, r2
 23fdf9c:	db17      	blt.n	23fdfce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fdf9e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fdfa2:	f1ba 0f00 	cmp.w	sl, #0
 23fdfa6:	dd30      	ble.n	23fe00a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fdfa8:	fb09 f00a 	mul.w	r0, r9, sl
 23fdfac:	f7fe fce2 	bl	23fc974 <malloc>
            if (!d) {
 23fdfb0:	4683      	mov	fp, r0
 23fdfb2:	b360      	cbz	r0, 23fe00e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fdfb4:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fdfb8:	fb09 1202 	mla	r2, r9, r2, r1
 23fdfbc:	f7ff feea 	bl	23fdd94 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fdfc0:	6828      	ldr	r0, [r5, #0]
 23fdfc2:	f7fe fce5 	bl	23fc990 <free>
        data_ = d;
 23fdfc6:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fdfca:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fdfce:	682b      	ldr	r3, [r5, #0]
 23fdfd0:	9a01      	ldr	r2, [sp, #4]
 23fdfd2:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fdfd6:	686a      	ldr	r2, [r5, #4]
 23fdfd8:	4651      	mov	r1, sl
 23fdfda:	fb09 3202 	mla	r2, r9, r2, r3
 23fdfde:	f10a 0014 	add.w	r0, sl, #20
 23fdfe2:	f7ff fed7 	bl	23fdd94 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fdfe6:	f1ba 0f00 	cmp.w	sl, #0
 23fdfea:	d003      	beq.n	23fdff4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fdfec:	4650      	mov	r0, sl
 23fdfee:	a90f      	add	r1, sp, #60	; 0x3c
 23fdff0:	f7ff fb2a 	bl	23fd648 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fdff4:	686b      	ldr	r3, [r5, #4]
 23fdff6:	3301      	adds	r3, #1
 23fdff8:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fdffa:	a811      	add	r0, sp, #68	; 0x44
 23fdffc:	f7ff fcde 	bl	23fd9bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe000:	b13f      	cbz	r7, 23fe012 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fe002:	a80b      	add	r0, sp, #44	; 0x2c
 23fe004:	f7ff fcda 	bl	23fd9bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe008:	e771      	b.n	23fdeee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fe00a:	46bb      	mov	fp, r7
 23fe00c:	e7d8      	b.n	23fdfc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe00e:	2701      	movs	r7, #1
 23fe010:	e7f3      	b.n	23fdffa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fe012:	9b01      	ldr	r3, [sp, #4]
 23fe014:	682d      	ldr	r5, [r5, #0]
 23fe016:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fe01a:	9b06      	ldr	r3, [sp, #24]
 23fe01c:	781b      	ldrb	r3, [r3, #0]
 23fe01e:	b92b      	cbnz	r3, 23fe02c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fe020:	f8d8 3000 	ldr.w	r3, [r8]
 23fe024:	9a02      	ldr	r2, [sp, #8]
 23fe026:	4413      	add	r3, r2
 23fe028:	7c1b      	ldrb	r3, [r3, #16]
 23fe02a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fe02c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fe02e:	e78e      	b.n	23fdf4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe030:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe032:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe034:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe036:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe038:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe03a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fe03c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fe03e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe040:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fe042:	60a2      	str	r2, [r4, #8]
 23fe044:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fe046:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe048:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fe04a:	60e2      	str	r2, [r4, #12]
 23fe04c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fe04e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe050:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fe052:	6122      	str	r2, [r4, #16]
 23fe054:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fe056:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fe058:	9b03      	ldr	r3, [sp, #12]
 23fe05a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fe05c:	6162      	str	r2, [r4, #20]
 23fe05e:	7623      	strb	r3, [r4, #24]
 23fe060:	e7cf      	b.n	23fe002 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fe064 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe064:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe066:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fe068:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe06a:	4617      	mov	r7, r2
 23fe06c:	b087      	sub	sp, #28
 23fe06e:	460d      	mov	r5, r1
        stream_(&stream) {
 23fe070:	4668      	mov	r0, sp
 23fe072:	4619      	mov	r1, r3
 23fe074:	f7fd fff8 	bl	23fc068 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fe078:	4b0b      	ldr	r3, [pc, #44]	; (23fe0a8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fe07a:	4669      	mov	r1, sp
 23fe07c:	f846 3b04 	str.w	r3, [r6], #4
 23fe080:	a803      	add	r0, sp, #12
 23fe082:	f7fd fff1 	bl	23fc068 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fe086:	4639      	mov	r1, r7
 23fe088:	aa03      	add	r2, sp, #12
 23fe08a:	4630      	mov	r0, r6
 23fe08c:	f7ff fef0 	bl	23fde70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe090:	a803      	add	r0, sp, #12
 23fe092:	f7fd fec5 	bl	23fbe20 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fe096:	4668      	mov	r0, sp
 23fe098:	f7fd fec2 	bl	23fbe20 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fe09c:	4620      	mov	r0, r4
        stream_(&stream) {
 23fe09e:	4b03      	ldr	r3, [pc, #12]	; (23fe0ac <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fe0a0:	6225      	str	r5, [r4, #32]
 23fe0a2:	6023      	str	r3, [r4, #0]
}
 23fe0a4:	b007      	add	sp, #28
 23fe0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fe0a8:	023ffa84 	.word	0x023ffa84
 23fe0ac:	023ffc18 	.word	0x023ffc18

023fe0b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fe0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe0b2:	460f      	mov	r7, r1
 23fe0b4:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe0b6:	4638      	mov	r0, r7
 23fe0b8:	491c      	ldr	r1, [pc, #112]	; (23fe12c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fe0ba:	4616      	mov	r6, r2
 23fe0bc:	461d      	mov	r5, r3
 23fe0be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe0c0:	f7fd faca 	bl	23fb658 <strcmp>
 23fe0c4:	b9c0      	cbnz	r0, 23fe0f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fe0c6:	b1a4      	cbz	r4, 23fe0f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fe0c8:	4629      	mov	r1, r5
 23fe0ca:	a801      	add	r0, sp, #4
 23fe0cc:	f7ff fcbe 	bl	23fda4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe0d0:	2024      	movs	r0, #36	; 0x24
 23fe0d2:	4917      	ldr	r1, [pc, #92]	; (23fe130 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe0d4:	f001 f866 	bl	23ff1a4 <_ZnwjRKSt9nothrow_t>
 23fe0d8:	4605      	mov	r5, r0
 23fe0da:	b130      	cbz	r0, 23fe0ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fe0dc:	ab01      	add	r3, sp, #4
 23fe0de:	4632      	mov	r2, r6
 23fe0e0:	4621      	mov	r1, r4
 23fe0e2:	f7ff ffbf 	bl	23fe064 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe0e6:	4b13      	ldr	r3, [pc, #76]	; (23fe134 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fe0e8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe0ea:	a801      	add	r0, sp, #4
 23fe0ec:	f7fd fe98 	bl	23fbe20 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fe0f0:	462c      	mov	r4, r5
}
 23fe0f2:	4620      	mov	r0, r4
 23fe0f4:	b005      	add	sp, #20
 23fe0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fe0f8:	4638      	mov	r0, r7
 23fe0fa:	490f      	ldr	r1, [pc, #60]	; (23fe138 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fe0fc:	f7fd faac 	bl	23fb658 <strcmp>
 23fe100:	b990      	cbnz	r0, 23fe128 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fe102:	2c00      	cmp	r4, #0
 23fe104:	d0f5      	beq.n	23fe0f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe106:	4629      	mov	r1, r5
 23fe108:	a801      	add	r0, sp, #4
 23fe10a:	f7ff fc9f 	bl	23fda4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe10e:	2024      	movs	r0, #36	; 0x24
 23fe110:	4907      	ldr	r1, [pc, #28]	; (23fe130 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe112:	f001 f847 	bl	23ff1a4 <_ZnwjRKSt9nothrow_t>
 23fe116:	4605      	mov	r5, r0
 23fe118:	2800      	cmp	r0, #0
 23fe11a:	d0e6      	beq.n	23fe0ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fe11c:	4632      	mov	r2, r6
 23fe11e:	4621      	mov	r1, r4
 23fe120:	ab01      	add	r3, sp, #4
 23fe122:	f7ff ff9f 	bl	23fe064 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe126:	e7e0      	b.n	23fe0ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fe128:	2400      	movs	r4, #0
 23fe12a:	e7e2      	b.n	23fe0f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fe12c:	023ffb9c 	.word	0x023ffb9c
 23fe130:	023ffd64 	.word	0x023ffd64
 23fe134:	023ffc30 	.word	0x023ffc30
 23fe138:	023ffba0 	.word	0x023ffba0

023fe13c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fe13c:	4b01      	ldr	r3, [pc, #4]	; (23fe144 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fe13e:	4a02      	ldr	r2, [pc, #8]	; (23fe148 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fe140:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fe142:	4770      	bx	lr
 23fe144:	1007ae64 	.word	0x1007ae64
 23fe148:	023ffbb1 	.word	0x023ffbb1

023fe14c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe150:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fe152:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe156:	4604      	mov	r4, r0
 23fe158:	460e      	mov	r6, r1
 23fe15a:	4617      	mov	r7, r2
 23fe15c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fe15e:	f000 fd73 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fe162:	4581      	cmp	r9, r0
 23fe164:	d04d      	beq.n	23fe202 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fe166:	792b      	ldrb	r3, [r5, #4]
 23fe168:	0719      	lsls	r1, r3, #28
 23fe16a:	d504      	bpl.n	23fe176 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fe16c:	4620      	mov	r0, r4
 23fe16e:	696a      	ldr	r2, [r5, #20]
 23fe170:	4954      	ldr	r1, [pc, #336]	; (23fe2c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fe172:	f7ff fae2 	bl	23fd73a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fe176:	f1b8 0f00 	cmp.w	r8, #0
 23fe17a:	d00d      	beq.n	23fe198 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fe17c:	215b      	movs	r1, #91	; 0x5b
 23fe17e:	4620      	mov	r0, r4
 23fe180:	f7ff fa56 	bl	23fd630 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fe184:	4641      	mov	r1, r8
 23fe186:	4620      	mov	r0, r4
 23fe188:	f7ff fa43 	bl	23fd612 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fe18c:	6823      	ldr	r3, [r4, #0]
 23fe18e:	2202      	movs	r2, #2
 23fe190:	4620      	mov	r0, r4
 23fe192:	68db      	ldr	r3, [r3, #12]
 23fe194:	494c      	ldr	r1, [pc, #304]	; (23fe2c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fe196:	4798      	blx	r3
    if (attr.has_file) {
 23fe198:	792b      	ldrb	r3, [r5, #4]
 23fe19a:	07da      	lsls	r2, r3, #31
 23fe19c:	d524      	bpl.n	23fe1e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fe19e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fe1a2:	212f      	movs	r1, #47	; 0x2f
 23fe1a4:	4640      	mov	r0, r8
 23fe1a6:	f001 f9b2 	bl	23ff50e <strrchr>
    if (s1) {
 23fe1aa:	b108      	cbz	r0, 23fe1b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fe1ac:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fe1b0:	4641      	mov	r1, r8
 23fe1b2:	4620      	mov	r0, r4
 23fe1b4:	f7ff fa2d 	bl	23fd612 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fe1b8:	792b      	ldrb	r3, [r5, #4]
 23fe1ba:	079b      	lsls	r3, r3, #30
 23fe1bc:	d508      	bpl.n	23fe1d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fe1be:	213a      	movs	r1, #58	; 0x3a
 23fe1c0:	4620      	mov	r0, r4
 23fe1c2:	f7ff fa35 	bl	23fd630 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fe1c6:	4620      	mov	r0, r4
 23fe1c8:	68ea      	ldr	r2, [r5, #12]
 23fe1ca:	4940      	ldr	r1, [pc, #256]	; (23fe2cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fe1cc:	f7ff fab5 	bl	23fd73a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fe1d0:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fe1d2:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fe1d4:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fe1d8:	4620      	mov	r0, r4
            write(", ", 2);
 23fe1da:	f04f 0202 	mov.w	r2, #2
 23fe1de:	68db      	ldr	r3, [r3, #12]
 23fe1e0:	bf14      	ite	ne
 23fe1e2:	493b      	ldrne	r1, [pc, #236]	; (23fe2d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fe1e4:	493b      	ldreq	r1, [pc, #236]	; (23fe2d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe1e6:	4798      	blx	r3
    if (attr.has_function) {
 23fe1e8:	792b      	ldrb	r3, [r5, #4]
 23fe1ea:	0758      	lsls	r0, r3, #29
 23fe1ec:	d51d      	bpl.n	23fe22a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe1ee:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe1f0:	460b      	mov	r3, r1
 23fe1f2:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fe1f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fe1f8:	b160      	cbz	r0, 23fe214 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fe1fa:	2820      	cmp	r0, #32
 23fe1fc:	d108      	bne.n	23fe210 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fe1fe:	4619      	mov	r1, r3
 23fe200:	e7f7      	b.n	23fe1f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fe202:	4835      	ldr	r0, [pc, #212]	; (23fe2d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fe204:	f000 f983 	bl	23fe50e <_ZN5spark12NetworkClass9listeningEv>
 23fe208:	2800      	cmp	r0, #0
 23fe20a:	d0ac      	beq.n	23fe166 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fe20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fe210:	2828      	cmp	r0, #40	; 0x28
 23fe212:	d1ee      	bne.n	23fe1f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fe214:	6823      	ldr	r3, [r4, #0]
 23fe216:	1a52      	subs	r2, r2, r1
 23fe218:	4620      	mov	r0, r4
 23fe21a:	68db      	ldr	r3, [r3, #12]
 23fe21c:	4798      	blx	r3
        write("(): ", 4);
 23fe21e:	6823      	ldr	r3, [r4, #0]
 23fe220:	2204      	movs	r2, #4
 23fe222:	4620      	mov	r0, r4
 23fe224:	68db      	ldr	r3, [r3, #12]
 23fe226:	492d      	ldr	r1, [pc, #180]	; (23fe2dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fe228:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fe22a:	2100      	movs	r1, #0
 23fe22c:	4638      	mov	r0, r7
 23fe22e:	f7fe fa0b 	bl	23fc648 <log_level_name>
 23fe232:	4601      	mov	r1, r0
    write(s);
 23fe234:	4620      	mov	r0, r4
 23fe236:	f7ff f9ec 	bl	23fd612 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fe23a:	6823      	ldr	r3, [r4, #0]
 23fe23c:	2202      	movs	r2, #2
 23fe23e:	4620      	mov	r0, r4
 23fe240:	68db      	ldr	r3, [r3, #12]
 23fe242:	4924      	ldr	r1, [pc, #144]	; (23fe2d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe244:	4798      	blx	r3
    if (msg) {
 23fe246:	b11e      	cbz	r6, 23fe250 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fe248:	4631      	mov	r1, r6
 23fe24a:	4620      	mov	r0, r4
 23fe24c:	f7ff f9e1 	bl	23fd612 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fe250:	792b      	ldrb	r3, [r5, #4]
 23fe252:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fe256:	d02c      	beq.n	23fe2b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fe258:	6823      	ldr	r3, [r4, #0]
 23fe25a:	4921      	ldr	r1, [pc, #132]	; (23fe2e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fe25c:	68db      	ldr	r3, [r3, #12]
 23fe25e:	2202      	movs	r2, #2
 23fe260:	4620      	mov	r0, r4
 23fe262:	4798      	blx	r3
        if (attr.has_code) {
 23fe264:	792b      	ldrb	r3, [r5, #4]
 23fe266:	06d9      	lsls	r1, r3, #27
 23fe268:	d50a      	bpl.n	23fe280 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fe26a:	6823      	ldr	r3, [r4, #0]
 23fe26c:	2207      	movs	r2, #7
 23fe26e:	4620      	mov	r0, r4
 23fe270:	491c      	ldr	r1, [pc, #112]	; (23fe2e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fe272:	68db      	ldr	r3, [r3, #12]
 23fe274:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fe276:	4620      	mov	r0, r4
 23fe278:	69aa      	ldr	r2, [r5, #24]
 23fe27a:	491b      	ldr	r1, [pc, #108]	; (23fe2e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fe27c:	f7ff fa5d 	bl	23fd73a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fe280:	792b      	ldrb	r3, [r5, #4]
 23fe282:	069a      	lsls	r2, r3, #26
 23fe284:	d511      	bpl.n	23fe2aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fe286:	06db      	lsls	r3, r3, #27
 23fe288:	d505      	bpl.n	23fe296 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fe28a:	6823      	ldr	r3, [r4, #0]
 23fe28c:	2202      	movs	r2, #2
 23fe28e:	4620      	mov	r0, r4
 23fe290:	68db      	ldr	r3, [r3, #12]
 23fe292:	490f      	ldr	r1, [pc, #60]	; (23fe2d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fe294:	4798      	blx	r3
            write("details = ", 10);
 23fe296:	6823      	ldr	r3, [r4, #0]
 23fe298:	4620      	mov	r0, r4
 23fe29a:	4914      	ldr	r1, [pc, #80]	; (23fe2ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fe29c:	220a      	movs	r2, #10
 23fe29e:	68db      	ldr	r3, [r3, #12]
 23fe2a0:	4798      	blx	r3
            write(attr.details);
 23fe2a2:	4620      	mov	r0, r4
 23fe2a4:	69e9      	ldr	r1, [r5, #28]
 23fe2a6:	f7ff f9b4 	bl	23fd612 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fe2aa:	215d      	movs	r1, #93	; 0x5d
 23fe2ac:	4620      	mov	r0, r4
 23fe2ae:	f7ff f9bf 	bl	23fd630 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fe2b2:	6823      	ldr	r3, [r4, #0]
 23fe2b4:	4620      	mov	r0, r4
}
 23fe2b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fe2ba:	2202      	movs	r2, #2
 23fe2bc:	68db      	ldr	r3, [r3, #12]
 23fe2be:	490c      	ldr	r1, [pc, #48]	; (23fe2f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fe2c0:	4718      	bx	r3
 23fe2c2:	bf00      	nop
 23fe2c4:	023ffbb5 	.word	0x023ffbb5
 23fe2c8:	023ffbbc 	.word	0x023ffbbc
 23fe2cc:	023ffb7c 	.word	0x023ffb7c
 23fe2d0:	023ffa14 	.word	0x023ffa14
 23fe2d4:	023ffbc1 	.word	0x023ffbc1
 23fe2d8:	1007ae90 	.word	0x1007ae90
 23fe2dc:	023ffbbf 	.word	0x023ffbbf
 23fe2e0:	023ffbc4 	.word	0x023ffbc4
 23fe2e4:	023ffbc7 	.word	0x023ffbc7
 23fe2e8:	023ffbcf 	.word	0x023ffbcf
 23fe2ec:	023ffbd2 	.word	0x023ffbd2
 23fe2f0:	023ffbdd 	.word	0x023ffbdd

023fe2f4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe2f8:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fe2fa:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe2fc:	460d      	mov	r5, r1
 23fe2fe:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fe300:	f000 fca2 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fe304:	4287      	cmp	r7, r0
 23fe306:	d007      	beq.n	23fe318 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fe308:	6a20      	ldr	r0, [r4, #32]
 23fe30a:	4632      	mov	r2, r6
 23fe30c:	6803      	ldr	r3, [r0, #0]
 23fe30e:	4629      	mov	r1, r5
}
 23fe310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fe314:	68db      	ldr	r3, [r3, #12]
 23fe316:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fe318:	4803      	ldr	r0, [pc, #12]	; (23fe328 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fe31a:	f000 f8f8 	bl	23fe50e <_ZN5spark12NetworkClass9listeningEv>
 23fe31e:	2800      	cmp	r0, #0
 23fe320:	d0f2      	beq.n	23fe308 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fe322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe326:	bf00      	nop
 23fe328:	1007ae90 	.word	0x1007ae90

023fe32c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe32c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe330:	b085      	sub	sp, #20
    return stream_;
 23fe332:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fe336:	4605      	mov	r5, r0
 23fe338:	460f      	mov	r7, r1
 23fe33a:	4690      	mov	r8, r2
 23fe33c:	461e      	mov	r6, r3
 23fe33e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fe340:	f000 fc82 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fe344:	4581      	cmp	r9, r0
 23fe346:	d105      	bne.n	23fe354 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fe348:	4849      	ldr	r0, [pc, #292]	; (23fe470 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fe34a:	f000 f8e0 	bl	23fe50e <_ZN5spark12NetworkClass9listeningEv>
 23fe34e:	2800      	cmp	r0, #0
 23fe350:	f040 808a 	bne.w	23fe468 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fe354:	f04f 0900 	mov.w	r9, #0
 23fe358:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fe35a:	4a46      	ldr	r2, [pc, #280]	; (23fe474 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fe35c:	a801      	add	r0, sp, #4
 23fe35e:	9201      	str	r2, [sp, #4]
 23fe360:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fe362:	f88d 9008 	strb.w	r9, [sp, #8]
 23fe366:	f7ff f830 	bl	23fd3ca <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fe36a:	4649      	mov	r1, r9
 23fe36c:	4640      	mov	r0, r8
 23fe36e:	f7fe f96b 	bl	23fc648 <log_level_name>
 23fe372:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fe374:	4940      	ldr	r1, [pc, #256]	; (23fe478 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fe376:	2201      	movs	r2, #1
 23fe378:	a801      	add	r0, sp, #4
 23fe37a:	f7ff f8b5 	bl	23fd4e8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe37e:	4641      	mov	r1, r8
 23fe380:	f7ff f939 	bl	23fd5f6 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fe384:	b13f      	cbz	r7, 23fe396 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fe386:	493d      	ldr	r1, [pc, #244]	; (23fe47c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fe388:	2201      	movs	r2, #1
 23fe38a:	a801      	add	r0, sp, #4
 23fe38c:	f7ff f8ac 	bl	23fd4e8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe390:	4639      	mov	r1, r7
 23fe392:	f7ff f930 	bl	23fd5f6 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fe396:	b13e      	cbz	r6, 23fe3a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fe398:	4939      	ldr	r1, [pc, #228]	; (23fe480 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fe39a:	2201      	movs	r2, #1
 23fe39c:	a801      	add	r0, sp, #4
 23fe39e:	f7ff f8a3 	bl	23fd4e8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe3a2:	4631      	mov	r1, r6
 23fe3a4:	f7ff f927 	bl	23fd5f6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fe3a8:	7923      	ldrb	r3, [r4, #4]
 23fe3aa:	07df      	lsls	r7, r3, #31
 23fe3ac:	d50e      	bpl.n	23fe3cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fe3ae:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fe3b0:	212f      	movs	r1, #47	; 0x2f
 23fe3b2:	4630      	mov	r0, r6
 23fe3b4:	f001 f8ab 	bl	23ff50e <strrchr>
    if (s1) {
 23fe3b8:	b100      	cbz	r0, 23fe3bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fe3ba:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fe3bc:	4931      	ldr	r1, [pc, #196]	; (23fe484 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fe3be:	2201      	movs	r2, #1
 23fe3c0:	a801      	add	r0, sp, #4
 23fe3c2:	f7ff f891 	bl	23fd4e8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe3c6:	4631      	mov	r1, r6
 23fe3c8:	f7ff f915 	bl	23fd5f6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fe3cc:	7923      	ldrb	r3, [r4, #4]
 23fe3ce:	079e      	lsls	r6, r3, #30
 23fe3d0:	d507      	bpl.n	23fe3e2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fe3d2:	492d      	ldr	r1, [pc, #180]	; (23fe488 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fe3d4:	2202      	movs	r2, #2
 23fe3d6:	a801      	add	r0, sp, #4
 23fe3d8:	f7ff f886 	bl	23fd4e8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe3dc:	68e1      	ldr	r1, [r4, #12]
 23fe3de:	f7ff f801 	bl	23fd3e4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fe3e2:	7923      	ldrb	r3, [r4, #4]
 23fe3e4:	0758      	lsls	r0, r3, #29
 23fe3e6:	d514      	bpl.n	23fe412 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe3e8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe3ea:	4633      	mov	r3, r6
 23fe3ec:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fe3ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe3f2:	b12a      	cbz	r2, 23fe400 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fe3f4:	2a20      	cmp	r2, #32
 23fe3f6:	d101      	bne.n	23fe3fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fe3f8:	461e      	mov	r6, r3
 23fe3fa:	e7f7      	b.n	23fe3ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fe3fc:	2a28      	cmp	r2, #40	; 0x28
 23fe3fe:	d1f5      	bne.n	23fe3ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fe400:	2202      	movs	r2, #2
 23fe402:	4922      	ldr	r1, [pc, #136]	; (23fe48c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fe404:	a801      	add	r0, sp, #4
 23fe406:	f7ff f86f 	bl	23fd4e8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe40a:	4631      	mov	r1, r6
 23fe40c:	1bba      	subs	r2, r7, r6
 23fe40e:	f7ff f87b 	bl	23fd508 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fe412:	7923      	ldrb	r3, [r4, #4]
 23fe414:	0719      	lsls	r1, r3, #28
 23fe416:	d507      	bpl.n	23fe428 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fe418:	491d      	ldr	r1, [pc, #116]	; (23fe490 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fe41a:	2201      	movs	r2, #1
 23fe41c:	a801      	add	r0, sp, #4
 23fe41e:	f7ff f863 	bl	23fd4e8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe422:	6961      	ldr	r1, [r4, #20]
 23fe424:	f7fe fff0 	bl	23fd408 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fe428:	7923      	ldrb	r3, [r4, #4]
 23fe42a:	06da      	lsls	r2, r3, #27
 23fe42c:	d508      	bpl.n	23fe440 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fe42e:	2204      	movs	r2, #4
 23fe430:	4918      	ldr	r1, [pc, #96]	; (23fe494 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fe432:	eb0d 0002 	add.w	r0, sp, r2
 23fe436:	f7ff f857 	bl	23fd4e8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe43a:	69a1      	ldr	r1, [r4, #24]
 23fe43c:	f7fe ffd2 	bl	23fd3e4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fe440:	7923      	ldrb	r3, [r4, #4]
 23fe442:	069b      	lsls	r3, r3, #26
 23fe444:	d507      	bpl.n	23fe456 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fe446:	4914      	ldr	r1, [pc, #80]	; (23fe498 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fe448:	2206      	movs	r2, #6
 23fe44a:	a801      	add	r0, sp, #4
 23fe44c:	f7ff f84c 	bl	23fd4e8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe450:	69e1      	ldr	r1, [r4, #28]
 23fe452:	f7ff f8d0 	bl	23fd5f6 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fe456:	a801      	add	r0, sp, #4
 23fe458:	f7fe ffa1 	bl	23fd39e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fe45c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fe45e:	2202      	movs	r2, #2
 23fe460:	6803      	ldr	r3, [r0, #0]
 23fe462:	490e      	ldr	r1, [pc, #56]	; (23fe49c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fe464:	68db      	ldr	r3, [r3, #12]
 23fe466:	4798      	blx	r3
}
 23fe468:	b005      	add	sp, #20
 23fe46a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fe46e:	bf00      	nop
 23fe470:	1007ae90 	.word	0x1007ae90
 23fe474:	023ffc00 	.word	0x023ffc00
 23fe478:	023ffb92 	.word	0x023ffb92
 23fe47c:	023ffbe0 	.word	0x023ffbe0
 23fe480:	023ffec7 	.word	0x023ffec7
 23fe484:	023ffbe2 	.word	0x023ffbe2
 23fe488:	023ffbe4 	.word	0x023ffbe4
 23fe48c:	023ffbe7 	.word	0x023ffbe7
 23fe490:	023ff77e 	.word	0x023ff77e
 23fe494:	023ffbea 	.word	0x023ffbea
 23fe498:	023ffbef 	.word	0x023ffbef
 23fe49c:	023ffbdd 	.word	0x023ffbdd

023fe4a0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fe4a0:	2300      	movs	r3, #0
 23fe4a2:	6840      	ldr	r0, [r0, #4]
 23fe4a4:	461a      	mov	r2, r3
 23fe4a6:	f7fe b9bd 	b.w	23fc824 <network_connect>

023fe4aa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fe4aa:	2200      	movs	r2, #0
 23fe4ac:	2102      	movs	r1, #2
 23fe4ae:	6840      	ldr	r0, [r0, #4]
 23fe4b0:	f7fe b9d4 	b.w	23fc85c <network_disconnect>

023fe4b4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fe4b4:	2200      	movs	r2, #0
 23fe4b6:	6840      	ldr	r0, [r0, #4]
 23fe4b8:	4611      	mov	r1, r2
 23fe4ba:	f7fe b9c1 	b.w	23fc840 <network_connecting>

023fe4be <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fe4be:	2200      	movs	r2, #0
 23fe4c0:	6840      	ldr	r0, [r0, #4]
 23fe4c2:	4611      	mov	r1, r2
 23fe4c4:	f7fe b9d8 	b.w	23fc878 <network_ready>

023fe4c8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fe4c8:	2300      	movs	r3, #0
 23fe4ca:	6840      	ldr	r0, [r0, #4]
 23fe4cc:	461a      	mov	r2, r3
 23fe4ce:	4619      	mov	r1, r3
 23fe4d0:	f7fe b9e0 	b.w	23fc894 <network_on>

023fe4d4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fe4d4:	2300      	movs	r3, #0
 23fe4d6:	6840      	ldr	r0, [r0, #4]
 23fe4d8:	461a      	mov	r2, r3
 23fe4da:	4619      	mov	r1, r3
 23fe4dc:	f7fe b9e8 	b.w	23fc8b0 <network_off>

023fe4e0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fe4e0:	2100      	movs	r1, #0
 23fe4e2:	6840      	ldr	r0, [r0, #4]
 23fe4e4:	f7fe ba2a 	b.w	23fc93c <network_is_on>

023fe4e8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fe4e8:	2100      	movs	r1, #0
 23fe4ea:	6840      	ldr	r0, [r0, #4]
 23fe4ec:	f7fe ba34 	b.w	23fc958 <network_is_off>

023fe4f0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fe4f0:	2200      	movs	r2, #0
 23fe4f2:	6840      	ldr	r0, [r0, #4]
 23fe4f4:	f081 0101 	eor.w	r1, r1, #1
 23fe4f8:	f7fe b9e8 	b.w	23fc8cc <network_listen>

023fe4fc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fe4fc:	2200      	movs	r2, #0
 23fe4fe:	6840      	ldr	r0, [r0, #4]
 23fe500:	f7fe ba00 	b.w	23fc904 <network_set_listen_timeout>

023fe504 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fe504:	2200      	movs	r2, #0
 23fe506:	6840      	ldr	r0, [r0, #4]
 23fe508:	4611      	mov	r1, r2
 23fe50a:	f7fe ba09 	b.w	23fc920 <network_get_listen_timeout>

023fe50e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fe50e:	2200      	movs	r2, #0
 23fe510:	6840      	ldr	r0, [r0, #4]
 23fe512:	4611      	mov	r1, r2
 23fe514:	f7fe b9e8 	b.w	23fc8e8 <network_listening>

023fe518 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fe518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe51c:	b095      	sub	sp, #84	; 0x54
 23fe51e:	4614      	mov	r4, r2
 23fe520:	460d      	mov	r5, r1
 23fe522:	4607      	mov	r7, r0
    IPAddress addr;
 23fe524:	f7fe fdea 	bl	23fd0fc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fe528:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fe52a:	221c      	movs	r2, #28
 23fe52c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fe52e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fe530:	f000 ff83 	bl	23ff43a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fe534:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe536:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fe538:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe53a:	2100      	movs	r1, #0
 23fe53c:	466b      	mov	r3, sp
 23fe53e:	aa0c      	add	r2, sp, #48	; 0x30
 23fe540:	f7fd ff24 	bl	23fc38c <netdb_getaddrinfo>
    if (!r) {
 23fe544:	4604      	mov	r4, r0
 23fe546:	2800      	cmp	r0, #0
 23fe548:	d14b      	bne.n	23fe5e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe54a:	4602      	mov	r2, r0
 23fe54c:	2101      	movs	r1, #1
 23fe54e:	6868      	ldr	r0, [r5, #4]
 23fe550:	f7fe f992 	bl	23fc878 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe554:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe556:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe558:	4622      	mov	r2, r4
 23fe55a:	6868      	ldr	r0, [r5, #4]
 23fe55c:	f7fe f98c 	bl	23fc878 <network_ready>
        bool ok = false;
 23fe560:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe562:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe564:	9e00      	ldr	r6, [sp, #0]
 23fe566:	2e00      	cmp	r6, #0
 23fe568:	d03b      	beq.n	23fe5e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fe56a:	2900      	cmp	r1, #0
 23fe56c:	d139      	bne.n	23fe5e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fe56e:	6873      	ldr	r3, [r6, #4]
 23fe570:	2b02      	cmp	r3, #2
 23fe572:	d003      	beq.n	23fe57c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fe574:	2b0a      	cmp	r3, #10
 23fe576:	d011      	beq.n	23fe59c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe578:	69f6      	ldr	r6, [r6, #28]
 23fe57a:	e7f4      	b.n	23fe566 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fe57c:	f1b8 0f00 	cmp.w	r8, #0
 23fe580:	d0fa      	beq.n	23fe578 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fe582:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fe584:	a806      	add	r0, sp, #24
 23fe586:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fe588:	1d3c      	adds	r4, r7, #4
 23fe58a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fe58c:	f7fe fde4 	bl	23fd158 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fe590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe594:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe596:	4641      	mov	r1, r8
 23fe598:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fe59a:	e7ed      	b.n	23fe578 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fe59c:	f1b9 0f00 	cmp.w	r9, #0
 23fe5a0:	d0ea      	beq.n	23fe578 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fe5a2:	2210      	movs	r2, #16
 23fe5a4:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fe5a6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fe5a8:	f000 ff47 	bl	23ff43a <memset>
                    a.v = 6;
 23fe5ac:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe5ae:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fe5b0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe5b4:	f104 0308 	add.w	r3, r4, #8
 23fe5b8:	3418      	adds	r4, #24
 23fe5ba:	462a      	mov	r2, r5
 23fe5bc:	6818      	ldr	r0, [r3, #0]
 23fe5be:	6859      	ldr	r1, [r3, #4]
 23fe5c0:	3308      	adds	r3, #8
 23fe5c2:	c203      	stmia	r2!, {r0, r1}
 23fe5c4:	42a3      	cmp	r3, r4
 23fe5c6:	4615      	mov	r5, r2
 23fe5c8:	d1f7      	bne.n	23fe5ba <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fe5ca:	a901      	add	r1, sp, #4
 23fe5cc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fe5ce:	1d3c      	adds	r4, r7, #4
 23fe5d0:	ad07      	add	r5, sp, #28
 23fe5d2:	f7fe fda1 	bl	23fd118 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fe5d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe5d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe5da:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe5dc:	4649      	mov	r1, r9
 23fe5de:	7023      	strb	r3, [r4, #0]
                    break;
 23fe5e0:	e7ca      	b.n	23fe578 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fe5e2:	9800      	ldr	r0, [sp, #0]
 23fe5e4:	f7fd fec4 	bl	23fc370 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fe5e8:	4638      	mov	r0, r7
 23fe5ea:	b015      	add	sp, #84	; 0x54
 23fe5ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fe5f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fe5f0:	4b02      	ldr	r3, [pc, #8]	; (23fe5fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fe5f2:	4a03      	ldr	r2, [pc, #12]	; (23fe600 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fe5f4:	601a      	str	r2, [r3, #0]
 23fe5f6:	2200      	movs	r2, #0
 23fe5f8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fe5fa:	4770      	bx	lr
 23fe5fc:	1007ae90 	.word	0x1007ae90
 23fe600:	023ffc78 	.word	0x023ffc78

023fe604 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fe604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe606:	4606      	mov	r6, r0
 23fe608:	460d      	mov	r5, r1
  size_t n = 0;
 23fe60a:	2400      	movs	r4, #0
 23fe60c:	188f      	adds	r7, r1, r2
  while (size--) {
 23fe60e:	42bd      	cmp	r5, r7
 23fe610:	d00c      	beq.n	23fe62c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fe612:	6833      	ldr	r3, [r6, #0]
 23fe614:	4630      	mov	r0, r6
 23fe616:	689b      	ldr	r3, [r3, #8]
 23fe618:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fe61c:	4798      	blx	r3
     if (chunk>=0)
 23fe61e:	1e03      	subs	r3, r0, #0
 23fe620:	db01      	blt.n	23fe626 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fe622:	441c      	add	r4, r3
  while (size--) {
 23fe624:	e7f3      	b.n	23fe60e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fe626:	2c00      	cmp	r4, #0
 23fe628:	bf08      	it	eq
 23fe62a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fe62c:	4620      	mov	r0, r4
 23fe62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe630 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fe630:	b513      	push	{r0, r1, r4, lr}
 23fe632:	4604      	mov	r4, r0
    }
 23fe634:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fe636:	b159      	cbz	r1, 23fe650 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fe638:	9101      	str	r1, [sp, #4]
 23fe63a:	f7fd f817 	bl	23fb66c <strlen>
 23fe63e:	4602      	mov	r2, r0
 23fe640:	4620      	mov	r0, r4
 23fe642:	6823      	ldr	r3, [r4, #0]
 23fe644:	9901      	ldr	r1, [sp, #4]
 23fe646:	68db      	ldr	r3, [r3, #12]
    }
 23fe648:	b002      	add	sp, #8
 23fe64a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fe64e:	4718      	bx	r3
    }
 23fe650:	b002      	add	sp, #8
 23fe652:	bd10      	pop	{r4, pc}

023fe654 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fe654:	6803      	ldr	r3, [r0, #0]
 23fe656:	689b      	ldr	r3, [r3, #8]
 23fe658:	4718      	bx	r3

023fe65a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fe65a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fe65c:	2a01      	cmp	r2, #1
 23fe65e:	bf98      	it	ls
 23fe660:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fe662:	b530      	push	{r4, r5, lr}
 23fe664:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fe666:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fe66a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fe66c:	460d      	mov	r5, r1
 23fe66e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fe672:	fb01 5312 	mls	r3, r1, r2, r5
 23fe676:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe67a:	2b09      	cmp	r3, #9
 23fe67c:	bf94      	ite	ls
 23fe67e:	3330      	addls	r3, #48	; 0x30
 23fe680:	3337      	addhi	r3, #55	; 0x37
 23fe682:	b2db      	uxtb	r3, r3
  } while(n);
 23fe684:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe686:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fe68a:	d9ef      	bls.n	23fe66c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fe68c:	4621      	mov	r1, r4
 23fe68e:	f7ff ffcf 	bl	23fe630 <_ZN5Print5writeEPKc>
}
 23fe692:	b00b      	add	sp, #44	; 0x2c
 23fe694:	bd30      	pop	{r4, r5, pc}
	...

023fe698 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23fe698:	2200      	movs	r2, #0
 23fe69a:	4b01      	ldr	r3, [pc, #4]	; (23fe6a0 <_GLOBAL__sub_I_RGB+0x8>)
 23fe69c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fe69e:	4770      	bx	lr
 23fe6a0:	1007ae98 	.word	0x1007ae98

023fe6a4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fe6a4:	b510      	push	{r4, lr}
 23fe6a6:	4604      	mov	r4, r0
 23fe6a8:	4608      	mov	r0, r1
{
    _spi = spi;
 23fe6aa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fe6ac:	f7fd fe7c 	bl	23fc3a8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe6b0:	2300      	movs	r3, #0
}
 23fe6b2:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe6b4:	6063      	str	r3, [r4, #4]
}
 23fe6b6:	bd10      	pop	{r4, pc}

023fe6b8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23fe6b8:	b510      	push	{r4, lr}
 23fe6ba:	4604      	mov	r4, r0
{
	free(buffer);
 23fe6bc:	6800      	ldr	r0, [r0, #0]
 23fe6be:	f7fe f967 	bl	23fc990 <free>
}
 23fe6c2:	4620      	mov	r0, r4
 23fe6c4:	bd10      	pop	{r4, pc}

023fe6c6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23fe6c6:	b510      	push	{r4, lr}
 23fe6c8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23fe6ca:	6800      	ldr	r0, [r0, #0]
 23fe6cc:	b108      	cbz	r0, 23fe6d2 <_ZN6String10invalidateEv+0xc>
 23fe6ce:	f7fe f95f 	bl	23fc990 <free>
	buffer = NULL;
 23fe6d2:	2300      	movs	r3, #0
	capacity = len = 0;
 23fe6d4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23fe6d8:	6023      	str	r3, [r4, #0]
}
 23fe6da:	bd10      	pop	{r4, pc}

023fe6dc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fe6dc:	b538      	push	{r3, r4, r5, lr}
 23fe6de:	4604      	mov	r4, r0
 23fe6e0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fe6e2:	6800      	ldr	r0, [r0, #0]
 23fe6e4:	3101      	adds	r1, #1
 23fe6e6:	f7fe f961 	bl	23fc9ac <realloc>
	if (newbuffer) {
 23fe6ea:	b110      	cbz	r0, 23fe6f2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23fe6ec:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23fe6f0:	2001      	movs	r0, #1
	}
	return 0;
}
 23fe6f2:	bd38      	pop	{r3, r4, r5, pc}

023fe6f4 <_ZN6String7reserveEj>:
{
 23fe6f4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23fe6f6:	6803      	ldr	r3, [r0, #0]
{
 23fe6f8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23fe6fa:	b123      	cbz	r3, 23fe706 <_ZN6String7reserveEj+0x12>
 23fe6fc:	6843      	ldr	r3, [r0, #4]
 23fe6fe:	428b      	cmp	r3, r1
 23fe700:	d301      	bcc.n	23fe706 <_ZN6String7reserveEj+0x12>
 23fe702:	2001      	movs	r0, #1
}
 23fe704:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23fe706:	4620      	mov	r0, r4
 23fe708:	f7ff ffe8 	bl	23fe6dc <_ZN6String12changeBufferEj>
 23fe70c:	2800      	cmp	r0, #0
 23fe70e:	d0f9      	beq.n	23fe704 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23fe710:	68a3      	ldr	r3, [r4, #8]
 23fe712:	2b00      	cmp	r3, #0
 23fe714:	d1f5      	bne.n	23fe702 <_ZN6String7reserveEj+0xe>
 23fe716:	6822      	ldr	r2, [r4, #0]
 23fe718:	7013      	strb	r3, [r2, #0]
 23fe71a:	e7f2      	b.n	23fe702 <_ZN6String7reserveEj+0xe>

023fe71c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fe71c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe71e:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fe720:	4611      	mov	r1, r2
 23fe722:	9201      	str	r2, [sp, #4]
{
 23fe724:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fe726:	f7ff ffe5 	bl	23fe6f4 <_ZN6String7reserveEj>
 23fe72a:	9a01      	ldr	r2, [sp, #4]
 23fe72c:	b928      	cbnz	r0, 23fe73a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fe72e:	4620      	mov	r0, r4
 23fe730:	f7ff ffc9 	bl	23fe6c6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fe734:	4620      	mov	r0, r4
 23fe736:	b003      	add	sp, #12
 23fe738:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fe73a:	4629      	mov	r1, r5
	len = length;
 23fe73c:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fe73e:	6820      	ldr	r0, [r4, #0]
 23fe740:	f000 fe54 	bl	23ff3ec <memcpy>
	buffer[len] = 0;
 23fe744:	2100      	movs	r1, #0
 23fe746:	6822      	ldr	r2, [r4, #0]
 23fe748:	68a3      	ldr	r3, [r4, #8]
 23fe74a:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fe74c:	e7f2      	b.n	23fe734 <_ZN6String4copyEPKcj+0x18>

023fe74e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23fe74e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fe750:	b513      	push	{r0, r1, r4, lr}
 23fe752:	4604      	mov	r4, r0
	capacity = 0;
 23fe754:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fe758:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fe75a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23fe75c:	b141      	cbz	r1, 23fe770 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23fe75e:	4608      	mov	r0, r1
 23fe760:	9101      	str	r1, [sp, #4]
 23fe762:	f7fc ff83 	bl	23fb66c <strlen>
 23fe766:	9901      	ldr	r1, [sp, #4]
 23fe768:	4602      	mov	r2, r0
 23fe76a:	4620      	mov	r0, r4
 23fe76c:	f7ff ffd6 	bl	23fe71c <_ZN6String4copyEPKcj>
}
 23fe770:	4620      	mov	r0, r4
 23fe772:	b002      	add	sp, #8
 23fe774:	bd10      	pop	{r4, pc}

023fe776 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fe776:	b538      	push	{r3, r4, r5, lr}
 23fe778:	4605      	mov	r5, r0
	if (buffer) {
 23fe77a:	6800      	ldr	r0, [r0, #0]
{
 23fe77c:	460c      	mov	r4, r1
	if (buffer) {
 23fe77e:	b170      	cbz	r0, 23fe79e <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
 23fe780:	686a      	ldr	r2, [r5, #4]
 23fe782:	688b      	ldr	r3, [r1, #8]
 23fe784:	429a      	cmp	r2, r3
 23fe786:	d308      	bcc.n	23fe79a <_ZN6String4moveERS_+0x24>
 23fe788:	6809      	ldr	r1, [r1, #0]
 23fe78a:	b131      	cbz	r1, 23fe79a <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
 23fe78c:	f000 fea3 	bl	23ff4d6 <strcpy>
			len = rhs.len;
 23fe790:	68a3      	ldr	r3, [r4, #8]
 23fe792:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23fe794:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23fe796:	60a3      	str	r3, [r4, #8]
}
 23fe798:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23fe79a:	f7fe f8f9 	bl	23fc990 <free>
	buffer = rhs.buffer;
 23fe79e:	6823      	ldr	r3, [r4, #0]
 23fe7a0:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23fe7a2:	6863      	ldr	r3, [r4, #4]
 23fe7a4:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23fe7a6:	68a3      	ldr	r3, [r4, #8]
 23fe7a8:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23fe7aa:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23fe7ac:	e9c4 3300 	strd	r3, r3, [r4]
 23fe7b0:	e7f1      	b.n	23fe796 <_ZN6String4moveERS_+0x20>

023fe7b2 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23fe7b2:	2300      	movs	r3, #0
String::String(String &&rval)
 23fe7b4:	b510      	push	{r4, lr}
 23fe7b6:	4604      	mov	r4, r0
	capacity = 0;
 23fe7b8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fe7bc:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fe7be:	7303      	strb	r3, [r0, #12]
	move(rval);
 23fe7c0:	f7ff ffd9 	bl	23fe776 <_ZN6String4moveERS_>
}
 23fe7c4:	4620      	mov	r0, r4
 23fe7c6:	bd10      	pop	{r4, pc}

023fe7c8 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fe7c8:	4288      	cmp	r0, r1
{
 23fe7ca:	b510      	push	{r4, lr}
 23fe7cc:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fe7ce:	d005      	beq.n	23fe7dc <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fe7d0:	680b      	ldr	r3, [r1, #0]
 23fe7d2:	b12b      	cbz	r3, 23fe7e0 <_ZN6StringaSERKS_+0x18>
 23fe7d4:	688a      	ldr	r2, [r1, #8]
 23fe7d6:	4619      	mov	r1, r3
 23fe7d8:	f7ff ffa0 	bl	23fe71c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fe7dc:	4620      	mov	r0, r4
 23fe7de:	bd10      	pop	{r4, pc}
	else invalidate();
 23fe7e0:	f7ff ff71 	bl	23fe6c6 <_ZN6String10invalidateEv>
 23fe7e4:	e7fa      	b.n	23fe7dc <_ZN6StringaSERKS_+0x14>

023fe7e6 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fe7e6:	2300      	movs	r3, #0
String::String(const String &value)
 23fe7e8:	b510      	push	{r4, lr}
 23fe7ea:	4604      	mov	r4, r0
	capacity = 0;
 23fe7ec:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fe7f0:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fe7f2:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fe7f4:	f7ff ffe8 	bl	23fe7c8 <_ZN6StringaSERKS_>
}
 23fe7f8:	4620      	mov	r0, r4
 23fe7fa:	bd10      	pop	{r4, pc}

023fe7fc <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 23fe7fc:	4288      	cmp	r0, r1
{
 23fe7fe:	b510      	push	{r4, lr}
 23fe800:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 23fe802:	d001      	beq.n	23fe808 <_ZN6StringaSEOS_+0xc>
 23fe804:	f7ff ffb7 	bl	23fe776 <_ZN6String4moveERS_>
	return *this;
}
 23fe808:	4620      	mov	r0, r4
 23fe80a:	bd10      	pop	{r4, pc}

023fe80c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23fe80c:	b570      	push	{r4, r5, r6, lr}
 23fe80e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 23fe810:	460e      	mov	r6, r1
 23fe812:	b909      	cbnz	r1, 23fe818 <_ZN6String6concatEPKcj+0xc>
 23fe814:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 23fe816:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 23fe818:	b16a      	cbz	r2, 23fe836 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 23fe81a:	6884      	ldr	r4, [r0, #8]
 23fe81c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 23fe81e:	4621      	mov	r1, r4
 23fe820:	f7ff ff68 	bl	23fe6f4 <_ZN6String7reserveEj>
 23fe824:	2800      	cmp	r0, #0
 23fe826:	d0f5      	beq.n	23fe814 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 23fe828:	6828      	ldr	r0, [r5, #0]
 23fe82a:	68ab      	ldr	r3, [r5, #8]
 23fe82c:	4631      	mov	r1, r6
 23fe82e:	4418      	add	r0, r3
 23fe830:	f000 fe51 	bl	23ff4d6 <strcpy>
	len = newlen;
 23fe834:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 23fe836:	2001      	movs	r0, #1
 23fe838:	e7ed      	b.n	23fe816 <_ZN6String6concatEPKcj+0xa>

023fe83a <_ZN6String6concatEj>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned int num)
{
 23fe83a:	b513      	push	{r0, r1, r4, lr}
	char buf[6];
	utoa(num, buf, 10);
 23fe83c:	220a      	movs	r2, #10
{
 23fe83e:	4604      	mov	r4, r0
 23fe840:	4608      	mov	r0, r1
	utoa(num, buf, 10);
 23fe842:	4669      	mov	r1, sp
 23fe844:	f000 fa98 	bl	23fed78 <utoa>
	return concat(buf, strlen(buf));
 23fe848:	4668      	mov	r0, sp
 23fe84a:	f7fc ff0f 	bl	23fb66c <strlen>
 23fe84e:	4669      	mov	r1, sp
 23fe850:	4602      	mov	r2, r0
 23fe852:	4620      	mov	r0, r4
 23fe854:	f7ff ffda 	bl	23fe80c <_ZN6String6concatEPKcj>
}
 23fe858:	b002      	add	sp, #8
 23fe85a:	bd10      	pop	{r4, pc}

023fe85c <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 23fe85c:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 23fe85e:	688a      	ldr	r2, [r1, #8]
 23fe860:	6809      	ldr	r1, [r1, #0]
{
 23fe862:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 23fe864:	f7ff ffd2 	bl	23fe80c <_ZN6String6concatEPKcj>
 23fe868:	b910      	cbnz	r0, 23fe870 <_ZplRK15StringSumHelperRK6String+0x14>
 23fe86a:	4620      	mov	r0, r4
 23fe86c:	f7ff ff2b 	bl	23fe6c6 <_ZN6String10invalidateEv>
	return a;
}
 23fe870:	4620      	mov	r0, r4
 23fe872:	bd10      	pop	{r4, pc}

023fe874 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 23fe874:	b513      	push	{r0, r1, r4, lr}
 23fe876:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 23fe878:	b929      	cbnz	r1, 23fe886 <_ZplRK15StringSumHelperPKc+0x12>
 23fe87a:	4620      	mov	r0, r4
 23fe87c:	f7ff ff23 	bl	23fe6c6 <_ZN6String10invalidateEv>
	return a;
}
 23fe880:	4620      	mov	r0, r4
 23fe882:	b002      	add	sp, #8
 23fe884:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 23fe886:	4608      	mov	r0, r1
 23fe888:	9101      	str	r1, [sp, #4]
 23fe88a:	f7fc feef 	bl	23fb66c <strlen>
 23fe88e:	9901      	ldr	r1, [sp, #4]
 23fe890:	4602      	mov	r2, r0
 23fe892:	4620      	mov	r0, r4
 23fe894:	f7ff ffba 	bl	23fe80c <_ZN6String6concatEPKcj>
 23fe898:	2800      	cmp	r0, #0
 23fe89a:	d0ee      	beq.n	23fe87a <_ZplRK15StringSumHelperPKc+0x6>
 23fe89c:	e7f0      	b.n	23fe880 <_ZplRK15StringSumHelperPKc+0xc>

023fe89e <_ZplRK15StringSumHelperj>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
{
 23fe89e:	b510      	push	{r4, lr}
 23fe8a0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
 23fe8a2:	f7ff ffca 	bl	23fe83a <_ZN6String6concatEj>
 23fe8a6:	b910      	cbnz	r0, 23fe8ae <_ZplRK15StringSumHelperj+0x10>
 23fe8a8:	4620      	mov	r0, r4
 23fe8aa:	f7ff ff0c 	bl	23fe6c6 <_ZN6String10invalidateEv>
	return a;
}
 23fe8ae:	4620      	mov	r0, r4
 23fe8b0:	bd10      	pop	{r4, pc}

023fe8b2 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 23fe8b2:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 23fe8b4:	6882      	ldr	r2, [r0, #8]
 23fe8b6:	b93a      	cbnz	r2, 23fe8c8 <_ZNK6String6equalsEPKc+0x16>
 23fe8b8:	b121      	cbz	r1, 23fe8c4 <_ZNK6String6equalsEPKc+0x12>
 23fe8ba:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 23fe8bc:	fab0 f080 	clz	r0, r0
 23fe8c0:	0940      	lsrs	r0, r0, #5
 23fe8c2:	e000      	b.n	23fe8c6 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 23fe8c4:	2001      	movs	r0, #1
}
 23fe8c6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 23fe8c8:	6800      	ldr	r0, [r0, #0]
 23fe8ca:	b909      	cbnz	r1, 23fe8d0 <_ZNK6String6equalsEPKc+0x1e>
 23fe8cc:	7800      	ldrb	r0, [r0, #0]
 23fe8ce:	e7f5      	b.n	23fe8bc <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 23fe8d0:	f7fc fec2 	bl	23fb658 <strcmp>
 23fe8d4:	e7f2      	b.n	23fe8bc <_ZNK6String6equalsEPKc+0xa>
	...

023fe8d8 <_ZN8particle16ApplicationAssetC1ERKS0_>:
class ApplicationAsset: public Stream {
 23fe8d8:	b538      	push	{r3, r4, r5, lr}
 23fe8da:	460d      	mov	r5, r1
 23fe8dc:	4604      	mov	r4, r0
class Print
 23fe8de:	684b      	ldr	r3, [r1, #4]
 23fe8e0:	3110      	adds	r1, #16
 23fe8e2:	6043      	str	r3, [r0, #4]
class Stream : public Print
 23fe8e4:	f851 3c08 	ldr.w	r3, [r1, #-8]
 23fe8e8:	6083      	str	r3, [r0, #8]
 23fe8ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 23fe8ee:	60c3      	str	r3, [r0, #12]
 23fe8f0:	4b13      	ldr	r3, [pc, #76]	; (23fe940 <_ZN8particle16ApplicationAssetC1ERKS0_+0x68>)
 23fe8f2:	f840 3b10 	str.w	r3, [r0], #16
 23fe8f6:	f7ff ff76 	bl	23fe7e6 <_ZN6StringC1ERKS_>
    AssetHash(const AssetHash& other) = default;
 23fe8fa:	f895 3020 	ldrb.w	r3, [r5, #32]
        : Buffer(other.size()) {
 23fe8fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 23fe902:	f884 3020 	strb.w	r3, [r4, #32]
 23fe906:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 23fe908:	f7fe f8fe 	bl	23fcb08 <_ZN8particle6BufferC1Ej>
    if (size_ > 0 && other.size() > 0) {
 23fe90c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 23fe90e:	b12a      	cbz	r2, 23fe91c <_ZN8particle16ApplicationAssetC1ERKS0_+0x44>
 23fe910:	6aab      	ldr	r3, [r5, #40]	; 0x28
 23fe912:	b11b      	cbz	r3, 23fe91c <_ZN8particle16ApplicationAssetC1ERKS0_+0x44>
        memcpy(buffer_.get(), other.buffer_.get(), size_);
 23fe914:	6a69      	ldr	r1, [r5, #36]	; 0x24
 23fe916:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fe918:	f000 fd68 	bl	23ff3ec <memcpy>
 23fe91c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 23fe91e:	62e3      	str	r3, [r4, #44]	; 0x2c
 23fe920:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 23fe922:	6323      	str	r3, [r4, #48]	; 0x30
 23fe924:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 23fe928:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fe92c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fe92e:	63a3      	str	r3, [r4, #56]	; 0x38
      : _M_pi(__r._M_pi)
 23fe930:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 23fe932:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (_M_pi != 0)
 23fe934:	b113      	cbz	r3, 23fe93c <_ZN8particle16ApplicationAssetC1ERKS0_+0x64>
    { ++_M_use_count; }
 23fe936:	685a      	ldr	r2, [r3, #4]
 23fe938:	3201      	adds	r2, #1
 23fe93a:	605a      	str	r2, [r3, #4]
 23fe93c:	4620      	mov	r0, r4
 23fe93e:	bd38      	pop	{r3, r4, r5, pc}
 23fe940:	023ffad8 	.word	0x023ffad8

023fe944 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fe944:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe948:	4606      	mov	r6, r0
 23fe94a:	460c      	mov	r4, r1
 23fe94c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 23fe94e:	d915      	bls.n	23fe97c <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
 23fe950:	4290      	cmp	r0, r2
 23fe952:	d214      	bcs.n	23fe97e <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3a>
            --end;
 23fe954:	f1a2 0540 	sub.w	r5, r2, #64	; 0x40
            dest += end - p - 1;
 23fe958:	1a6b      	subs	r3, r5, r1
 23fe95a:	f1a1 0740 	sub.w	r7, r1, #64	; 0x40
 23fe95e:	441e      	add	r6, r3
            for (; end != p; --end, --dest) {
 23fe960:	42af      	cmp	r7, r5
 23fe962:	d01a      	beq.n	23fe99a <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x56>
                new(dest) T(std::move(*end));
 23fe964:	b11e      	cbz	r6, 23fe96e <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fe966:	4629      	mov	r1, r5
 23fe968:	4630      	mov	r0, r6
 23fe96a:	f7ff ffb5 	bl	23fe8d8 <_ZN8particle16ApplicationAssetC1ERKS0_>
                end->~T();
 23fe96e:	682b      	ldr	r3, [r5, #0]
 23fe970:	4628      	mov	r0, r5
 23fe972:	681b      	ldr	r3, [r3, #0]
 23fe974:	4798      	blx	r3
            for (; end != p; --end, --dest) {
 23fe976:	3d40      	subs	r5, #64	; 0x40
 23fe978:	3e40      	subs	r6, #64	; 0x40
 23fe97a:	e7f1      	b.n	23fe960 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fe97c:	d00d      	beq.n	23fe99a <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x56>
            for (; p != end; ++p, ++dest) {
 23fe97e:	42ac      	cmp	r4, r5
 23fe980:	d00b      	beq.n	23fe99a <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x56>
                new(dest) T(std::move(*p));
 23fe982:	b11e      	cbz	r6, 23fe98c <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x48>
 23fe984:	4621      	mov	r1, r4
 23fe986:	4630      	mov	r0, r6
 23fe988:	f7ff ffa6 	bl	23fe8d8 <_ZN8particle16ApplicationAssetC1ERKS0_>
                p->~T();
 23fe98c:	6823      	ldr	r3, [r4, #0]
 23fe98e:	4620      	mov	r0, r4
 23fe990:	681b      	ldr	r3, [r3, #0]
 23fe992:	4798      	blx	r3
            for (; p != end; ++p, ++dest) {
 23fe994:	3440      	adds	r4, #64	; 0x40
 23fe996:	3640      	adds	r6, #64	; 0x40
 23fe998:	e7f1      	b.n	23fe97e <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3a>
    }
 23fe99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe99c <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fe99c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fe99e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fe9a0:	4605      	mov	r5, r0
        if (n > 0) {
 23fe9a2:	dd11      	ble.n	23fe9c8 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fe9a4:	01b0      	lsls	r0, r6, #6
 23fe9a6:	f7fd ffe5 	bl	23fc974 <malloc>
            if (!d) {
 23fe9aa:	4604      	mov	r4, r0
 23fe9ac:	b158      	cbz	r0, 23fe9c6 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fe9ae:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe9b2:	eb01 1282 	add.w	r2, r1, r2, lsl #6
 23fe9b6:	f7ff ffc5 	bl	23fe944 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fe9ba:	6828      	ldr	r0, [r5, #0]
 23fe9bc:	f7fd ffe8 	bl	23fc990 <free>
        return true;
 23fe9c0:	2001      	movs	r0, #1
        data_ = d;
 23fe9c2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fe9c4:	60ae      	str	r6, [r5, #8]
    }
 23fe9c6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fe9c8:	2400      	movs	r4, #0
 23fe9ca:	e7f6      	b.n	23fe9ba <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023fe9cc <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe9cc:	b530      	push	{r4, r5, lr}
 23fe9ce:	4604      	mov	r4, r0
 23fe9d0:	b091      	sub	sp, #68	; 0x44
    return insert(size_, std::move(value));
 23fe9d2:	6845      	ldr	r5, [r0, #4]
 23fe9d4:	4668      	mov	r0, sp
 23fe9d6:	f7ff ff7f 	bl	23fe8d8 <_ZN8particle16ApplicationAssetC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe9da:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fe9de:	4299      	cmp	r1, r3
 23fe9e0:	da0f      	bge.n	23fea02 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x36>
    T* const p = data_ + i;
 23fe9e2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fe9e4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe9e6:	eb03 1585 	add.w	r5, r3, r5, lsl #6
    move(p + 1, p, data_ + size_);
 23fe9ea:	4629      	mov	r1, r5
 23fe9ec:	eb03 1282 	add.w	r2, r3, r2, lsl #6
 23fe9f0:	f105 0040 	add.w	r0, r5, #64	; 0x40
 23fe9f4:	f7ff ffa6 	bl	23fe944 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fe9f8:	b975      	cbnz	r5, 23fea18 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x4c>
    ++size_;
 23fe9fa:	6863      	ldr	r3, [r4, #4]
 23fe9fc:	3301      	adds	r3, #1
 23fe9fe:	6063      	str	r3, [r4, #4]
    return true;
 23fea00:	e005      	b.n	23fea0e <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x42>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fea02:	4620      	mov	r0, r4
 23fea04:	3101      	adds	r1, #1
 23fea06:	f7ff ffc9 	bl	23fe99c <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fea0a:	2800      	cmp	r0, #0
 23fea0c:	d1e9      	bne.n	23fe9e2 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x16>
    return insert(size_, std::move(value));
 23fea0e:	4668      	mov	r0, sp
 23fea10:	f7fe f954 	bl	23fccbc <_ZN8particle16ApplicationAssetD1Ev>
}
 23fea14:	b011      	add	sp, #68	; 0x44
 23fea16:	bd30      	pop	{r4, r5, pc}
    new(p) T(std::move(value));
 23fea18:	4669      	mov	r1, sp
 23fea1a:	4628      	mov	r0, r5
 23fea1c:	f7ff ff5c 	bl	23fe8d8 <_ZN8particle16ApplicationAssetC1ERKS0_>
 23fea20:	e7eb      	b.n	23fe9fa <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x2e>

023fea22 <_ZN11SystemClass15assetsAvailableEv>:
        assets.append(ApplicationAsset(a));
    }
    return assets;
}

spark::Vector<ApplicationAsset> SystemClass::assetsAvailable() {
 23fea22:	b570      	push	{r4, r5, r6, lr}
        capacity_(0) {
 23fea24:	2400      	movs	r4, #0
    spark::Vector<ApplicationAsset> assets;
    asset_manager_info info = {};
 23fea26:	261c      	movs	r6, #28
spark::Vector<ApplicationAsset> SystemClass::assetsAvailable() {
 23fea28:	b098      	sub	sp, #96	; 0x60
    asset_manager_info info = {};
 23fea2a:	4621      	mov	r1, r4
 23fea2c:	e9c0 4400 	strd	r4, r4, [r0]
 23fea30:	6084      	str	r4, [r0, #8]
 23fea32:	4632      	mov	r2, r6
spark::Vector<ApplicationAsset> SystemClass::assetsAvailable() {
 23fea34:	4605      	mov	r5, r0
    asset_manager_info info = {};
 23fea36:	a801      	add	r0, sp, #4
 23fea38:	f000 fcff 	bl	23ff43a <memset>
    info.size = sizeof(info);
    int r = asset_manager_get_info(&info, nullptr);
 23fea3c:	4621      	mov	r1, r4
 23fea3e:	a801      	add	r0, sp, #4
    info.size = sizeof(info);
 23fea40:	f8ad 6004 	strh.w	r6, [sp, #4]
    int r = asset_manager_get_info(&info, nullptr);
 23fea44:	f7fd fe54 	bl	23fc6f0 <asset_manager_get_info>
    if (r) {
 23fea48:	4604      	mov	r4, r0
 23fea4a:	b9c0      	cbnz	r0, 23fea7e <_ZN11SystemClass15assetsAvailableEv+0x5c>
        return assets;
    }
    SCOPE_GUARD({
        asset_manager_free_info(&info, nullptr);
    });
    for (size_t i = 0; i < info.available_count; i++) {
 23fea4c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 23fea50:	42a3      	cmp	r3, r4
 23fea52:	d910      	bls.n	23fea76 <_ZN11SystemClass15assetsAvailableEv+0x54>
        asset_manager_asset* a = (asset_manager_asset*)(((uint8_t*)info.available) + info.asset_size * i);
        assets.append(ApplicationAsset(a));
 23fea54:	9b06      	ldr	r3, [sp, #24]
        asset_manager_asset* a = (asset_manager_asset*)(((uint8_t*)info.available) + info.asset_size * i);
 23fea56:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        assets.append(ApplicationAsset(a));
 23fea5a:	a808      	add	r0, sp, #32
 23fea5c:	fb04 3101 	mla	r1, r4, r1, r3
 23fea60:	f7fe f8a8 	bl	23fcbb4 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset>
 23fea64:	4628      	mov	r0, r5
 23fea66:	a908      	add	r1, sp, #32
 23fea68:	f7ff ffb0 	bl	23fe9cc <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0>
 23fea6c:	a808      	add	r0, sp, #32
 23fea6e:	f7fe f925 	bl	23fccbc <_ZN8particle16ApplicationAssetD1Ev>
    for (size_t i = 0; i < info.available_count; i++) {
 23fea72:	3401      	adds	r4, #1
 23fea74:	e7ea      	b.n	23fea4c <_ZN11SystemClass15assetsAvailableEv+0x2a>
    SCOPE_GUARD({
 23fea76:	2100      	movs	r1, #0
 23fea78:	a801      	add	r0, sp, #4
 23fea7a:	f7fd fe47 	bl	23fc70c <asset_manager_free_info>
    }
    return assets;
}
 23fea7e:	4628      	mov	r0, r5
 23fea80:	b018      	add	sp, #96	; 0x60
 23fea82:	bd70      	pop	{r4, r5, r6, pc}

023fea84 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fea84:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fea86:	2000      	movs	r0, #0
 23fea88:	4b04      	ldr	r3, [pc, #16]	; (23fea9c <_GLOBAL__sub_I_System+0x18>)
 23fea8a:	601a      	str	r2, [r3, #0]
 23fea8c:	4b04      	ldr	r3, [pc, #16]	; (23feaa0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fea8e:	4a05      	ldr	r2, [pc, #20]	; (23feaa4 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fea90:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fea94:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fea96:	f7fd bdf3 	b.w	23fc680 <set_system_mode>
 23fea9a:	bf00      	nop
 23fea9c:	1007aeb4 	.word	0x1007aeb4
 23feaa0:	1007aea8 	.word	0x1007aea8
 23feaa4:	ffff0000 	.word	0xffff0000

023feaa8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23feaa8:	4b02      	ldr	r3, [pc, #8]	; (23feab4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23feaaa:	681a      	ldr	r2, [r3, #0]
 23feaac:	4b02      	ldr	r3, [pc, #8]	; (23feab8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23feaae:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23feab0:	4770      	bx	lr
 23feab2:	bf00      	nop
 23feab4:	1007ad74 	.word	0x1007ad74
 23feab8:	1007aeb8 	.word	0x1007aeb8

023feabc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23feabc:	4770      	bx	lr

023feabe <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23feabe:	7441      	strb	r1, [r0, #17]
}
 23feac0:	4770      	bx	lr

023feac2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23feac2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23feac4:	7c00      	ldrb	r0, [r0, #16]
 23feac6:	f7fd fced 	bl	23fc4a4 <hal_usart_available_data_for_write>
}
 23feaca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23feace:	bd08      	pop	{r3, pc}

023fead0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fead0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fead2:	7c00      	ldrb	r0, [r0, #16]
 23fead4:	f7fd fca0 	bl	23fc418 <hal_usart_available>
}
 23fead8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23feadc:	bd08      	pop	{r3, pc}

023feade <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23feade:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23feae0:	7c00      	ldrb	r0, [r0, #16]
 23feae2:	f7fd fcb5 	bl	23fc450 <hal_usart_peek>
}
 23feae6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23feaea:	bd08      	pop	{r3, pc}

023feaec <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23feaec:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23feaee:	7c00      	ldrb	r0, [r0, #16]
 23feaf0:	f7fd fca0 	bl	23fc434 <hal_usart_read>
}
 23feaf4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23feaf8:	bd08      	pop	{r3, pc}

023feafa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23feafa:	7c00      	ldrb	r0, [r0, #16]
 23feafc:	f7fd bcb6 	b.w	23fc46c <hal_usart_flush>

023feb00 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23feb00:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23feb02:	7c45      	ldrb	r5, [r0, #17]
{
 23feb04:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23feb06:	b12d      	cbz	r5, 23feb14 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23feb08:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23feb0a:	b003      	add	sp, #12
 23feb0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23feb10:	f7fd bc74 	b.w	23fc3fc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23feb14:	7c00      	ldrb	r0, [r0, #16]
 23feb16:	9101      	str	r1, [sp, #4]
 23feb18:	f7fd fcc4 	bl	23fc4a4 <hal_usart_available_data_for_write>
 23feb1c:	2800      	cmp	r0, #0
 23feb1e:	9901      	ldr	r1, [sp, #4]
 23feb20:	dcf2      	bgt.n	23feb08 <_ZN11USARTSerial5writeEh+0x8>
}
 23feb22:	4628      	mov	r0, r5
 23feb24:	b003      	add	sp, #12
 23feb26:	bd30      	pop	{r4, r5, pc}

023feb28 <_ZN11USARTSerialD0Ev>:
 23feb28:	b510      	push	{r4, lr}
 23feb2a:	4604      	mov	r4, r0
 23feb2c:	2114      	movs	r1, #20
 23feb2e:	f7fc fdc8 	bl	23fb6c2 <_ZdlPvj>
 23feb32:	4620      	mov	r0, r4
 23feb34:	bd10      	pop	{r4, pc}
	...

023feb38 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23feb38:	b510      	push	{r4, lr}
    Stream() {_timeout=1000;}
 23feb3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23feb3e:	4604      	mov	r4, r0
 23feb40:	4608      	mov	r0, r1
 23feb42:	4611      	mov	r1, r2
 23feb44:	2200      	movs	r2, #0
 23feb46:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23feb4a:	4b04      	ldr	r3, [pc, #16]	; (23feb5c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23feb4c:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23feb4e:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23feb50:	2301      	movs	r3, #1
 23feb52:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23feb54:	f7fd fcd0 	bl	23fc4f8 <hal_usart_init_ex>
}
 23feb58:	4620      	mov	r0, r4
 23feb5a:	bd10      	pop	{r4, pc}
 23feb5c:	023ffcd0 	.word	0x023ffcd0

023feb60 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23feb60:	2300      	movs	r3, #0
 23feb62:	7c00      	ldrb	r0, [r0, #16]
 23feb64:	f7fd bcac 	b.w	23fc4c0 <hal_usart_begin_config>

023feb68 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23feb68:	2200      	movs	r2, #0
 23feb6a:	f7ff bff9 	b.w	23feb60 <_ZN11USARTSerial5beginEmm>

023feb6e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23feb6e:	7c00      	ldrb	r0, [r0, #16]
 23feb70:	f7fd bc36 	b.w	23fc3e0 <hal_usart_end>

023feb74 <_ZN11USARTSerial5writeEt>:

size_t USARTSerial::write(uint16_t c)
{
  return hal_usart_write_nine_bits(_serial, c);
 23feb74:	7c00      	ldrb	r0, [r0, #16]
 23feb76:	f7fd bcb1 	b.w	23fc4dc <hal_usart_write_nine_bits>

023feb7a <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23feb7a:	7c00      	ldrb	r0, [r0, #16]
 23feb7c:	f7fd bc84 	b.w	23fc488 <hal_usart_is_enabled>

023feb80 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23feb80:	7441      	strb	r1, [r0, #17]
}
 23feb82:	4770      	bx	lr

023feb84 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23feb84:	4770      	bx	lr

023feb86 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23feb86:	4770      	bx	lr

023feb88 <_ZN9USBSerial4readEv>:
{
 23feb88:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23feb8a:	2100      	movs	r1, #0
 23feb8c:	7c00      	ldrb	r0, [r0, #16]
 23feb8e:	f7fd fd07 	bl	23fc5a0 <HAL_USB_USART_Receive_Data>
}
 23feb92:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23feb96:	bd08      	pop	{r3, pc}

023feb98 <_ZN9USBSerial4peekEv>:
{
 23feb98:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23feb9a:	2101      	movs	r1, #1
 23feb9c:	7c00      	ldrb	r0, [r0, #16]
 23feb9e:	f7fd fcff 	bl	23fc5a0 <HAL_USB_USART_Receive_Data>
}
 23feba2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23feba6:	bd08      	pop	{r3, pc}

023feba8 <_ZN9USBSerial17availableForWriteEv>:
{
 23feba8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23febaa:	7c00      	ldrb	r0, [r0, #16]
 23febac:	f7fd fcea 	bl	23fc584 <HAL_USB_USART_Available_Data_For_Write>
}
 23febb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23febb4:	bd08      	pop	{r3, pc}

023febb6 <_ZN9USBSerial9availableEv>:
{
 23febb6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23febb8:	7c00      	ldrb	r0, [r0, #16]
 23febba:	f7fd fcd5 	bl	23fc568 <HAL_USB_USART_Available_Data>
}
 23febbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23febc2:	bd08      	pop	{r3, pc}

023febc4 <_ZN9USBSerial5writeEh>:
{
 23febc4:	b513      	push	{r0, r1, r4, lr}
 23febc6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23febc8:	7c00      	ldrb	r0, [r0, #16]
{
 23febca:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23febcc:	f7fd fcda 	bl	23fc584 <HAL_USB_USART_Available_Data_For_Write>
 23febd0:	2800      	cmp	r0, #0
 23febd2:	9901      	ldr	r1, [sp, #4]
 23febd4:	dc01      	bgt.n	23febda <_ZN9USBSerial5writeEh+0x16>
 23febd6:	7c60      	ldrb	r0, [r4, #17]
 23febd8:	b120      	cbz	r0, 23febe4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23febda:	7c20      	ldrb	r0, [r4, #16]
 23febdc:	f7fd fcee 	bl	23fc5bc <HAL_USB_USART_Send_Data>
 23febe0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23febe4:	b002      	add	sp, #8
 23febe6:	bd10      	pop	{r4, pc}

023febe8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23febe8:	7c00      	ldrb	r0, [r0, #16]
 23febea:	f7fd bcf5 	b.w	23fc5d8 <HAL_USB_USART_Flush_Data>

023febee <_ZN9USBSerialD0Ev>:
 23febee:	b510      	push	{r4, lr}
 23febf0:	4604      	mov	r4, r0
 23febf2:	2114      	movs	r1, #20
 23febf4:	f7fc fd65 	bl	23fb6c2 <_ZdlPvj>
 23febf8:	4620      	mov	r0, r4
 23febfa:	bd10      	pop	{r4, pc}

023febfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23febfc:	b510      	push	{r4, lr}
 23febfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fec02:	4604      	mov	r4, r0
 23fec04:	4608      	mov	r0, r1
 23fec06:	2100      	movs	r1, #0
 23fec08:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fec0c:	4b04      	ldr	r3, [pc, #16]	; (23fec20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fec0e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fec10:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fec12:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fec14:	4611      	mov	r1, r2
  _blocking = true;
 23fec16:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fec18:	f7fd fc7c 	bl	23fc514 <HAL_USB_USART_Init>
}
 23fec1c:	4620      	mov	r0, r4
 23fec1e:	bd10      	pop	{r4, pc}
 23fec20:	023ffd00 	.word	0x023ffd00

023fec24 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fec24:	2200      	movs	r2, #0
 23fec26:	7c00      	ldrb	r0, [r0, #16]
 23fec28:	f7fd bc82 	b.w	23fc530 <HAL_USB_USART_Begin>

023fec2c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fec2c:	7c00      	ldrb	r0, [r0, #16]
 23fec2e:	f7fd bc8d 	b.w	23fc54c <HAL_USB_USART_End>

023fec32 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23fec32:	7c00      	ldrb	r0, [r0, #16]
 23fec34:	f7fd bcde 	b.w	23fc5f4 <HAL_USB_USART_Is_Connected>

023fec38 <_Z19acquireSerialBufferv>:
{
 23fec38:	b510      	push	{r4, lr}
 23fec3a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fec3c:	2214      	movs	r2, #20
 23fec3e:	2100      	movs	r1, #0
 23fec40:	f000 fbfb 	bl	23ff43a <memset>
}
 23fec44:	4620      	mov	r0, r4
 23fec46:	bd10      	pop	{r4, pc}

023fec48 <_Z16_fetch_usbserialv>:
{
 23fec48:	b510      	push	{r4, lr}
 23fec4a:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fec4c:	a803      	add	r0, sp, #12
 23fec4e:	f7ff fff3 	bl	23fec38 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fec52:	4c0c      	ldr	r4, [pc, #48]	; (23fec84 <_Z16_fetch_usbserialv+0x3c>)
 23fec54:	e8d4 1f8f 	ldab	r1, [r4]
 23fec58:	f011 0101 	ands.w	r1, r1, #1
 23fec5c:	d10f      	bne.n	23fec7e <_Z16_fetch_usbserialv+0x36>
 23fec5e:	4620      	mov	r0, r4
 23fec60:	9101      	str	r1, [sp, #4]
 23fec62:	f7fc fd3d 	bl	23fb6e0 <__cxa_guard_acquire>
 23fec66:	9901      	ldr	r1, [sp, #4]
 23fec68:	b148      	cbz	r0, 23fec7e <_Z16_fetch_usbserialv+0x36>
 23fec6a:	aa03      	add	r2, sp, #12
 23fec6c:	4806      	ldr	r0, [pc, #24]	; (23fec88 <_Z16_fetch_usbserialv+0x40>)
 23fec6e:	f7ff ffc5 	bl	23febfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fec72:	4620      	mov	r0, r4
 23fec74:	f7fc fd39 	bl	23fb6ea <__cxa_guard_release>
 23fec78:	4804      	ldr	r0, [pc, #16]	; (23fec8c <_Z16_fetch_usbserialv+0x44>)
 23fec7a:	f000 fba9 	bl	23ff3d0 <atexit>
	return _usbserial;
}
 23fec7e:	4802      	ldr	r0, [pc, #8]	; (23fec88 <_Z16_fetch_usbserialv+0x40>)
 23fec80:	b008      	add	sp, #32
 23fec82:	bd10      	pop	{r4, pc}
 23fec84:	1007aebc 	.word	0x1007aebc
 23fec88:	1007aec0 	.word	0x1007aec0
 23fec8c:	023feb85 	.word	0x023feb85

023fec90 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fec90:	2200      	movs	r2, #0
 23fec92:	6840      	ldr	r0, [r0, #4]
 23fec94:	4611      	mov	r1, r2
 23fec96:	f7fd bdef 	b.w	23fc878 <network_ready>

023fec9a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fec9a:	2200      	movs	r2, #0
 23fec9c:	6840      	ldr	r0, [r0, #4]
 23fec9e:	4611      	mov	r1, r2
 23feca0:	f7fd be22 	b.w	23fc8e8 <network_listening>

023feca4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23feca4:	2200      	movs	r2, #0
 23feca6:	6840      	ldr	r0, [r0, #4]
 23feca8:	4611      	mov	r1, r2
 23fecaa:	f7fd be39 	b.w	23fc920 <network_get_listen_timeout>

023fecae <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fecae:	2200      	movs	r2, #0
 23fecb0:	6840      	ldr	r0, [r0, #4]
 23fecb2:	f7fd be27 	b.w	23fc904 <network_set_listen_timeout>

023fecb6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fecb6:	2200      	movs	r2, #0
 23fecb8:	6840      	ldr	r0, [r0, #4]
 23fecba:	f081 0101 	eor.w	r1, r1, #1
 23fecbe:	f7fd be05 	b.w	23fc8cc <network_listen>

023fecc2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fecc2:	2300      	movs	r3, #0
 23fecc4:	6840      	ldr	r0, [r0, #4]
 23fecc6:	461a      	mov	r2, r3
 23fecc8:	4619      	mov	r1, r3
 23fecca:	f7fd bdf1 	b.w	23fc8b0 <network_off>

023fecce <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fecce:	2300      	movs	r3, #0
 23fecd0:	6840      	ldr	r0, [r0, #4]
 23fecd2:	461a      	mov	r2, r3
 23fecd4:	4619      	mov	r1, r3
 23fecd6:	f7fd bddd 	b.w	23fc894 <network_on>

023fecda <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fecda:	2200      	movs	r2, #0
 23fecdc:	6840      	ldr	r0, [r0, #4]
 23fecde:	4611      	mov	r1, r2
 23fece0:	f7fd bdae 	b.w	23fc840 <network_connecting>

023fece4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fece4:	2200      	movs	r2, #0
 23fece6:	2102      	movs	r1, #2
 23fece8:	6840      	ldr	r0, [r0, #4]
 23fecea:	f7fd bdb7 	b.w	23fc85c <network_disconnect>

023fecee <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fecee:	2300      	movs	r3, #0
 23fecf0:	6840      	ldr	r0, [r0, #4]
 23fecf2:	461a      	mov	r2, r3
 23fecf4:	f7fd bd96 	b.w	23fc824 <network_connect>

023fecf8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fecf8:	2204      	movs	r2, #4
 23fecfa:	4b02      	ldr	r3, [pc, #8]	; (23fed04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fecfc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fecfe:	4a02      	ldr	r2, [pc, #8]	; (23fed08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fed00:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fed02:	4770      	bx	lr
 23fed04:	1007aed4 	.word	0x1007aed4
 23fed08:	023ffd30 	.word	0x023ffd30

023fed0c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 23fed0c:	b510      	push	{r4, lr}
 23fed0e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 23fed10:	f7fc fcac 	bl	23fb66c <strlen>
 23fed14:	3801      	subs	r0, #1
 23fed16:	1823      	adds	r3, r4, r0
 23fed18:	4620      	mov	r0, r4
	while(i<j){
 23fed1a:	4283      	cmp	r3, r0
 23fed1c:	d906      	bls.n	23fed2c <_Z11str_reversePc+0x20>
		c = *i;
 23fed1e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 23fed20:	7819      	ldrb	r1, [r3, #0]
 23fed22:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 23fed26:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 23fed2a:	e7f6      	b.n	23fed1a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 23fed2c:	bd10      	pop	{r4, pc}

023fed2e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 23fed2e:	b570      	push	{r4, r5, r6, lr}
 23fed30:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 23fed32:	1e91      	subs	r1, r2, #2
 23fed34:	2922      	cmp	r1, #34	; 0x22
 23fed36:	d81d      	bhi.n	23fed74 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
 23fed38:	4625      	mov	r5, r4

	div_t result;
	while(a){
 23fed3a:	b930      	cbnz	r0, 23fed4a <ultoa+0x1c>
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 23fed3c:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
 23fed3e:	4423      	add	r3, r4
 23fed40:	429d      	cmp	r5, r3
 23fed42:	d210      	bcs.n	23fed66 <ultoa+0x38>
            *ptr++ = '0';
 23fed44:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
 23fed48:	e7fa      	b.n	23fed40 <ultoa+0x12>
            result.quot = a/radix;
 23fed4a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 23fed4e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 23fed52:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 23fed54:	2809      	cmp	r0, #9
                *ptr += '0';
 23fed56:	bf94      	ite	ls
 23fed58:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
 23fed5a:	3157      	addhi	r1, #87	; 0x57
 23fed5c:	b2c9      	uxtb	r1, r1
            a = result.quot;
 23fed5e:	4630      	mov	r0, r6
 23fed60:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 23fed64:	e7e9      	b.n	23fed3a <ultoa+0xc>

	*ptr = '\0';
 23fed66:	2300      	movs	r3, #0
	str_reverse(buffer);
 23fed68:	4620      	mov	r0, r4
	*ptr = '\0';
 23fed6a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
 23fed6c:	f7ff ffce 	bl	23fed0c <_Z11str_reversePc>
	return buffer;
 23fed70:	4620      	mov	r0, r4
}
 23fed72:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 23fed74:	2000      	movs	r0, #0
 23fed76:	e7fc      	b.n	23fed72 <ultoa+0x44>

023fed78 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 23fed78:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 23fed7a:	2301      	movs	r3, #1
 23fed7c:	f7ff ffd7 	bl	23fed2e <ultoa>
}
 23fed80:	bd08      	pop	{r3, pc}
	...

023fed84 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fed84:	4b01      	ldr	r3, [pc, #4]	; (23fed8c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fed86:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fed88:	4770      	bx	lr
 23fed8a:	bf00      	nop
 23fed8c:	1007ad78 	.word	0x1007ad78

023fed90 <serialEventRun>:
{
 23fed90:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fed92:	4b0f      	ldr	r3, [pc, #60]	; (23fedd0 <serialEventRun+0x40>)
 23fed94:	b143      	cbz	r3, 23feda8 <serialEventRun+0x18>
 23fed96:	f7ff ff57 	bl	23fec48 <_Z16_fetch_usbserialv>
 23fed9a:	6803      	ldr	r3, [r0, #0]
 23fed9c:	691b      	ldr	r3, [r3, #16]
 23fed9e:	4798      	blx	r3
 23feda0:	2800      	cmp	r0, #0
 23feda2:	dd01      	ble.n	23feda8 <serialEventRun+0x18>
        serialEvent();
 23feda4:	e000      	b.n	23feda8 <serialEventRun+0x18>
 23feda6:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23feda8:	4b0a      	ldr	r3, [pc, #40]	; (23fedd4 <serialEventRun+0x44>)
 23fedaa:	b143      	cbz	r3, 23fedbe <serialEventRun+0x2e>
 23fedac:	f000 f96a 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fedb0:	6803      	ldr	r3, [r0, #0]
 23fedb2:	691b      	ldr	r3, [r3, #16]
 23fedb4:	4798      	blx	r3
 23fedb6:	2800      	cmp	r0, #0
 23fedb8:	dd01      	ble.n	23fedbe <serialEventRun+0x2e>
        serialEvent1();
 23fedba:	e000      	b.n	23fedbe <serialEventRun+0x2e>
 23fedbc:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fedbe:	4b06      	ldr	r3, [pc, #24]	; (23fedd8 <serialEventRun+0x48>)
 23fedc0:	b10b      	cbz	r3, 23fedc6 <serialEventRun+0x36>
 23fedc2:	f000 f9a5 	bl	23ff110 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fedc6:	4b05      	ldr	r3, [pc, #20]	; (23feddc <serialEventRun+0x4c>)
 23fedc8:	b10b      	cbz	r3, 23fedce <serialEventRun+0x3e>
 23fedca:	f000 f9d7 	bl	23ff17c <_Z15serialEventRun3v>
}
 23fedce:	bd08      	pop	{r3, pc}
	...

023fede0 <_post_loop>:
{
 23fede0:	b508      	push	{r3, lr}
	serialEventRun();
 23fede2:	f7ff ffd5 	bl	23fed90 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fede6:	f7fd fa0d 	bl	23fc204 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fedea:	4b01      	ldr	r3, [pc, #4]	; (23fedf0 <_post_loop+0x10>)
 23fedec:	6018      	str	r0, [r3, #0]
}
 23fedee:	bd08      	pop	{r3, pc}
 23fedf0:	1007aef0 	.word	0x1007aef0

023fedf4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fedf4:	4805      	ldr	r0, [pc, #20]	; (23fee0c <_Z33system_initialize_user_backup_ramv+0x18>)
 23fedf6:	4a06      	ldr	r2, [pc, #24]	; (23fee10 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fedf8:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fedfa:	1a12      	subs	r2, r2, r0
 23fedfc:	4905      	ldr	r1, [pc, #20]	; (23fee14 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fedfe:	f000 faf5 	bl	23ff3ec <memcpy>
    __backup_sram_signature = signature;
 23fee02:	4b05      	ldr	r3, [pc, #20]	; (23fee18 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fee04:	4a05      	ldr	r2, [pc, #20]	; (23fee1c <_Z33system_initialize_user_backup_ramv+0x28>)
 23fee06:	601a      	str	r2, [r3, #0]
}
 23fee08:	bd08      	pop	{r3, pc}
 23fee0a:	bf00      	nop
 23fee0c:	1007b400 	.word	0x1007b400
 23fee10:	1007b404 	.word	0x1007b404
 23fee14:	085ffac0 	.word	0x085ffac0
 23fee18:	1007b400 	.word	0x1007b400
 23fee1c:	9a271c1e 	.word	0x9a271c1e

023fee20 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fee20:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fee22:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fee24:	461a      	mov	r2, r3
 23fee26:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fee2a:	9300      	str	r3, [sp, #0]
 23fee2c:	f7fd fc52 	bl	23fc6d4 <system_ctrl_set_result>
}
 23fee30:	b003      	add	sp, #12
 23fee32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fee38 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fee38:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fee3a:	8843      	ldrh	r3, [r0, #2]
 23fee3c:	2b0a      	cmp	r3, #10
 23fee3e:	d008      	beq.n	23fee52 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fee40:	2b50      	cmp	r3, #80	; 0x50
 23fee42:	d10b      	bne.n	23fee5c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fee44:	4b09      	ldr	r3, [pc, #36]	; (23fee6c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fee46:	681b      	ldr	r3, [r3, #0]
 23fee48:	b14b      	cbz	r3, 23fee5e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fee4a:	b003      	add	sp, #12
 23fee4c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fee50:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fee52:	f7ff ffe5 	bl	23fee20 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fee56:	b003      	add	sp, #12
 23fee58:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fee5c:	2300      	movs	r3, #0
 23fee5e:	461a      	mov	r2, r3
 23fee60:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fee64:	9300      	str	r3, [sp, #0]
 23fee66:	f7fd fc35 	bl	23fc6d4 <system_ctrl_set_result>
}
 23fee6a:	e7f4      	b.n	23fee56 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fee6c:	1007aee0 	.word	0x1007aee0

023fee70 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fee70:	2100      	movs	r1, #0
{
 23fee72:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fee74:	4811      	ldr	r0, [pc, #68]	; (23feebc <module_user_init_hook+0x4c>)
 23fee76:	f7fd fdd1 	bl	23fca1c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fee7a:	4b11      	ldr	r3, [pc, #68]	; (23feec0 <module_user_init_hook+0x50>)
 23fee7c:	681a      	ldr	r2, [r3, #0]
 23fee7e:	4b11      	ldr	r3, [pc, #68]	; (23feec4 <module_user_init_hook+0x54>)
 23fee80:	429a      	cmp	r2, r3
 23fee82:	bf0c      	ite	eq
 23fee84:	2201      	moveq	r2, #1
 23fee86:	2200      	movne	r2, #0
 23fee88:	4b0f      	ldr	r3, [pc, #60]	; (23feec8 <module_user_init_hook+0x58>)
 23fee8a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fee8c:	d001      	beq.n	23fee92 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fee8e:	f7ff ffb1 	bl	23fedf4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fee92:	f7fd f99b 	bl	23fc1cc <HAL_RNG_GetRandomNumber>
 23fee96:	4604      	mov	r4, r0
    srand(seed);
 23fee98:	f000 fad8 	bl	23ff44c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fee9c:	4b0b      	ldr	r3, [pc, #44]	; (23feecc <module_user_init_hook+0x5c>)
 23fee9e:	b113      	cbz	r3, 23feea6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23feea0:	4620      	mov	r0, r4
 23feea2:	e000      	b.n	23feea6 <module_user_init_hook+0x36>
 23feea4:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23feea6:	2100      	movs	r1, #0
 23feea8:	4808      	ldr	r0, [pc, #32]	; (23feecc <module_user_init_hook+0x5c>)
 23feeaa:	f7fd fcad 	bl	23fc808 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23feeae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23feeb2:	2100      	movs	r1, #0
 23feeb4:	4806      	ldr	r0, [pc, #24]	; (23feed0 <module_user_init_hook+0x60>)
 23feeb6:	f7fd bbff 	b.w	23fc6b8 <system_ctrl_set_app_request_handler>
 23feeba:	bf00      	nop
 23feebc:	023fed85 	.word	0x023fed85
 23feec0:	1007b400 	.word	0x1007b400
 23feec4:	9a271c1e 	.word	0x9a271c1e
 23feec8:	1007aedc 	.word	0x1007aedc
 23feecc:	00000000 	.word	0x00000000
 23feed0:	023fee39 	.word	0x023fee39

023feed4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23feed4:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23feed6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23feed8:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23feeda:	d902      	bls.n	23feee2 <pinAvailable+0xe>
    return false;
 23feedc:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23feede:	b003      	add	sp, #12
 23feee0:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23feee2:	f1a0 030f 	sub.w	r3, r0, #15
 23feee6:	2b02      	cmp	r3, #2
 23feee8:	d90b      	bls.n	23fef02 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23feeea:	2801      	cmp	r0, #1
 23feeec:	d821      	bhi.n	23fef32 <pinAvailable+0x5e>
 23feeee:	f000 f875 	bl	23fefdc <_Z19__fetch_global_Wirev>
 23feef2:	2100      	movs	r1, #0
 23feef4:	7c00      	ldrb	r0, [r0, #16]
 23feef6:	f7fd fa11 	bl	23fc31c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23feefa:	f080 0001 	eor.w	r0, r0, #1
 23feefe:	b2c0      	uxtb	r0, r0
 23fef00:	e7ed      	b.n	23feede <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fef02:	4d11      	ldr	r5, [pc, #68]	; (23fef48 <pinAvailable+0x74>)
 23fef04:	e8d5 1f8f 	ldab	r1, [r5]
 23fef08:	f011 0101 	ands.w	r1, r1, #1
 23fef0c:	d10b      	bne.n	23fef26 <pinAvailable+0x52>
 23fef0e:	4628      	mov	r0, r5
 23fef10:	9101      	str	r1, [sp, #4]
 23fef12:	f7fc fbe5 	bl	23fb6e0 <__cxa_guard_acquire>
 23fef16:	9901      	ldr	r1, [sp, #4]
 23fef18:	b128      	cbz	r0, 23fef26 <pinAvailable+0x52>
 23fef1a:	480c      	ldr	r0, [pc, #48]	; (23fef4c <pinAvailable+0x78>)
 23fef1c:	f7ff fbc2 	bl	23fe6a4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fef20:	4628      	mov	r0, r5
 23fef22:	f7fc fbe2 	bl	23fb6ea <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fef26:	4b09      	ldr	r3, [pc, #36]	; (23fef4c <pinAvailable+0x78>)
 23fef28:	7818      	ldrb	r0, [r3, #0]
 23fef2a:	f7fd fa4b 	bl	23fc3c4 <hal_spi_is_enabled>
 23fef2e:	2800      	cmp	r0, #0
 23fef30:	d1d4      	bne.n	23feedc <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fef32:	3c08      	subs	r4, #8
 23fef34:	2c01      	cmp	r4, #1
 23fef36:	d805      	bhi.n	23fef44 <pinAvailable+0x70>
 23fef38:	f000 f8a4 	bl	23ff084 <_Z22__fetch_global_Serial1v>
 23fef3c:	7c00      	ldrb	r0, [r0, #16]
 23fef3e:	f7fd faa3 	bl	23fc488 <hal_usart_is_enabled>
 23fef42:	e7da      	b.n	23feefa <pinAvailable+0x26>
  return true; // 'pin' is available
 23fef44:	2001      	movs	r0, #1
 23fef46:	e7ca      	b.n	23feede <pinAvailable+0xa>
 23fef48:	1007aee4 	.word	0x1007aee4
 23fef4c:	1007aee8 	.word	0x1007aee8

023fef50 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fef50:	281b      	cmp	r0, #27
{
 23fef52:	b538      	push	{r3, r4, r5, lr}
 23fef54:	4604      	mov	r4, r0
 23fef56:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fef58:	d80a      	bhi.n	23fef70 <pinMode+0x20>
 23fef5a:	29ff      	cmp	r1, #255	; 0xff
 23fef5c:	d008      	beq.n	23fef70 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fef5e:	f7ff ffb9 	bl	23feed4 <pinAvailable>
 23fef62:	b128      	cbz	r0, 23fef70 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fef64:	4629      	mov	r1, r5
 23fef66:	4620      	mov	r0, r4
}
 23fef68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fef6c:	f7fd b966 	b.w	23fc23c <hal_gpio_mode>
}
 23fef70:	bd38      	pop	{r3, r4, r5, pc}

023fef72 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fef72:	b538      	push	{r3, r4, r5, lr}
 23fef74:	4604      	mov	r4, r0
 23fef76:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fef78:	f7fd f96e 	bl	23fc258 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fef7c:	28ff      	cmp	r0, #255	; 0xff
 23fef7e:	d010      	beq.n	23fefa2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fef80:	2806      	cmp	r0, #6
 23fef82:	d804      	bhi.n	23fef8e <digitalWrite+0x1c>
 23fef84:	234d      	movs	r3, #77	; 0x4d
 23fef86:	fa23 f000 	lsr.w	r0, r3, r0
 23fef8a:	07c3      	lsls	r3, r0, #31
 23fef8c:	d409      	bmi.n	23fefa2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fef8e:	4620      	mov	r0, r4
 23fef90:	f7ff ffa0 	bl	23feed4 <pinAvailable>
 23fef94:	b128      	cbz	r0, 23fefa2 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fef96:	4629      	mov	r1, r5
 23fef98:	4620      	mov	r0, r4
}
 23fef9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fef9e:	f7fd b969 	b.w	23fc274 <hal_gpio_write>
}
 23fefa2:	bd38      	pop	{r3, r4, r5, pc}

023fefa4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fefa4:	4770      	bx	lr
	...

023fefa8 <_Z17acquireWireBufferv>:
{
 23fefa8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fefaa:	4b0a      	ldr	r3, [pc, #40]	; (23fefd4 <_Z17acquireWireBufferv+0x2c>)
{
 23fefac:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fefae:	6003      	str	r3, [r0, #0]
 23fefb0:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fefb2:	4909      	ldr	r1, [pc, #36]	; (23fefd8 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fefb4:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fefb6:	2020      	movs	r0, #32
 23fefb8:	f000 f8f6 	bl	23ff1a8 <_ZnajRKSt9nothrow_t>
	};
 23fefbc:	2520      	movs	r5, #32
 23fefbe:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fefc0:	4905      	ldr	r1, [pc, #20]	; (23fefd8 <_Z17acquireWireBufferv+0x30>)
 23fefc2:	4628      	mov	r0, r5
	};
 23fefc4:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fefc6:	f000 f8ef 	bl	23ff1a8 <_ZnajRKSt9nothrow_t>
	};
 23fefca:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fefce:	4620      	mov	r0, r4
 23fefd0:	bd38      	pop	{r3, r4, r5, pc}
 23fefd2:	bf00      	nop
 23fefd4:	00010018 	.word	0x00010018
 23fefd8:	023ffd64 	.word	0x023ffd64

023fefdc <_Z19__fetch_global_Wirev>:
{
 23fefdc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fefde:	4d0e      	ldr	r5, [pc, #56]	; (23ff018 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fefe0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fefe2:	e8d5 1f8f 	ldab	r1, [r5]
 23fefe6:	f011 0401 	ands.w	r4, r1, #1
 23fefea:	d111      	bne.n	23ff010 <_Z19__fetch_global_Wirev+0x34>
 23fefec:	4628      	mov	r0, r5
 23fefee:	f7fc fb77 	bl	23fb6e0 <__cxa_guard_acquire>
 23feff2:	b168      	cbz	r0, 23ff010 <_Z19__fetch_global_Wirev+0x34>
 23feff4:	4668      	mov	r0, sp
 23feff6:	f7ff ffd7 	bl	23fefa8 <_Z17acquireWireBufferv>
 23feffa:	466a      	mov	r2, sp
 23feffc:	4621      	mov	r1, r4
 23feffe:	4807      	ldr	r0, [pc, #28]	; (23ff01c <_Z19__fetch_global_Wirev+0x40>)
 23ff000:	f7fe f824 	bl	23fd04c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff004:	4628      	mov	r0, r5
 23ff006:	f7fc fb70 	bl	23fb6ea <__cxa_guard_release>
 23ff00a:	4805      	ldr	r0, [pc, #20]	; (23ff020 <_Z19__fetch_global_Wirev+0x44>)
 23ff00c:	f000 f9e0 	bl	23ff3d0 <atexit>
	return wire;
}
 23ff010:	4802      	ldr	r0, [pc, #8]	; (23ff01c <_Z19__fetch_global_Wirev+0x40>)
 23ff012:	b007      	add	sp, #28
 23ff014:	bd30      	pop	{r4, r5, pc}
 23ff016:	bf00      	nop
 23ff018:	1007aef4 	.word	0x1007aef4
 23ff01c:	1007aef8 	.word	0x1007aef8
 23ff020:	023fefa5 	.word	0x023fefa5

023ff024 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff024:	4770      	bx	lr
	...

023ff028 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff028:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff02a:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff02c:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff02e:	462a      	mov	r2, r5
 23ff030:	2100      	movs	r1, #0
 23ff032:	f000 fa02 	bl	23ff43a <memset>
 23ff036:	8025      	strh	r5, [r4, #0]
 23ff038:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff03a:	4907      	ldr	r1, [pc, #28]	; (23ff058 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff03c:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff03e:	8125      	strh	r5, [r4, #8]
 23ff040:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff042:	f000 f8b1 	bl	23ff1a8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff046:	4904      	ldr	r1, [pc, #16]	; (23ff058 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff048:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff04a:	4628      	mov	r0, r5
 23ff04c:	f000 f8ac 	bl	23ff1a8 <_ZnajRKSt9nothrow_t>
    };
 23ff050:	60e0      	str	r0, [r4, #12]
}
 23ff052:	4620      	mov	r0, r4
 23ff054:	bd38      	pop	{r3, r4, r5, pc}
 23ff056:	bf00      	nop
 23ff058:	023ffd64 	.word	0x023ffd64

023ff05c <__tcf_2>:
 23ff05c:	4770      	bx	lr

023ff05e <__tcf_1>:
 23ff05e:	4770      	bx	lr

023ff060 <_Z20acquireSerial1Bufferv>:
{
 23ff060:	b510      	push	{r4, lr}
 23ff062:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff064:	f7ff ffe0 	bl	23ff028 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff068:	4620      	mov	r0, r4
 23ff06a:	bd10      	pop	{r4, pc}

023ff06c <_Z20acquireSerial2Bufferv>:
 23ff06c:	b510      	push	{r4, lr}
 23ff06e:	4604      	mov	r4, r0
 23ff070:	f7ff ffda 	bl	23ff028 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff074:	4620      	mov	r0, r4
 23ff076:	bd10      	pop	{r4, pc}

023ff078 <_Z20acquireSerial3Bufferv>:
 23ff078:	b510      	push	{r4, lr}
 23ff07a:	4604      	mov	r4, r0
 23ff07c:	f7ff ffd4 	bl	23ff028 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff080:	4620      	mov	r0, r4
 23ff082:	bd10      	pop	{r4, pc}

023ff084 <_Z22__fetch_global_Serial1v>:
{
 23ff084:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff086:	4d0e      	ldr	r5, [pc, #56]	; (23ff0c0 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff088:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff08a:	e8d5 1f8f 	ldab	r1, [r5]
 23ff08e:	f011 0401 	ands.w	r4, r1, #1
 23ff092:	d111      	bne.n	23ff0b8 <_Z22__fetch_global_Serial1v+0x34>
 23ff094:	4628      	mov	r0, r5
 23ff096:	f7fc fb23 	bl	23fb6e0 <__cxa_guard_acquire>
 23ff09a:	b168      	cbz	r0, 23ff0b8 <_Z22__fetch_global_Serial1v+0x34>
 23ff09c:	a801      	add	r0, sp, #4
 23ff09e:	f7ff ffdf 	bl	23ff060 <_Z20acquireSerial1Bufferv>
 23ff0a2:	4621      	mov	r1, r4
 23ff0a4:	aa01      	add	r2, sp, #4
 23ff0a6:	4807      	ldr	r0, [pc, #28]	; (23ff0c4 <_Z22__fetch_global_Serial1v+0x40>)
 23ff0a8:	f7ff fd46 	bl	23feb38 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff0ac:	4628      	mov	r0, r5
 23ff0ae:	f7fc fb1c 	bl	23fb6ea <__cxa_guard_release>
 23ff0b2:	4805      	ldr	r0, [pc, #20]	; (23ff0c8 <_Z22__fetch_global_Serial1v+0x44>)
 23ff0b4:	f000 f98c 	bl	23ff3d0 <atexit>
    return serial1;
}
 23ff0b8:	4802      	ldr	r0, [pc, #8]	; (23ff0c4 <_Z22__fetch_global_Serial1v+0x40>)
 23ff0ba:	b007      	add	sp, #28
 23ff0bc:	bd30      	pop	{r4, r5, pc}
 23ff0be:	bf00      	nop
 23ff0c0:	1007af0c 	.word	0x1007af0c
 23ff0c4:	1007af18 	.word	0x1007af18
 23ff0c8:	023ff025 	.word	0x023ff025

023ff0cc <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff0cc:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff0ce:	4c0d      	ldr	r4, [pc, #52]	; (23ff104 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff0d0:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff0d2:	e8d4 3f8f 	ldab	r3, [r4]
 23ff0d6:	07db      	lsls	r3, r3, #31
 23ff0d8:	d411      	bmi.n	23ff0fe <_Z22__fetch_global_Serial2v+0x32>
 23ff0da:	4620      	mov	r0, r4
 23ff0dc:	f7fc fb00 	bl	23fb6e0 <__cxa_guard_acquire>
 23ff0e0:	b168      	cbz	r0, 23ff0fe <_Z22__fetch_global_Serial2v+0x32>
 23ff0e2:	a801      	add	r0, sp, #4
 23ff0e4:	f7ff ffc2 	bl	23ff06c <_Z20acquireSerial2Bufferv>
 23ff0e8:	2101      	movs	r1, #1
 23ff0ea:	aa01      	add	r2, sp, #4
 23ff0ec:	4806      	ldr	r0, [pc, #24]	; (23ff108 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff0ee:	f7ff fd23 	bl	23feb38 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff0f2:	4620      	mov	r0, r4
 23ff0f4:	f7fc faf9 	bl	23fb6ea <__cxa_guard_release>
 23ff0f8:	4804      	ldr	r0, [pc, #16]	; (23ff10c <_Z22__fetch_global_Serial2v+0x40>)
 23ff0fa:	f000 f969 	bl	23ff3d0 <atexit>
	return serial2;
}
 23ff0fe:	4802      	ldr	r0, [pc, #8]	; (23ff108 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff100:	b006      	add	sp, #24
 23ff102:	bd10      	pop	{r4, pc}
 23ff104:	1007af10 	.word	0x1007af10
 23ff108:	1007af2c 	.word	0x1007af2c
 23ff10c:	023ff05f 	.word	0x023ff05f

023ff110 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff110:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff112:	f7ff ffdb 	bl	23ff0cc <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff116:	4b07      	ldr	r3, [pc, #28]	; (23ff134 <_Z15serialEventRun2v+0x24>)
 23ff118:	4604      	mov	r4, r0
 23ff11a:	b153      	cbz	r3, 23ff132 <_Z15serialEventRun2v+0x22>
 23ff11c:	f7ff fd2d 	bl	23feb7a <_ZN11USARTSerial9isEnabledEv>
 23ff120:	b138      	cbz	r0, 23ff132 <_Z15serialEventRun2v+0x22>
 23ff122:	6823      	ldr	r3, [r4, #0]
 23ff124:	4620      	mov	r0, r4
 23ff126:	691b      	ldr	r3, [r3, #16]
 23ff128:	4798      	blx	r3
 23ff12a:	2800      	cmp	r0, #0
 23ff12c:	dd01      	ble.n	23ff132 <_Z15serialEventRun2v+0x22>
        handler();
 23ff12e:	e000      	b.n	23ff132 <_Z15serialEventRun2v+0x22>
 23ff130:	bf00      	nop
}
 23ff132:	bd10      	pop	{r4, pc}
 23ff134:	00000000 	.word	0x00000000

023ff138 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff138:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff13a:	4c0d      	ldr	r4, [pc, #52]	; (23ff170 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff13c:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff13e:	e8d4 3f8f 	ldab	r3, [r4]
 23ff142:	07db      	lsls	r3, r3, #31
 23ff144:	d411      	bmi.n	23ff16a <_Z22__fetch_global_Serial3v+0x32>
 23ff146:	4620      	mov	r0, r4
 23ff148:	f7fc faca 	bl	23fb6e0 <__cxa_guard_acquire>
 23ff14c:	b168      	cbz	r0, 23ff16a <_Z22__fetch_global_Serial3v+0x32>
 23ff14e:	a801      	add	r0, sp, #4
 23ff150:	f7ff ff92 	bl	23ff078 <_Z20acquireSerial3Bufferv>
 23ff154:	2102      	movs	r1, #2
 23ff156:	aa01      	add	r2, sp, #4
 23ff158:	4806      	ldr	r0, [pc, #24]	; (23ff174 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff15a:	f7ff fced 	bl	23feb38 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff15e:	4620      	mov	r0, r4
 23ff160:	f7fc fac3 	bl	23fb6ea <__cxa_guard_release>
 23ff164:	4804      	ldr	r0, [pc, #16]	; (23ff178 <_Z22__fetch_global_Serial3v+0x40>)
 23ff166:	f000 f933 	bl	23ff3d0 <atexit>
	return serial3;
}
 23ff16a:	4802      	ldr	r0, [pc, #8]	; (23ff174 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff16c:	b006      	add	sp, #24
 23ff16e:	bd10      	pop	{r4, pc}
 23ff170:	1007af14 	.word	0x1007af14
 23ff174:	1007af40 	.word	0x1007af40
 23ff178:	023ff05d 	.word	0x023ff05d

023ff17c <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff17c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff17e:	f7ff ffdb 	bl	23ff138 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff182:	4b07      	ldr	r3, [pc, #28]	; (23ff1a0 <_Z15serialEventRun3v+0x24>)
 23ff184:	4604      	mov	r4, r0
 23ff186:	b153      	cbz	r3, 23ff19e <_Z15serialEventRun3v+0x22>
 23ff188:	f7ff fcf7 	bl	23feb7a <_ZN11USARTSerial9isEnabledEv>
 23ff18c:	b138      	cbz	r0, 23ff19e <_Z15serialEventRun3v+0x22>
 23ff18e:	6823      	ldr	r3, [r4, #0]
 23ff190:	4620      	mov	r0, r4
 23ff192:	691b      	ldr	r3, [r3, #16]
 23ff194:	4798      	blx	r3
 23ff196:	2800      	cmp	r0, #0
 23ff198:	dd01      	ble.n	23ff19e <_Z15serialEventRun3v+0x22>
        handler();
 23ff19a:	e000      	b.n	23ff19e <_Z15serialEventRun3v+0x22>
 23ff19c:	bf00      	nop
}
 23ff19e:	bd10      	pop	{r4, pc}
 23ff1a0:	00000000 	.word	0x00000000

023ff1a4 <_ZnwjRKSt9nothrow_t>:
 23ff1a4:	f7fc ba87 	b.w	23fb6b6 <_Znwj>

023ff1a8 <_ZnajRKSt9nothrow_t>:
 23ff1a8:	f7fc ba87 	b.w	23fb6ba <_Znaj>

023ff1ac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23ff1ac:	4901      	ldr	r1, [pc, #4]	; (23ff1b4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23ff1ae:	f000 b8f9 	b.w	23ff3a4 <_ZNKSt9type_infoeqERKS_>
 23ff1b2:	bf00      	nop
 23ff1b4:	023ffd80 	.word	0x023ffd80

023ff1b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23ff1b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23ff1ba:	2400      	movs	r4, #0
 23ff1bc:	2310      	movs	r3, #16
 23ff1be:	4615      	mov	r5, r2
 23ff1c0:	6812      	ldr	r2, [r2, #0]
 23ff1c2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23ff1c6:	6803      	ldr	r3, [r0, #0]
 23ff1c8:	e9cd 4400 	strd	r4, r4, [sp]
 23ff1cc:	699e      	ldr	r6, [r3, #24]
 23ff1ce:	466b      	mov	r3, sp
 23ff1d0:	47b0      	blx	r6
 23ff1d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23ff1d6:	f003 0306 	and.w	r3, r3, #6
 23ff1da:	2b06      	cmp	r3, #6
 23ff1dc:	bf05      	ittet	eq
 23ff1de:	9b00      	ldreq	r3, [sp, #0]
 23ff1e0:	2001      	moveq	r0, #1
 23ff1e2:	4620      	movne	r0, r4
 23ff1e4:	602b      	streq	r3, [r5, #0]
 23ff1e6:	b004      	add	sp, #16
 23ff1e8:	bd70      	pop	{r4, r5, r6, pc}

023ff1ea <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23ff1ea:	9800      	ldr	r0, [sp, #0]
 23ff1ec:	4290      	cmp	r0, r2
 23ff1ee:	bf14      	ite	ne
 23ff1f0:	2001      	movne	r0, #1
 23ff1f2:	2006      	moveq	r0, #6
 23ff1f4:	4770      	bx	lr
	...

023ff1f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23ff1f8:	4b03      	ldr	r3, [pc, #12]	; (23ff208 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23ff1fa:	b510      	push	{r4, lr}
 23ff1fc:	4604      	mov	r4, r0
 23ff1fe:	6003      	str	r3, [r0, #0]
 23ff200:	f000 f8cd 	bl	23ff39e <_ZNSt9type_infoD1Ev>
 23ff204:	4620      	mov	r0, r4
 23ff206:	bd10      	pop	{r4, pc}
 23ff208:	023ffdc0 	.word	0x023ffdc0

023ff20c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23ff20c:	b510      	push	{r4, lr}
 23ff20e:	4604      	mov	r4, r0
 23ff210:	f7ff fff2 	bl	23ff1f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23ff214:	2108      	movs	r1, #8
 23ff216:	4620      	mov	r0, r4
 23ff218:	f7fc fa53 	bl	23fb6c2 <_ZdlPvj>
 23ff21c:	4620      	mov	r0, r4
 23ff21e:	bd10      	pop	{r4, pc}

023ff220 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23ff220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff224:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23ff228:	461f      	mov	r7, r3
 23ff22a:	4606      	mov	r6, r0
 23ff22c:	4615      	mov	r5, r2
 23ff22e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23ff232:	4598      	cmp	r8, r3
 23ff234:	d107      	bne.n	23ff246 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23ff236:	9907      	ldr	r1, [sp, #28]
 23ff238:	f000 f8b4 	bl	23ff3a4 <_ZNKSt9type_infoeqERKS_>
 23ff23c:	b118      	cbz	r0, 23ff246 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23ff23e:	7165      	strb	r5, [r4, #5]
 23ff240:	2000      	movs	r0, #0
 23ff242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ff246:	4639      	mov	r1, r7
 23ff248:	4630      	mov	r0, r6
 23ff24a:	f000 f8ab 	bl	23ff3a4 <_ZNKSt9type_infoeqERKS_>
 23ff24e:	2800      	cmp	r0, #0
 23ff250:	d0f6      	beq.n	23ff240 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23ff252:	2301      	movs	r3, #1
 23ff254:	f8c4 8000 	str.w	r8, [r4]
 23ff258:	7125      	strb	r5, [r4, #4]
 23ff25a:	71a3      	strb	r3, [r4, #6]
 23ff25c:	e7f0      	b.n	23ff240 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023ff25e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23ff25e:	b538      	push	{r3, r4, r5, lr}
 23ff260:	4615      	mov	r5, r2
 23ff262:	461c      	mov	r4, r3
 23ff264:	f000 f89e 	bl	23ff3a4 <_ZNKSt9type_infoeqERKS_>
 23ff268:	b120      	cbz	r0, 23ff274 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23ff26a:	2308      	movs	r3, #8
 23ff26c:	6025      	str	r5, [r4, #0]
 23ff26e:	60e3      	str	r3, [r4, #12]
 23ff270:	2306      	movs	r3, #6
 23ff272:	7123      	strb	r3, [r4, #4]
 23ff274:	bd38      	pop	{r3, r4, r5, pc}

023ff276 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23ff276:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23ff278:	4605      	mov	r5, r0
 23ff27a:	460c      	mov	r4, r1
 23ff27c:	461e      	mov	r6, r3
 23ff27e:	9201      	str	r2, [sp, #4]
 23ff280:	f000 f890 	bl	23ff3a4 <_ZNKSt9type_infoeqERKS_>
 23ff284:	b950      	cbnz	r0, 23ff29c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23ff286:	2e03      	cmp	r6, #3
 23ff288:	d808      	bhi.n	23ff29c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23ff28a:	6823      	ldr	r3, [r4, #0]
 23ff28c:	4629      	mov	r1, r5
 23ff28e:	9a01      	ldr	r2, [sp, #4]
 23ff290:	4620      	mov	r0, r4
 23ff292:	695b      	ldr	r3, [r3, #20]
 23ff294:	b002      	add	sp, #8
 23ff296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23ff29a:	4718      	bx	r3
 23ff29c:	b002      	add	sp, #8
 23ff29e:	bd70      	pop	{r4, r5, r6, pc}

023ff2a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23ff2a0:	4b03      	ldr	r3, [pc, #12]	; (23ff2b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23ff2a2:	b510      	push	{r4, lr}
 23ff2a4:	4604      	mov	r4, r0
 23ff2a6:	6003      	str	r3, [r0, #0]
 23ff2a8:	f7ff ffa6 	bl	23ff1f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23ff2ac:	4620      	mov	r0, r4
 23ff2ae:	bd10      	pop	{r4, pc}
 23ff2b0:	023ffe20 	.word	0x023ffe20

023ff2b4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23ff2b4:	b510      	push	{r4, lr}
 23ff2b6:	4604      	mov	r4, r0
 23ff2b8:	f7ff fff2 	bl	23ff2a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23ff2bc:	210c      	movs	r1, #12
 23ff2be:	4620      	mov	r0, r4
 23ff2c0:	f7fc f9ff 	bl	23fb6c2 <_ZdlPvj>
 23ff2c4:	4620      	mov	r0, r4
 23ff2c6:	bd10      	pop	{r4, pc}

023ff2c8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23ff2c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23ff2ca:	9f08      	ldr	r7, [sp, #32]
 23ff2cc:	4605      	mov	r5, r0
 23ff2ce:	460e      	mov	r6, r1
 23ff2d0:	4614      	mov	r4, r2
 23ff2d2:	4297      	cmp	r7, r2
 23ff2d4:	d00a      	beq.n	23ff2ec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23ff2d6:	68a8      	ldr	r0, [r5, #8]
 23ff2d8:	4631      	mov	r1, r6
 23ff2da:	6802      	ldr	r2, [r0, #0]
 23ff2dc:	9708      	str	r7, [sp, #32]
 23ff2de:	6a15      	ldr	r5, [r2, #32]
 23ff2e0:	4622      	mov	r2, r4
 23ff2e2:	46ac      	mov	ip, r5
 23ff2e4:	b003      	add	sp, #12
 23ff2e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23ff2ea:	4760      	bx	ip
 23ff2ec:	4619      	mov	r1, r3
 23ff2ee:	9301      	str	r3, [sp, #4]
 23ff2f0:	f000 f858 	bl	23ff3a4 <_ZNKSt9type_infoeqERKS_>
 23ff2f4:	9b01      	ldr	r3, [sp, #4]
 23ff2f6:	2800      	cmp	r0, #0
 23ff2f8:	d0ed      	beq.n	23ff2d6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23ff2fa:	2006      	movs	r0, #6
 23ff2fc:	b003      	add	sp, #12
 23ff2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ff300 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23ff300:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff304:	460d      	mov	r5, r1
 23ff306:	4619      	mov	r1, r3
 23ff308:	4681      	mov	r9, r0
 23ff30a:	4617      	mov	r7, r2
 23ff30c:	4698      	mov	r8, r3
 23ff30e:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23ff312:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23ff316:	f000 f845 	bl	23ff3a4 <_ZNKSt9type_infoeqERKS_>
 23ff31a:	b190      	cbz	r0, 23ff342 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23ff31c:	2d00      	cmp	r5, #0
 23ff31e:	6034      	str	r4, [r6, #0]
 23ff320:	7137      	strb	r7, [r6, #4]
 23ff322:	db09      	blt.n	23ff338 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23ff324:	1961      	adds	r1, r4, r5
 23ff326:	458a      	cmp	sl, r1
 23ff328:	bf0c      	ite	eq
 23ff32a:	2106      	moveq	r1, #6
 23ff32c:	2101      	movne	r1, #1
 23ff32e:	71b1      	strb	r1, [r6, #6]
 23ff330:	2000      	movs	r0, #0
 23ff332:	b001      	add	sp, #4
 23ff334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff338:	3502      	adds	r5, #2
 23ff33a:	d1f9      	bne.n	23ff330 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff33c:	2301      	movs	r3, #1
 23ff33e:	71b3      	strb	r3, [r6, #6]
 23ff340:	e7f6      	b.n	23ff330 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff342:	4554      	cmp	r4, sl
 23ff344:	d106      	bne.n	23ff354 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23ff346:	4659      	mov	r1, fp
 23ff348:	4648      	mov	r0, r9
 23ff34a:	f000 f82b 	bl	23ff3a4 <_ZNKSt9type_infoeqERKS_>
 23ff34e:	b108      	cbz	r0, 23ff354 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23ff350:	7177      	strb	r7, [r6, #5]
 23ff352:	e7ed      	b.n	23ff330 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff354:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23ff358:	463a      	mov	r2, r7
 23ff35a:	4629      	mov	r1, r5
 23ff35c:	6803      	ldr	r3, [r0, #0]
 23ff35e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23ff362:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23ff366:	69dc      	ldr	r4, [r3, #28]
 23ff368:	4643      	mov	r3, r8
 23ff36a:	46a4      	mov	ip, r4
 23ff36c:	b001      	add	sp, #4
 23ff36e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff372:	4760      	bx	ip

023ff374 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23ff374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff378:	4607      	mov	r7, r0
 23ff37a:	460c      	mov	r4, r1
 23ff37c:	4615      	mov	r5, r2
 23ff37e:	461e      	mov	r6, r3
 23ff380:	f7ff ff6d 	bl	23ff25e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23ff384:	b948      	cbnz	r0, 23ff39a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23ff386:	68b8      	ldr	r0, [r7, #8]
 23ff388:	462a      	mov	r2, r5
 23ff38a:	4621      	mov	r1, r4
 23ff38c:	6803      	ldr	r3, [r0, #0]
 23ff38e:	699f      	ldr	r7, [r3, #24]
 23ff390:	4633      	mov	r3, r6
 23ff392:	46bc      	mov	ip, r7
 23ff394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23ff398:	4760      	bx	ip
 23ff39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023ff39e <_ZNSt9type_infoD1Ev>:
 23ff39e:	4770      	bx	lr

023ff3a0 <_ZNKSt9type_info14__is_pointer_pEv>:
 23ff3a0:	2000      	movs	r0, #0
 23ff3a2:	4770      	bx	lr

023ff3a4 <_ZNKSt9type_infoeqERKS_>:
 23ff3a4:	4281      	cmp	r1, r0
 23ff3a6:	b508      	push	{r3, lr}
 23ff3a8:	d00e      	beq.n	23ff3c8 <_ZNKSt9type_infoeqERKS_+0x24>
 23ff3aa:	6840      	ldr	r0, [r0, #4]
 23ff3ac:	7803      	ldrb	r3, [r0, #0]
 23ff3ae:	2b2a      	cmp	r3, #42	; 0x2a
 23ff3b0:	d00c      	beq.n	23ff3cc <_ZNKSt9type_infoeqERKS_+0x28>
 23ff3b2:	6849      	ldr	r1, [r1, #4]
 23ff3b4:	780b      	ldrb	r3, [r1, #0]
 23ff3b6:	2b2a      	cmp	r3, #42	; 0x2a
 23ff3b8:	bf08      	it	eq
 23ff3ba:	3101      	addeq	r1, #1
 23ff3bc:	f7fc f94c 	bl	23fb658 <strcmp>
 23ff3c0:	fab0 f080 	clz	r0, r0
 23ff3c4:	0940      	lsrs	r0, r0, #5
 23ff3c6:	bd08      	pop	{r3, pc}
 23ff3c8:	2001      	movs	r0, #1
 23ff3ca:	e7fc      	b.n	23ff3c6 <_ZNKSt9type_infoeqERKS_+0x22>
 23ff3cc:	2000      	movs	r0, #0
 23ff3ce:	e7fa      	b.n	23ff3c6 <_ZNKSt9type_infoeqERKS_+0x22>

023ff3d0 <atexit>:
 23ff3d0:	2300      	movs	r3, #0
 23ff3d2:	4601      	mov	r1, r0
 23ff3d4:	461a      	mov	r2, r3
 23ff3d6:	4618      	mov	r0, r3
 23ff3d8:	f000 b93a 	b.w	23ff650 <__register_exitproc>

023ff3dc <isprint>:
 23ff3dc:	4b02      	ldr	r3, [pc, #8]	; (23ff3e8 <isprint+0xc>)
 23ff3de:	4418      	add	r0, r3
 23ff3e0:	7840      	ldrb	r0, [r0, #1]
 23ff3e2:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff3e6:	4770      	bx	lr
 23ff3e8:	023ffec9 	.word	0x023ffec9

023ff3ec <memcpy>:
 23ff3ec:	440a      	add	r2, r1
 23ff3ee:	1e43      	subs	r3, r0, #1
 23ff3f0:	4291      	cmp	r1, r2
 23ff3f2:	d100      	bne.n	23ff3f6 <memcpy+0xa>
 23ff3f4:	4770      	bx	lr
 23ff3f6:	b510      	push	{r4, lr}
 23ff3f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff3fc:	4291      	cmp	r1, r2
 23ff3fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff402:	d1f9      	bne.n	23ff3f8 <memcpy+0xc>
 23ff404:	bd10      	pop	{r4, pc}

023ff406 <memmove>:
 23ff406:	4288      	cmp	r0, r1
 23ff408:	b510      	push	{r4, lr}
 23ff40a:	eb01 0402 	add.w	r4, r1, r2
 23ff40e:	d902      	bls.n	23ff416 <memmove+0x10>
 23ff410:	4284      	cmp	r4, r0
 23ff412:	4623      	mov	r3, r4
 23ff414:	d807      	bhi.n	23ff426 <memmove+0x20>
 23ff416:	1e43      	subs	r3, r0, #1
 23ff418:	42a1      	cmp	r1, r4
 23ff41a:	d008      	beq.n	23ff42e <memmove+0x28>
 23ff41c:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff420:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff424:	e7f8      	b.n	23ff418 <memmove+0x12>
 23ff426:	4402      	add	r2, r0
 23ff428:	4601      	mov	r1, r0
 23ff42a:	428a      	cmp	r2, r1
 23ff42c:	d100      	bne.n	23ff430 <memmove+0x2a>
 23ff42e:	bd10      	pop	{r4, pc}
 23ff430:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff434:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff438:	e7f7      	b.n	23ff42a <memmove+0x24>

023ff43a <memset>:
 23ff43a:	4402      	add	r2, r0
 23ff43c:	4603      	mov	r3, r0
 23ff43e:	4293      	cmp	r3, r2
 23ff440:	d100      	bne.n	23ff444 <memset+0xa>
 23ff442:	4770      	bx	lr
 23ff444:	f803 1b01 	strb.w	r1, [r3], #1
 23ff448:	e7f9      	b.n	23ff43e <memset+0x4>
	...

023ff44c <srand>:
 23ff44c:	b538      	push	{r3, r4, r5, lr}
 23ff44e:	4b10      	ldr	r3, [pc, #64]	; (23ff490 <srand+0x44>)
 23ff450:	4604      	mov	r4, r0
 23ff452:	681d      	ldr	r5, [r3, #0]
 23ff454:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff456:	b9b3      	cbnz	r3, 23ff486 <srand+0x3a>
 23ff458:	2018      	movs	r0, #24
 23ff45a:	f7fd fa8b 	bl	23fc974 <malloc>
 23ff45e:	4602      	mov	r2, r0
 23ff460:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff462:	b920      	cbnz	r0, 23ff46e <srand+0x22>
 23ff464:	4b0b      	ldr	r3, [pc, #44]	; (23ff494 <srand+0x48>)
 23ff466:	2142      	movs	r1, #66	; 0x42
 23ff468:	480b      	ldr	r0, [pc, #44]	; (23ff498 <srand+0x4c>)
 23ff46a:	f7fd fac9 	bl	23fca00 <__assert_func>
 23ff46e:	490b      	ldr	r1, [pc, #44]	; (23ff49c <srand+0x50>)
 23ff470:	4b0b      	ldr	r3, [pc, #44]	; (23ff4a0 <srand+0x54>)
 23ff472:	e9c0 1300 	strd	r1, r3, [r0]
 23ff476:	4b0b      	ldr	r3, [pc, #44]	; (23ff4a4 <srand+0x58>)
 23ff478:	2100      	movs	r1, #0
 23ff47a:	6083      	str	r3, [r0, #8]
 23ff47c:	230b      	movs	r3, #11
 23ff47e:	8183      	strh	r3, [r0, #12]
 23ff480:	2001      	movs	r0, #1
 23ff482:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff486:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff488:	2200      	movs	r2, #0
 23ff48a:	611c      	str	r4, [r3, #16]
 23ff48c:	615a      	str	r2, [r3, #20]
 23ff48e:	bd38      	pop	{r3, r4, r5, pc}
 23ff490:	1007ad78 	.word	0x1007ad78
 23ff494:	023ffe59 	.word	0x023ffe59
 23ff498:	023ffe70 	.word	0x023ffe70
 23ff49c:	abcd330e 	.word	0xabcd330e
 23ff4a0:	e66d1234 	.word	0xe66d1234
 23ff4a4:	0005deec 	.word	0x0005deec

023ff4a8 <strchr>:
 23ff4a8:	b2c9      	uxtb	r1, r1
 23ff4aa:	4603      	mov	r3, r0
 23ff4ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff4b0:	b11a      	cbz	r2, 23ff4ba <strchr+0x12>
 23ff4b2:	428a      	cmp	r2, r1
 23ff4b4:	d1f9      	bne.n	23ff4aa <strchr+0x2>
 23ff4b6:	4618      	mov	r0, r3
 23ff4b8:	4770      	bx	lr
 23ff4ba:	2900      	cmp	r1, #0
 23ff4bc:	bf18      	it	ne
 23ff4be:	2300      	movne	r3, #0
 23ff4c0:	e7f9      	b.n	23ff4b6 <strchr+0xe>

023ff4c2 <strchrnul>:
 23ff4c2:	b510      	push	{r4, lr}
 23ff4c4:	4604      	mov	r4, r0
 23ff4c6:	f7ff ffef 	bl	23ff4a8 <strchr>
 23ff4ca:	b918      	cbnz	r0, 23ff4d4 <strchrnul+0x12>
 23ff4cc:	4620      	mov	r0, r4
 23ff4ce:	f7fc f8cd 	bl	23fb66c <strlen>
 23ff4d2:	4420      	add	r0, r4
 23ff4d4:	bd10      	pop	{r4, pc}

023ff4d6 <strcpy>:
 23ff4d6:	4603      	mov	r3, r0
 23ff4d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff4dc:	f803 2b01 	strb.w	r2, [r3], #1
 23ff4e0:	2a00      	cmp	r2, #0
 23ff4e2:	d1f9      	bne.n	23ff4d8 <strcpy+0x2>
 23ff4e4:	4770      	bx	lr

023ff4e6 <strncmp>:
 23ff4e6:	b510      	push	{r4, lr}
 23ff4e8:	b17a      	cbz	r2, 23ff50a <strncmp+0x24>
 23ff4ea:	4603      	mov	r3, r0
 23ff4ec:	3901      	subs	r1, #1
 23ff4ee:	1884      	adds	r4, r0, r2
 23ff4f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff4f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff4f8:	4290      	cmp	r0, r2
 23ff4fa:	d101      	bne.n	23ff500 <strncmp+0x1a>
 23ff4fc:	42a3      	cmp	r3, r4
 23ff4fe:	d101      	bne.n	23ff504 <strncmp+0x1e>
 23ff500:	1a80      	subs	r0, r0, r2
 23ff502:	bd10      	pop	{r4, pc}
 23ff504:	2800      	cmp	r0, #0
 23ff506:	d1f3      	bne.n	23ff4f0 <strncmp+0xa>
 23ff508:	e7fa      	b.n	23ff500 <strncmp+0x1a>
 23ff50a:	4610      	mov	r0, r2
 23ff50c:	e7f9      	b.n	23ff502 <strncmp+0x1c>

023ff50e <strrchr>:
 23ff50e:	b538      	push	{r3, r4, r5, lr}
 23ff510:	4603      	mov	r3, r0
 23ff512:	460c      	mov	r4, r1
 23ff514:	b969      	cbnz	r1, 23ff532 <strrchr+0x24>
 23ff516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff51a:	f7ff bfc5 	b.w	23ff4a8 <strchr>
 23ff51e:	1c43      	adds	r3, r0, #1
 23ff520:	4605      	mov	r5, r0
 23ff522:	4621      	mov	r1, r4
 23ff524:	4618      	mov	r0, r3
 23ff526:	f7ff ffbf 	bl	23ff4a8 <strchr>
 23ff52a:	2800      	cmp	r0, #0
 23ff52c:	d1f7      	bne.n	23ff51e <strrchr+0x10>
 23ff52e:	4628      	mov	r0, r5
 23ff530:	bd38      	pop	{r3, r4, r5, pc}
 23ff532:	2500      	movs	r5, #0
 23ff534:	e7f5      	b.n	23ff522 <strrchr+0x14>
	...

023ff538 <_strtol_l.constprop.0>:
 23ff538:	2b01      	cmp	r3, #1
 23ff53a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff53e:	d001      	beq.n	23ff544 <_strtol_l.constprop.0+0xc>
 23ff540:	2b24      	cmp	r3, #36	; 0x24
 23ff542:	d906      	bls.n	23ff552 <_strtol_l.constprop.0+0x1a>
 23ff544:	f7fd fa4e 	bl	23fc9e4 <__errno>
 23ff548:	2316      	movs	r3, #22
 23ff54a:	6003      	str	r3, [r0, #0]
 23ff54c:	2000      	movs	r0, #0
 23ff54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff552:	460d      	mov	r5, r1
 23ff554:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff638 <_strtol_l.constprop.0+0x100>
 23ff558:	462e      	mov	r6, r5
 23ff55a:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff55e:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff562:	f017 0708 	ands.w	r7, r7, #8
 23ff566:	d1f7      	bne.n	23ff558 <_strtol_l.constprop.0+0x20>
 23ff568:	2c2d      	cmp	r4, #45	; 0x2d
 23ff56a:	d132      	bne.n	23ff5d2 <_strtol_l.constprop.0+0x9a>
 23ff56c:	782c      	ldrb	r4, [r5, #0]
 23ff56e:	2701      	movs	r7, #1
 23ff570:	1cb5      	adds	r5, r6, #2
 23ff572:	2b00      	cmp	r3, #0
 23ff574:	d05b      	beq.n	23ff62e <_strtol_l.constprop.0+0xf6>
 23ff576:	2b10      	cmp	r3, #16
 23ff578:	d109      	bne.n	23ff58e <_strtol_l.constprop.0+0x56>
 23ff57a:	2c30      	cmp	r4, #48	; 0x30
 23ff57c:	d107      	bne.n	23ff58e <_strtol_l.constprop.0+0x56>
 23ff57e:	782c      	ldrb	r4, [r5, #0]
 23ff580:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff584:	2c58      	cmp	r4, #88	; 0x58
 23ff586:	d14d      	bne.n	23ff624 <_strtol_l.constprop.0+0xec>
 23ff588:	786c      	ldrb	r4, [r5, #1]
 23ff58a:	2310      	movs	r3, #16
 23ff58c:	3502      	adds	r5, #2
 23ff58e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff592:	f04f 0c00 	mov.w	ip, #0
 23ff596:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ff59a:	4666      	mov	r6, ip
 23ff59c:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff5a0:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff5a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff5a8:	f1be 0f09 	cmp.w	lr, #9
 23ff5ac:	d816      	bhi.n	23ff5dc <_strtol_l.constprop.0+0xa4>
 23ff5ae:	4674      	mov	r4, lr
 23ff5b0:	42a3      	cmp	r3, r4
 23ff5b2:	dd24      	ble.n	23ff5fe <_strtol_l.constprop.0+0xc6>
 23ff5b4:	f1bc 0f00 	cmp.w	ip, #0
 23ff5b8:	db1e      	blt.n	23ff5f8 <_strtol_l.constprop.0+0xc0>
 23ff5ba:	45b1      	cmp	r9, r6
 23ff5bc:	d31c      	bcc.n	23ff5f8 <_strtol_l.constprop.0+0xc0>
 23ff5be:	d101      	bne.n	23ff5c4 <_strtol_l.constprop.0+0x8c>
 23ff5c0:	45a2      	cmp	sl, r4
 23ff5c2:	db19      	blt.n	23ff5f8 <_strtol_l.constprop.0+0xc0>
 23ff5c4:	fb06 4603 	mla	r6, r6, r3, r4
 23ff5c8:	f04f 0c01 	mov.w	ip, #1
 23ff5cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff5d0:	e7e8      	b.n	23ff5a4 <_strtol_l.constprop.0+0x6c>
 23ff5d2:	2c2b      	cmp	r4, #43	; 0x2b
 23ff5d4:	bf04      	itt	eq
 23ff5d6:	782c      	ldrbeq	r4, [r5, #0]
 23ff5d8:	1cb5      	addeq	r5, r6, #2
 23ff5da:	e7ca      	b.n	23ff572 <_strtol_l.constprop.0+0x3a>
 23ff5dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff5e0:	f1be 0f19 	cmp.w	lr, #25
 23ff5e4:	d801      	bhi.n	23ff5ea <_strtol_l.constprop.0+0xb2>
 23ff5e6:	3c37      	subs	r4, #55	; 0x37
 23ff5e8:	e7e2      	b.n	23ff5b0 <_strtol_l.constprop.0+0x78>
 23ff5ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff5ee:	f1be 0f19 	cmp.w	lr, #25
 23ff5f2:	d804      	bhi.n	23ff5fe <_strtol_l.constprop.0+0xc6>
 23ff5f4:	3c57      	subs	r4, #87	; 0x57
 23ff5f6:	e7db      	b.n	23ff5b0 <_strtol_l.constprop.0+0x78>
 23ff5f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ff5fc:	e7e6      	b.n	23ff5cc <_strtol_l.constprop.0+0x94>
 23ff5fe:	f1bc 0f00 	cmp.w	ip, #0
 23ff602:	da05      	bge.n	23ff610 <_strtol_l.constprop.0+0xd8>
 23ff604:	2322      	movs	r3, #34	; 0x22
 23ff606:	4646      	mov	r6, r8
 23ff608:	6003      	str	r3, [r0, #0]
 23ff60a:	b942      	cbnz	r2, 23ff61e <_strtol_l.constprop.0+0xe6>
 23ff60c:	4630      	mov	r0, r6
 23ff60e:	e79e      	b.n	23ff54e <_strtol_l.constprop.0+0x16>
 23ff610:	b107      	cbz	r7, 23ff614 <_strtol_l.constprop.0+0xdc>
 23ff612:	4276      	negs	r6, r6
 23ff614:	2a00      	cmp	r2, #0
 23ff616:	d0f9      	beq.n	23ff60c <_strtol_l.constprop.0+0xd4>
 23ff618:	f1bc 0f00 	cmp.w	ip, #0
 23ff61c:	d000      	beq.n	23ff620 <_strtol_l.constprop.0+0xe8>
 23ff61e:	1e69      	subs	r1, r5, #1
 23ff620:	6011      	str	r1, [r2, #0]
 23ff622:	e7f3      	b.n	23ff60c <_strtol_l.constprop.0+0xd4>
 23ff624:	2430      	movs	r4, #48	; 0x30
 23ff626:	2b00      	cmp	r3, #0
 23ff628:	d1b1      	bne.n	23ff58e <_strtol_l.constprop.0+0x56>
 23ff62a:	2308      	movs	r3, #8
 23ff62c:	e7af      	b.n	23ff58e <_strtol_l.constprop.0+0x56>
 23ff62e:	2c30      	cmp	r4, #48	; 0x30
 23ff630:	d0a5      	beq.n	23ff57e <_strtol_l.constprop.0+0x46>
 23ff632:	230a      	movs	r3, #10
 23ff634:	e7ab      	b.n	23ff58e <_strtol_l.constprop.0+0x56>
 23ff636:	bf00      	nop
 23ff638:	023ffeca 	.word	0x023ffeca

023ff63c <strtol>:
 23ff63c:	4613      	mov	r3, r2
 23ff63e:	460a      	mov	r2, r1
 23ff640:	4601      	mov	r1, r0
 23ff642:	4802      	ldr	r0, [pc, #8]	; (23ff64c <strtol+0x10>)
 23ff644:	6800      	ldr	r0, [r0, #0]
 23ff646:	f7ff bf77 	b.w	23ff538 <_strtol_l.constprop.0>
 23ff64a:	bf00      	nop
 23ff64c:	1007ad78 	.word	0x1007ad78

023ff650 <__register_exitproc>:
 23ff650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff654:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ff714 <__register_exitproc+0xc4>
 23ff658:	4606      	mov	r6, r0
 23ff65a:	461f      	mov	r7, r3
 23ff65c:	460d      	mov	r5, r1
 23ff65e:	f8d8 0000 	ldr.w	r0, [r8]
 23ff662:	4691      	mov	r9, r2
 23ff664:	f000 f858 	bl	23ff718 <__retarget_lock_acquire_recursive>
 23ff668:	4b26      	ldr	r3, [pc, #152]	; (23ff704 <__register_exitproc+0xb4>)
 23ff66a:	681c      	ldr	r4, [r3, #0]
 23ff66c:	b934      	cbnz	r4, 23ff67c <__register_exitproc+0x2c>
 23ff66e:	4c26      	ldr	r4, [pc, #152]	; (23ff708 <__register_exitproc+0xb8>)
 23ff670:	601c      	str	r4, [r3, #0]
 23ff672:	4b26      	ldr	r3, [pc, #152]	; (23ff70c <__register_exitproc+0xbc>)
 23ff674:	b113      	cbz	r3, 23ff67c <__register_exitproc+0x2c>
 23ff676:	681b      	ldr	r3, [r3, #0]
 23ff678:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff67c:	6863      	ldr	r3, [r4, #4]
 23ff67e:	2b1f      	cmp	r3, #31
 23ff680:	dd07      	ble.n	23ff692 <__register_exitproc+0x42>
 23ff682:	f8d8 0000 	ldr.w	r0, [r8]
 23ff686:	f000 f849 	bl	23ff71c <__retarget_lock_release_recursive>
 23ff68a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ff68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff692:	b35e      	cbz	r6, 23ff6ec <__register_exitproc+0x9c>
 23ff694:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff698:	b988      	cbnz	r0, 23ff6be <__register_exitproc+0x6e>
 23ff69a:	4b1d      	ldr	r3, [pc, #116]	; (23ff710 <__register_exitproc+0xc0>)
 23ff69c:	b923      	cbnz	r3, 23ff6a8 <__register_exitproc+0x58>
 23ff69e:	f8d8 0000 	ldr.w	r0, [r8]
 23ff6a2:	f000 f83a 	bl	23ff71a <__retarget_lock_release>
 23ff6a6:	e7f0      	b.n	23ff68a <__register_exitproc+0x3a>
 23ff6a8:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff6ac:	f7fd f962 	bl	23fc974 <malloc>
 23ff6b0:	2800      	cmp	r0, #0
 23ff6b2:	d0f4      	beq.n	23ff69e <__register_exitproc+0x4e>
 23ff6b4:	2300      	movs	r3, #0
 23ff6b6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff6ba:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff6be:	6863      	ldr	r3, [r4, #4]
 23ff6c0:	2201      	movs	r2, #1
 23ff6c2:	2e02      	cmp	r6, #2
 23ff6c4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff6c8:	fa02 f203 	lsl.w	r2, r2, r3
 23ff6cc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff6d0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff6d4:	ea43 0302 	orr.w	r3, r3, r2
 23ff6d8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff6dc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff6e0:	bf02      	ittt	eq
 23ff6e2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff6e6:	4313      	orreq	r3, r2
 23ff6e8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff6ec:	6863      	ldr	r3, [r4, #4]
 23ff6ee:	f8d8 0000 	ldr.w	r0, [r8]
 23ff6f2:	1c5a      	adds	r2, r3, #1
 23ff6f4:	3302      	adds	r3, #2
 23ff6f6:	6062      	str	r2, [r4, #4]
 23ff6f8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff6fc:	f000 f80e 	bl	23ff71c <__retarget_lock_release_recursive>
 23ff700:	2000      	movs	r0, #0
 23ff702:	e7c4      	b.n	23ff68e <__register_exitproc+0x3e>
 23ff704:	1007afe0 	.word	0x1007afe0
 23ff708:	1007af54 	.word	0x1007af54
 23ff70c:	00000000 	.word	0x00000000
 23ff710:	023fc975 	.word	0x023fc975
 23ff714:	1007addc 	.word	0x1007addc

023ff718 <__retarget_lock_acquire_recursive>:
 23ff718:	4770      	bx	lr

023ff71a <__retarget_lock_release>:
 23ff71a:	4770      	bx	lr

023ff71c <__retarget_lock_release_recursive>:
 23ff71c:	4770      	bx	lr
	...

023ff720 <dynalib_user>:
 23ff720:	b67d 023f b6a5 023f b6a9 023f 0000 0000     }.?...?...?.....
 23ff730:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23ff740:	7574 6c61 4300 6e6f 6966 7567 6972 676e     tual.Configuring
 23ff750:	7320 7265 6169 206c 6f70 7472 7420 206f      serial port to 
 23ff760:	6874 2065 6174 6772 7465 5200 7365 7465     the target.Reset
 23ff770:	6974 676e 7420 6568 7420 7261 6567 0074     ting the target.
 23ff780:	6547 2074 6e69 7320 6e79 2063 6977 6874     Get in sync with
 23ff790:	7420 7261 6567 2074 5641 0052 7245 6f72      target AVR.Erro
 23ff7a0:	2072 6f63 6564 3220 203a 754f 2074 666f     r code 2: Out of
 23ff7b0:	7320 6e79 2163 4300 6568 6b63 6e69 2067      sync!.Checking 
 23ff7c0:	6564 6976 6563 7320 6769 616e 7574 6572     device signature
 23ff7d0:	4500 7272 726f 6320 646f 2065 3a33 5720     .Error code 3: W
 23ff7e0:	6f72 676e 6420 7665 6369 2065 6973 6e67     rong device sign
 23ff7f0:	7461 7275 2165 4500 6172 6973 676e 6420     ature!.Erasing d
 23ff800:	7665 6369 0065 7245 6f72 2072 6f63 6564     evice.Error code
 23ff810:	3420 203a 6843 7069 6520 6172 6573 6620      4: Chip erase f
 23ff820:	6961 756c 6572 0021 6553 7474 6e69 2067     ailure!.Setting 
 23ff830:	7270 676f 6172 6d6d 6e69 2067 6170 6172     programming para
 23ff840:	656d 6574 7372 4500 7272 726f 6320 646f     meters.Error cod
 23ff850:	2065 3a35 4620 6961 756c 6572 7420 206f     e 5: Failure to 
 23ff860:	7277 7469 2065 726f 7320 7465 7020 7261     write or set par
 23ff870:	6d61 7465 7265 2f73 6164 6174 0021 6553     ameters/data!.Se
 23ff880:	7474 6e69 2067 7865 6574 646e 6465 7020     tting extended p
 23ff890:	6f72 7267 6d61 696d 676e 7020 7261 6d61     rogramming param
 23ff8a0:	7465 7265 0073 6e45 6574 6972 676e 7020     eters.Entering p
 23ff8b0:	6f72 7267 6d61 696d 676e 6d20 646f 0065     rogramming mode.
 23ff8c0:	7341 6573 2074 2000 5320 7a69 3a65 2520     Asset .  Size: %
 23ff8d0:	2064 7962 6574 0073 6553 646e 6e69 2067     d bytes.Sending 
 23ff8e0:	6962 616e 7972 7420 206f 6174 6772 7465     binary to target
 23ff8f0:	4500 7272 726f 6320 646f 2065 3a36 4620     .Error code 6: F
 23ff900:	6961 756c 6572 7420 206f 7277 7469 2065     ailure to write 
 23ff910:	6c62 636f 216b 4100 6464 6572 7373 2520     block!.Address %
 23ff920:	2064 6b4f 4c00 6165 6976 676e 7020 6f72     d Ok.Leaving pro
 23ff930:	7267 6d61 696d 676e 6d20 646f 0065 7245     gramming mode.Er
 23ff940:	6f72 2072 6f63 6564 3020 203a 6146 6c69     ror code 0: Fail
 23ff950:	7275 2065 656c 7661 6e69 2067 7270 676f     ure leaving prog
 23ff960:	6172 6d6d 6e69 2067 6f6d 6564 0021 6552     ramming mode!.Re
 23ff970:	656c 7361 6e69 2067 6174 6772 7465 7327     leasing target's
 23ff980:	7320 7265 6169 206c 6f70 7472 6120 646e      serial port and
 23ff990:	7220 7365 7465 7020 6e69 4100 6472 6975      reset pin.Ardui
 23ff9a0:	6f6e 7320 6375 6563 7373 7566 6c6c 2079     no successfully 
 23ff9b0:	7075 6164 6574 2164 4e00 746f 3a65 4e20     updated!.Note: N
 23ff9c0:	206f 6576 6972 6966 6163 6974 6e6f 6f20     o verification o
 23ff9d0:	2066 6874 2065 7075 6f6c 6461 6465 6220     f the uploaded b
 23ff9e0:	6e69 7261 2079 6177 2073 616d 6564 7400     inary was made.t
 23ff9f0:	6972 6767 7265 744f 0061 6552 6461 2e79     riggerOta.Ready.
 23ffa00:	4100 7373 7465 2073 7661 6961 616c 6c62     .Assets availabl
 23ffa10:	3a65 0020 202c 5500 6470 7461 2065 7274     e: ., .Update tr
 23ffa20:	6769 6567 2072 6e65 6261 656c 2e64 5500     igger enabled..U
 23ffa30:	6f6e 5746 622e 6e69 5600 6c61 6469 6120     noFW.bin.Valid a
 23ffa40:	7373 7465 6620 756f 646e 202e 6c46 7361     sset found. Flas
 23ffa50:	6968 676e 002e 6f4e 7620 6c61 6469 6120     hing..No valid a
 23ffa60:	7373 7465 6620 756f 646e 202e 7055 6164     sset found. Upda
 23ffa70:	6574 7320 696b 7070 6465 002e               te skipped..

023ffa7c <_ZTVN5spark10LogHandlerE>:
	...
 23ffa8c:	b6c9 023f b6f1 023f                         ..?...?.

023ffa94 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ffa9c:	b705 023f b739 023f e14d 023f e2f5 023f     ..?.9.?.M.?...?.

023ffaac <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffab4:	ca7d 023f caa1 023f caf3 023f caaf 023f     }.?...?...?...?.
 23ffac4:	ca81 023f                                   ..?.

023ffac8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

023ffad0 <_ZTVN8particle16ApplicationAssetE>:
	...
 23ffad8:	ccbd 023f cce5 023f ca79 023f e605 023f     ..?...?.y.?...?.
 23ffae8:	ce2f 023f ca3f 023f ca5b 023f ca77 023f     /.?.?.?.[.?.w.?.
 23ffaf8:	ce69 023f cdc1 023f cdf1 023f               i.?...?...?.

023ffb04 <_ZTVN5spark13EthernetClassE>:
	...
 23ffb0c:	cfd5 023f cfcb 023f cfc1 023f cfb7 023f     ..?...?...?...?.
 23ffb1c:	cfab 023f cf9f 023f e4e1 023f e4e9 023f     ..?...?...?...?.
 23ffb2c:	cf93 023f cf8b 023f cf81 023f cf77 023f     ..?...?...?.w.?.
 23ffb3c:	e519 023f                                   ..?.

023ffb40 <_ZTV7TwoWire>:
	...
 23ffb48:	cff5 023f d03f 023f d017 023f cff7 023f     ..?.?.?...?...?.
 23ffb58:	d01f 023f d027 023f d02f 023f d037 023f     ..?.'.?./.?.7.?.

023ffb68 <_ZTV9IPAddress>:
	...
 23ffb70:	d099 023f d089 023f d08b 023f 6425 2500     ..?...?...?.%d.%
 23ffb80:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
 23ffb90:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
 23ffba0:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
 23ffbb0:	6100 7070 2500 3130 7530 0020 205d 2800     .app.%010u .] .(
 23ffbc0:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 23ffbd0:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
 23ffbe0:	006d 0066 6e6c 6600 006e 6f63 6564 6400     m.f.ln.fn.code.d
 23ffbf0:	7465 6961 006c 0000                         etail...

023ffbf8 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffc00:	d545 023f d56b 023f d529 023f d1a7 023f     E.?.k.?.).?...?.

023ffc10 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffc18:	d9f9 023f da11 023f e14d 023f e2f5 023f     ..?...?.M.?...?.

023ffc28 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffc30:	da25 023f da39 023f e32d 023f d531 023f     %.?.9.?.-.?.1.?.

023ffc40 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffc48:	d543 023f d579 023f e0b1 023f d533 023f     C.?.y.?...?.3.?.

023ffc58 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffc60:	d541 023f d587 023f d961 023f d5a9 023f     A.?...?.a.?...?.

023ffc70 <_ZTVN5spark12NetworkClassE>:
	...
 23ffc78:	e4a1 023f e4ab 023f e4b5 023f e4bf 023f     ..?...?...?...?.
 23ffc88:	e4c9 023f e4d5 023f e4e1 023f e4e9 023f     ..?...?...?...?.
 23ffc98:	e4f1 023f e4fd 023f e505 023f e50f 023f     ..?...?...?...?.
 23ffca8:	e519 023f 5925 252d 2d6d 6425 2554 3a48     ..?.%Y-%m-%dT%H:
 23ffcb8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

023ffcc8 <_ZTV11USARTSerial>:
	...
 23ffcd0:	eabd 023f eb29 023f eb01 023f e605 023f     ..?.).?...?...?.
 23ffce0:	ead1 023f eaed 023f eadf 023f eafb 023f     ..?...?...?...?.
 23ffcf0:	eabf 023f eac3 023f                         ..?...?.

023ffcf8 <_ZTV9USBSerial>:
	...
 23ffd00:	eb87 023f ebef 023f ebc5 023f e605 023f     ..?...?...?...?.
 23ffd10:	ebb7 023f eb89 023f eb99 023f ebe9 023f     ..?...?...?...?.
 23ffd20:	eba9 023f eb81 023f                         ..?...?.

023ffd28 <_ZTVN5spark9WiFiClassE>:
	...
 23ffd30:	ecef 023f ece5 023f ecdb 023f ec91 023f     ..?...?...?...?.
 23ffd40:	eccf 023f ecc3 023f e4e1 023f e4e9 023f     ..?...?...?...?.
 23ffd50:	ecb7 023f ecaf 023f eca5 023f ec9b 023f     ..?...?...?...?.
 23ffd60:	e519 023f                                   ..?.

023ffd64 <_ZSt7nothrow>:
	...

023ffd65 <_ZTSSt19_Sp_make_shared_tag>:
 23ffd65:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 23ffd75:	6572 5f64 6174 0067 0000                     red_tag....

023ffd80 <_ZTISt19_Sp_make_shared_tag>:
 23ffd80:	fdc0 023f fd65 023f                         ..?.e.?.

023ffd88 <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffd88:	fe20 023f fd94 023f fe44 023f                .?...?.D.?.

023ffd94 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffd94:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 23ffda4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 23ffdb4:	0045 0000                                   E...

023ffdb8 <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffdb8:	0000 0000 fd88 023f f1f9 023f f20d 023f     ......?...?...?.
 23ffdc8:	f3a1 023f f3a1 023f f277 023f f1b9 023f     ..?...?.w.?...?.
 23ffdd8:	f25f 023f f221 023f f1eb 023f               _.?.!.?...?.

023ffde4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffde4:	fe20 023f fdf0 023f fd88 023f                .?...?...?.

023ffdf0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffdf0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 23ffe00:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 23ffe10:	666e 456f 0000 0000                         nfoE....

023ffe18 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffe18:	0000 0000 fde4 023f f2a1 023f f2b5 023f     ......?...?...?.
 23ffe28:	f3a1 023f f3a1 023f f277 023f f1b9 023f     ..?...?.w.?...?.
 23ffe38:	f375 023f f301 023f f2c9 023f               u.?...?...?.

023ffe44 <_ZTISt9type_info>:
 23ffe44:	fdc0 023f fe4c 023f                         ..?.L.?.

023ffe4c <_ZTSSt9type_info>:
 23ffe4c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
 23ffe5c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
 23ffe6c:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
 23ffe7c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
 23ffe8c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
 23ffe9c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
 23ffeac:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
 23ffebc:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

023ffec9 <_ctype_>:
 23ffec9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 23ffed9:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ffee9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 23ffef9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 23fff09:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 23fff19:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 23fff29:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 23fff39:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 23fff49:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

023fffca <link_const_data_end>:
	...

023fffcc <link_constructors_location>:
 23fffcc:	023fc0d1 	.word	0x023fc0d1
 23fffd0:	023fcf19 	.word	0x023fcf19
 23fffd4:	023fcfe1 	.word	0x023fcfe1
 23fffd8:	023fe13d 	.word	0x023fe13d
 23fffdc:	023fe5f1 	.word	0x023fe5f1
 23fffe0:	023fe699 	.word	0x023fe699
 23fffe4:	023fea85 	.word	0x023fea85
 23fffe8:	023feaa9 	.word	0x023feaa9
 23fffec:	023fecf9 	.word	0x023fecf9
